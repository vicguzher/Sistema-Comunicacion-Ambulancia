
LoraAmbulance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c68  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f8  080082f8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080082f8  080082f8  000182f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008300  08008300  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008300  08008300  00018300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e8  20000018  08008328  00020018  2**2
                  ALLOC
 10 RAM1_region   00000000  20000900  20000900  00020018  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020018  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000900  20000900  00020900  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002c2cc  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000068d8  00000000  00000000  0004c351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000c34c  00000000  00000000  00052c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001918  00000000  00000000  0005ef78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001342  00000000  00000000  00060890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00023536  00000000  00000000  00061bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002c104  00000000  00000000  00085108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000c585e  00000000  00000000  000b120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00003ff8  00000000  00000000  00176a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  0017aa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000018 	.word	0x20000018
 8000154:	00000000 	.word	0x00000000
 8000158:	08007d84 	.word	0x08007d84

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000001c 	.word	0x2000001c
 8000174:	08007d84 	.word	0x08007d84

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b970 	b.w	8000480 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	460f      	mov	r7, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d965      	bls.n	800029a <__udivmoddi4+0xe2>
 80001ce:	fab2 f382 	clz	r3, r2
 80001d2:	b143      	cbz	r3, 80001e6 <__udivmoddi4+0x2e>
 80001d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d8:	f1c3 0220 	rsb	r2, r3, #32
 80001dc:	409f      	lsls	r7, r3
 80001de:	fa20 f202 	lsr.w	r2, r0, r2
 80001e2:	4317      	orrs	r7, r2
 80001e4:	409c      	lsls	r4, r3
 80001e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ea:	fa1f f58c 	uxth.w	r5, ip
 80001ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001fc:	fb01 f005 	mul.w	r0, r1, r5
 8000200:	4290      	cmp	r0, r2
 8000202:	d90a      	bls.n	800021a <__udivmoddi4+0x62>
 8000204:	eb1c 0202 	adds.w	r2, ip, r2
 8000208:	f101 37ff 	add.w	r7, r1, #4294967295
 800020c:	f080 811b 	bcs.w	8000446 <__udivmoddi4+0x28e>
 8000210:	4290      	cmp	r0, r2
 8000212:	f240 8118 	bls.w	8000446 <__udivmoddi4+0x28e>
 8000216:	3902      	subs	r1, #2
 8000218:	4462      	add	r2, ip
 800021a:	1a12      	subs	r2, r2, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022a:	fb00 f505 	mul.w	r5, r0, r5
 800022e:	42a5      	cmp	r5, r4
 8000230:	d90a      	bls.n	8000248 <__udivmoddi4+0x90>
 8000232:	eb1c 0404 	adds.w	r4, ip, r4
 8000236:	f100 32ff 	add.w	r2, r0, #4294967295
 800023a:	f080 8106 	bcs.w	800044a <__udivmoddi4+0x292>
 800023e:	42a5      	cmp	r5, r4
 8000240:	f240 8103 	bls.w	800044a <__udivmoddi4+0x292>
 8000244:	4464      	add	r4, ip
 8000246:	3802      	subs	r0, #2
 8000248:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40dc      	lsrs	r4, r3
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d908      	bls.n	8000274 <__udivmoddi4+0xbc>
 8000262:	2e00      	cmp	r6, #0
 8000264:	f000 80ec 	beq.w	8000440 <__udivmoddi4+0x288>
 8000268:	2100      	movs	r1, #0
 800026a:	e9c6 0500 	strd	r0, r5, [r6]
 800026e:	4608      	mov	r0, r1
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	fab3 f183 	clz	r1, r3
 8000278:	2900      	cmp	r1, #0
 800027a:	d149      	bne.n	8000310 <__udivmoddi4+0x158>
 800027c:	42ab      	cmp	r3, r5
 800027e:	d302      	bcc.n	8000286 <__udivmoddi4+0xce>
 8000280:	4282      	cmp	r2, r0
 8000282:	f200 80f7 	bhi.w	8000474 <__udivmoddi4+0x2bc>
 8000286:	1a84      	subs	r4, r0, r2
 8000288:	eb65 0203 	sbc.w	r2, r5, r3
 800028c:	2001      	movs	r0, #1
 800028e:	4617      	mov	r7, r2
 8000290:	2e00      	cmp	r6, #0
 8000292:	d0e2      	beq.n	800025a <__udivmoddi4+0xa2>
 8000294:	e9c6 4700 	strd	r4, r7, [r6]
 8000298:	e7df      	b.n	800025a <__udivmoddi4+0xa2>
 800029a:	b902      	cbnz	r2, 800029e <__udivmoddi4+0xe6>
 800029c:	deff      	udf	#255	; 0xff
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f040 808f 	bne.w	80003c6 <__udivmoddi4+0x20e>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2101      	movs	r1, #1
 80002b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b8:	fb07 2015 	mls	r0, r7, r5, r2
 80002bc:	0c22      	lsrs	r2, r4, #16
 80002be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c2:	fb0e f005 	mul.w	r0, lr, r5
 80002c6:	4290      	cmp	r0, r2
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x124>
 80002ca:	eb1c 0202 	adds.w	r2, ip, r2
 80002ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x122>
 80002d4:	4290      	cmp	r0, r2
 80002d6:	f200 80ca 	bhi.w	800046e <__udivmoddi4+0x2b6>
 80002da:	4645      	mov	r5, r8
 80002dc:	1a12      	subs	r2, r2, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e4:	fb07 2210 	mls	r2, r7, r0, r2
 80002e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x14e>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x14c>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80ba 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 8000304:	4610      	mov	r0, r2
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800030e:	e79f      	b.n	8000250 <__udivmoddi4+0x98>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa05 f401 	lsl.w	r4, r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	40fd      	lsrs	r5, r7
 8000328:	4323      	orrs	r3, r4
 800032a:	fa00 f901 	lsl.w	r9, r0, r1
 800032e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	fbb5 f8f0 	udiv	r8, r5, r0
 800033a:	0c1c      	lsrs	r4, r3, #16
 800033c:	fb00 5518 	mls	r5, r0, r8, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b0>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8087 	bcs.w	800046a <__udivmoddi4+0x2b2>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f240 8084 	bls.w	800046a <__udivmoddi4+0x2b2>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	b29d      	uxth	r5, r3
 800036c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000370:	fb00 4413 	mls	r4, r0, r3, r4
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	fb03 fe0e 	mul.w	lr, r3, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1da>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f103 30ff 	add.w	r0, r3, #4294967295
 8000388:	d26b      	bcs.n	8000462 <__udivmoddi4+0x2aa>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d969      	bls.n	8000462 <__udivmoddi4+0x2aa>
 800038e:	3b02      	subs	r3, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000396:	fba0 8302 	umull	r8, r3, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	429c      	cmp	r4, r3
 80003a0:	46c6      	mov	lr, r8
 80003a2:	461d      	mov	r5, r3
 80003a4:	d355      	bcc.n	8000452 <__udivmoddi4+0x29a>
 80003a6:	d052      	beq.n	800044e <__udivmoddi4+0x296>
 80003a8:	b156      	cbz	r6, 80003c0 <__udivmoddi4+0x208>
 80003aa:	ebb9 030e 	subs.w	r3, r9, lr
 80003ae:	eb64 0405 	sbc.w	r4, r4, r5
 80003b2:	fa04 f707 	lsl.w	r7, r4, r7
 80003b6:	40cb      	lsrs	r3, r1
 80003b8:	40cc      	lsrs	r4, r1
 80003ba:	431f      	orrs	r7, r3
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c3 0120 	rsb	r1, r3, #32
 80003ca:	fa02 fc03 	lsl.w	ip, r2, r3
 80003ce:	fa20 f201 	lsr.w	r2, r0, r1
 80003d2:	fa25 f101 	lsr.w	r1, r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	432a      	orrs	r2, r5
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e6:	fb07 1510 	mls	r5, r7, r0, r1
 80003ea:	0c11      	lsrs	r1, r2, #16
 80003ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f0:	fb00 f50e 	mul.w	r5, r0, lr
 80003f4:	428d      	cmp	r5, r1
 80003f6:	fa04 f403 	lsl.w	r4, r4, r3
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x256>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 38ff 	add.w	r8, r0, #4294967295
 8000404:	d22f      	bcs.n	8000466 <__udivmoddi4+0x2ae>
 8000406:	428d      	cmp	r5, r1
 8000408:	d92d      	bls.n	8000466 <__udivmoddi4+0x2ae>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	b292      	uxth	r2, r2
 8000412:	fbb1 f5f7 	udiv	r5, r1, r7
 8000416:	fb07 1115 	mls	r1, r7, r5, r1
 800041a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800041e:	fb05 f10e 	mul.w	r1, r5, lr
 8000422:	4291      	cmp	r1, r2
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x280>
 8000426:	eb1c 0202 	adds.w	r2, ip, r2
 800042a:	f105 38ff 	add.w	r8, r5, #4294967295
 800042e:	d216      	bcs.n	800045e <__udivmoddi4+0x2a6>
 8000430:	4291      	cmp	r1, r2
 8000432:	d914      	bls.n	800045e <__udivmoddi4+0x2a6>
 8000434:	3d02      	subs	r5, #2
 8000436:	4462      	add	r2, ip
 8000438:	1a52      	subs	r2, r2, r1
 800043a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800043e:	e739      	b.n	80002b4 <__udivmoddi4+0xfc>
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e709      	b.n	800025a <__udivmoddi4+0xa2>
 8000446:	4639      	mov	r1, r7
 8000448:	e6e7      	b.n	800021a <__udivmoddi4+0x62>
 800044a:	4610      	mov	r0, r2
 800044c:	e6fc      	b.n	8000248 <__udivmoddi4+0x90>
 800044e:	45c1      	cmp	r9, r8
 8000450:	d2aa      	bcs.n	80003a8 <__udivmoddi4+0x1f0>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb63 050c 	sbc.w	r5, r3, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7a4      	b.n	80003a8 <__udivmoddi4+0x1f0>
 800045e:	4645      	mov	r5, r8
 8000460:	e7ea      	b.n	8000438 <__udivmoddi4+0x280>
 8000462:	4603      	mov	r3, r0
 8000464:	e795      	b.n	8000392 <__udivmoddi4+0x1da>
 8000466:	4640      	mov	r0, r8
 8000468:	e7d1      	b.n	800040e <__udivmoddi4+0x256>
 800046a:	46d0      	mov	r8, sl
 800046c:	e77c      	b.n	8000368 <__udivmoddi4+0x1b0>
 800046e:	3d02      	subs	r5, #2
 8000470:	4462      	add	r2, ip
 8000472:	e733      	b.n	80002dc <__udivmoddi4+0x124>
 8000474:	4608      	mov	r0, r1
 8000476:	e70b      	b.n	8000290 <__udivmoddi4+0xd8>
 8000478:	4464      	add	r4, ip
 800047a:	3802      	subs	r0, #2
 800047c:	e743      	b.n	8000306 <__udivmoddi4+0x14e>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000484:	b500      	push	{lr}
 8000486:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800048e:	f042 0204 	orr.w	r2, r2, #4
 8000492:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000496:	f002 0204 	and.w	r2, r2, #4
 800049a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800049c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800049e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004a0:	f042 0201 	orr.w	r2, r2, #1
 80004a4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80004ae:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	4611      	mov	r1, r2
 80004b4:	200b      	movs	r0, #11
 80004b6:	f001 f92d 	bl	8001714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004ba:	200b      	movs	r0, #11
 80004bc:	f001 f962 	bl	8001784 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2102      	movs	r1, #2
 80004c4:	200f      	movs	r0, #15
 80004c6:	f001 f925 	bl	8001714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004ca:	200f      	movs	r0, #15
 80004cc:	f001 f95a 	bl	8001784 <HAL_NVIC_EnableIRQ>

}
 80004d0:	b003      	add	sp, #12
 80004d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004dc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	2400      	movs	r4, #0
 80004e0:	9403      	str	r4, [sp, #12]
 80004e2:	9404      	str	r4, [sp, #16]
 80004e4:	9405      	str	r4, [sp, #20]
 80004e6:	9406      	str	r4, [sp, #24]
 80004e8:	9407      	str	r4, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f0:	f042 0202 	orr.w	r2, r2, #2
 80004f4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	f002 0202 	and.w	r2, r2, #2
 80004fc:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80004fe:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000502:	f042 0204 	orr.w	r2, r2, #4
 8000506:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800050a:	f002 0204 	and.w	r2, r2, #4
 800050e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000510:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000512:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000514:	f042 0201 	orr.w	r2, r2, #1
 8000518:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800051a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000522:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8000524:	4e1a      	ldr	r6, [pc, #104]	; (8000590 <MX_GPIO_Init+0xb8>)
 8000526:	4622      	mov	r2, r4
 8000528:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 800052c:	4630      	mov	r0, r6
 800052e:	f001 fd1f 	bl	8001f70 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000532:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000536:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2501      	movs	r5, #1
 800053a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053e:	2302      	movs	r3, #2
 8000540:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	a903      	add	r1, sp, #12
 8000544:	4630      	mov	r0, r6
 8000546:	f001 fbc3 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800054a:	f04f 0803 	mov.w	r8, #3
 800054e:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000552:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8000556:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000558:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	a903      	add	r1, sp, #12
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f001 fbb6 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8000564:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000568:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056e:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	a903      	add	r1, sp, #12
 8000574:	4630      	mov	r0, r6
 8000576:	f001 fbab 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800057a:	2340      	movs	r3, #64	; 0x40
 800057c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000580:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8000582:	a903      	add	r1, sp, #12
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <MX_GPIO_Init+0xbc>)
 8000586:	f001 fba3 	bl	8001cd0 <HAL_GPIO_Init>

}
 800058a:	b008      	add	sp, #32
 800058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000590:	48000400 	.word	0x48000400
 8000594:	48000800 	.word	0x48000800

08000598 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059a:	e7fe      	b.n	800059a <Error_Handler+0x2>

0800059c <SystemClock_Config>:
{
 800059c:	b510      	push	{r4, lr}
 800059e:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a0:	2248      	movs	r2, #72	; 0x48
 80005a2:	2100      	movs	r1, #0
 80005a4:	a808      	add	r0, sp, #32
 80005a6:	f007 fba1 	bl	8007cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005aa:	2400      	movs	r4, #0
 80005ac:	9401      	str	r4, [sp, #4]
 80005ae:	9402      	str	r4, [sp, #8]
 80005b0:	9403      	str	r4, [sp, #12]
 80005b2:	9404      	str	r4, [sp, #16]
 80005b4:	9405      	str	r4, [sp, #20]
 80005b6:	9406      	str	r4, [sp, #24]
 80005b8:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80005ba:	f001 fce7 	bl	8001f8c <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80005c6:	f023 0318 	bic.w	r3, r3, #24
 80005ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005d2:	6813      	ldr	r3, [r2, #0]
 80005d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	6813      	ldr	r3, [r2, #0]
 80005e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005e8:	2324      	movs	r3, #36	; 0x24
 80005ea:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ec:	2381      	movs	r3, #129	; 0x81
 80005ee:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005f4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005f6:	23b0      	movs	r3, #176	; 0xb0
 80005f8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fa:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	a808      	add	r0, sp, #32
 80005fe:	f001 fe5f 	bl	80022c0 <HAL_RCC_OscConfig>
 8000602:	b970      	cbnz	r0, 8000622 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000604:	234f      	movs	r3, #79	; 0x4f
 8000606:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000608:	2300      	movs	r3, #0
 800060a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000612:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	2102      	movs	r1, #2
 8000616:	a801      	add	r0, sp, #4
 8000618:	f002 f984 	bl	8002924 <HAL_RCC_ClockConfig>
 800061c:	b918      	cbnz	r0, 8000626 <SystemClock_Config+0x8a>
}
 800061e:	b01a      	add	sp, #104	; 0x68
 8000620:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000622:	f7ff ffb9 	bl	8000598 <Error_Handler>
    Error_Handler();
 8000626:	f7ff ffb7 	bl	8000598 <Error_Handler>

0800062a <main>:
{
 800062a:	b508      	push	{r3, lr}
  HAL_Init();
 800062c:	f001 f824 	bl	8001678 <HAL_Init>
  SystemClock_Config();
 8000630:	f7ff ffb4 	bl	800059c <SystemClock_Config>
  MX_GPIO_Init();
 8000634:	f7ff ff50 	bl	80004d8 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000638:	f000 fca7 	bl	8000f8a <MX_SubGHz_Phy_Init>
    MX_SubGHz_Phy_Process();
 800063c:	f000 fcab 	bl	8000f96 <MX_SubGHz_Phy_Process>
  while (1)
 8000640:	e7fc      	b.n	800063c <main+0x12>
	...

08000644 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000644:	b500      	push	{lr}
 8000646:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	2100      	movs	r1, #0
 800064c:	a801      	add	r0, sp, #4
 800064e:	f007 fb4d 	bl	8007cec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000652:	4819      	ldr	r0, [pc, #100]	; (80006b8 <MX_RTC_Init+0x74>)
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_RTC_Init+0x78>)
 8000656:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000658:	231f      	movs	r3, #31
 800065a:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000660:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000662:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000668:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800066a:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800066c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000670:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000672:	f002 fcbb 	bl	8002fec <HAL_RTC_Init>
 8000676:	b9a8      	cbnz	r0, 80006a4 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <MX_RTC_Init+0x74>)
 800067a:	f002 fdf9 	bl	8003270 <HAL_RTCEx_SetSSRU_IT>
 800067e:	b9a0      	cbnz	r0, 80006aa <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000680:	2200      	movs	r2, #0
 8000682:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000684:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000686:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000688:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800068c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800068e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000692:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000694:	a901      	add	r1, sp, #4
 8000696:	4808      	ldr	r0, [pc, #32]	; (80006b8 <MX_RTC_Init+0x74>)
 8000698:	f002 fd0e 	bl	80030b8 <HAL_RTC_SetAlarm_IT>
 800069c:	b940      	cbnz	r0, 80006b0 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800069e:	b00d      	add	sp, #52	; 0x34
 80006a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006a4:	f7ff ff78 	bl	8000598 <Error_Handler>
 80006a8:	e7e6      	b.n	8000678 <MX_RTC_Init+0x34>
    Error_Handler();
 80006aa:	f7ff ff75 	bl	8000598 <Error_Handler>
 80006ae:	e7e7      	b.n	8000680 <MX_RTC_Init+0x3c>
    Error_Handler();
 80006b0:	f7ff ff72 	bl	8000598 <Error_Handler>
}
 80006b4:	e7f3      	b.n	800069e <MX_RTC_Init+0x5a>
 80006b6:	bf00      	nop
 80006b8:	20000034 	.word	0x20000034
 80006bc:	40002800 	.word	0x40002800

080006c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006c0:	b510      	push	{r4, lr}
 80006c2:	b090      	sub	sp, #64	; 0x40
 80006c4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c6:	2238      	movs	r2, #56	; 0x38
 80006c8:	2100      	movs	r1, #0
 80006ca:	a802      	add	r0, sp, #8
 80006cc:	f007 fb0e 	bl	8007cec <memset>
  if(rtcHandle->Instance==RTC)
 80006d0:	6822      	ldr	r2, [r4, #0]
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <HAL_RTC_MspInit+0x7c>)
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d001      	beq.n	80006dc <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006d8:	b010      	add	sp, #64	; 0x40
 80006da:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e8:	a802      	add	r0, sp, #8
 80006ea:	f002 fa6f 	bl	8002bcc <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	bb08      	cbnz	r0, 8000734 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80006f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80006fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000700:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000702:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000706:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800070e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000710:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	4611      	mov	r1, r2
 8000716:	2002      	movs	r0, #2
 8000718:	f000 fffc 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800071c:	2002      	movs	r0, #2
 800071e:	f001 f831 	bl	8001784 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	4611      	mov	r1, r2
 8000726:	202a      	movs	r0, #42	; 0x2a
 8000728:	f000 fff4 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800072c:	202a      	movs	r0, #42	; 0x2a
 800072e:	f001 f829 	bl	8001784 <HAL_NVIC_EnableIRQ>
}
 8000732:	e7d1      	b.n	80006d8 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8000734:	f7ff ff30 	bl	8000598 <Error_Handler>
 8000738:	e7da      	b.n	80006f0 <HAL_RTC_MspInit+0x30>
 800073a:	bf00      	nop
 800073c:	40002800 	.word	0x40002800

08000740 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000740:	4770      	bx	lr

08000742 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000742:	4770      	bx	lr

08000744 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000744:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000746:	f000 ffad 	bl	80016a4 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800074a:	2001      	movs	r0, #1
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <PWR_EnterStopMode+0x14>)
 800074e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000752:	f001 fc7f 	bl	8002054 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000756:	bd08      	pop	{r3, pc}
 8000758:	58000400 	.word	0x58000400

0800075c <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 800075c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800075e:	f000 ffa8 	bl	80016b2 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000762:	bd08      	pop	{r3, pc}

08000764 <PWR_ExitStopMode>:
{
 8000764:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8000766:	f000 ffa4 	bl	80016b2 <HAL_ResumeTick>
  vcom_Resume();
 800076a:	f000 fba5 	bl	8000eb8 <vcom_Resume>
}
 800076e:	bd08      	pop	{r3, pc}

08000770 <PWR_EnterSleepMode>:
{
 8000770:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8000772:	f000 ff97 	bl	80016a4 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000776:	2101      	movs	r1, #1
 8000778:	2000      	movs	r0, #0
 800077a:	f001 fc0f 	bl	8001f9c <HAL_PWR_EnterSLEEPMode>
}
 800077e:	bd08      	pop	{r3, pc}

08000780 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000780:	4770      	bx	lr

08000782 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <NMI_Handler>

08000784 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <HardFault_Handler>

08000786 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <MemManage_Handler>

08000788 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <BusFault_Handler>

0800078a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <UsageFault_Handler>

0800078c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	4770      	bx	lr

08000790 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	4770      	bx	lr

08000794 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000796:	4802      	ldr	r0, [pc, #8]	; (80007a0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8000798:	f002 fd96 	bl	80032c8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800079c:	bd08      	pop	{r3, pc}
 800079e:	bf00      	nop
 80007a0:	20000034 	.word	0x20000034

080007a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <DMA1_Channel1_IRQHandler+0xc>)
 80007a8:	f001 fa0a 	bl	8001bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007ac:	bd08      	pop	{r3, pc}
 80007ae:	bf00      	nop
 80007b0:	20000080 	.word	0x20000080

080007b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <DMA1_Channel5_IRQHandler+0xc>)
 80007b8:	f001 fa02 	bl	8001bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007bc:	bd08      	pop	{r3, pc}
 80007be:	bf00      	nop
 80007c0:	200000e0 	.word	0x200000e0

080007c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80007c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c6:	4802      	ldr	r0, [pc, #8]	; (80007d0 <USART2_IRQHandler+0xc>)
 80007c8:	f003 fa3c 	bl	8003c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007cc:	bd08      	pop	{r3, pc}
 80007ce:	bf00      	nop
 80007d0:	20000140 	.word	0x20000140

080007d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80007d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80007d6:	4802      	ldr	r0, [pc, #8]	; (80007e0 <RTC_Alarm_IRQHandler+0xc>)
 80007d8:	f002 fb82 	bl	8002ee0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80007dc:	bd08      	pop	{r3, pc}
 80007de:	bf00      	nop
 80007e0:	20000034 	.word	0x20000034

080007e4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80007e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80007e6:	4802      	ldr	r0, [pc, #8]	; (80007f0 <SUBGHZ_Radio_IRQHandler+0xc>)
 80007e8:	f003 f822 	bl	8003830 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80007ec:	bd08      	pop	{r3, pc}
 80007ee:	bf00      	nop
 80007f0:	2000006c 	.word	0x2000006c

080007f4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80007f4:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_SUBGHZ_Init+0x18>)
 80007f8:	2308      	movs	r3, #8
 80007fa:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80007fc:	f002 fd9a 	bl	8003334 <HAL_SUBGHZ_Init>
 8000800:	b900      	cbnz	r0, 8000804 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000802:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000804:	f7ff fec8 	bl	8000598 <Error_Handler>
}
 8000808:	e7fb      	b.n	8000802 <MX_SUBGHZ_Init+0xe>
 800080a:	bf00      	nop
 800080c:	2000006c 	.word	0x2000006c

08000810 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000810:	b500      	push	{lr}
 8000812:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000818:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800081a:	f042 0201 	orr.w	r2, r2, #1
 800081e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000828:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	4611      	mov	r1, r2
 800082e:	2032      	movs	r0, #50	; 0x32
 8000830:	f000 ff70 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000834:	2032      	movs	r0, #50	; 0x32
 8000836:	f000 ffa5 	bl	8001784 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800083a:	b003      	add	sp, #12
 800083c:	f85d fb04 	ldr.w	pc, [sp], #4

08000840 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000840:	b40c      	push	{r2, r3}
 8000842:	b500      	push	{lr}
 8000844:	b083      	sub	sp, #12
 8000846:	ab04      	add	r3, sp, #16
 8000848:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800084c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800084e:	f007 f989 	bl	8007b64 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000852:	b003      	add	sp, #12
 8000854:	f85d eb04 	ldr.w	lr, [sp], #4
 8000858:	b002      	add	sp, #8
 800085a:	4770      	bx	lr

0800085c <TimestampNow>:
{
 800085c:	b530      	push	{r4, r5, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	4604      	mov	r4, r0
 8000862:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8000864:	a802      	add	r0, sp, #8
 8000866:	f006 ff53 	bl	8007710 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800086a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	9b02      	ldr	r3, [sp, #8]
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <TimestampNow+0x2c>)
 8000874:	2110      	movs	r1, #16
 8000876:	4620      	mov	r0, r4
 8000878:	f7ff ffe2 	bl	8000840 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800087c:	4620      	mov	r0, r4
 800087e:	f7ff fc7b 	bl	8000178 <strlen>
 8000882:	8028      	strh	r0, [r5, #0]
}
 8000884:	b005      	add	sp, #20
 8000886:	bd30      	pop	{r4, r5, pc}
 8000888:	08007df8 	.word	0x08007df8

0800088c <SystemApp_Init>:
{
 800088c:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800088e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000892:	6893      	ldr	r3, [r2, #8]
 8000894:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000898:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800089a:	f006 ff5b 	bl	8007754 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800089e:	2401      	movs	r4, #1
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <SystemApp_Init+0x3c>)
 80008a2:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 80008a4:	f000 f83c 	bl	8000920 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 80008a8:	f006 fc9a 	bl	80071e0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <SystemApp_Init+0x40>)
 80008ae:	f006 fcb1 	bl	8007214 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80008b2:	2002      	movs	r0, #2
 80008b4:	f006 fcb4 	bl	8007220 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 80008b8:	f006 fdc2 	bl	8007440 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80008bc:	4621      	mov	r1, r4
 80008be:	4620      	mov	r0, r4
 80008c0:	f006 fdde 	bl	8007480 <UTIL_LPM_SetOffMode>
}
 80008c4:	bd10      	pop	{r4, pc}
 80008c6:	bf00      	nop
 80008c8:	20000078 	.word	0x20000078
 80008cc:	0800085d 	.word	0x0800085d

080008d0 <UTIL_SEQ_Idle>:
{
 80008d0:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80008d2:	f006 fdeb 	bl	80074ac <UTIL_LPM_EnterLowPower>
}
 80008d6:	bd08      	pop	{r3, pc}

080008d8 <UTIL_ADV_TRACE_PreSendHook>:
{
 80008d8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80008da:	2101      	movs	r1, #1
 80008dc:	2002      	movs	r0, #2
 80008de:	f006 fdb9 	bl	8007454 <UTIL_LPM_SetStopMode>
}
 80008e2:	bd08      	pop	{r3, pc}

080008e4 <UTIL_ADV_TRACE_PostSendHook>:
{
 80008e4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2002      	movs	r0, #2
 80008ea:	f006 fdb3 	bl	8007454 <UTIL_LPM_SetStopMode>
}
 80008ee:	bd08      	pop	{r3, pc}

080008f0 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80008f0:	2000      	movs	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80008f4:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <HAL_GetTick+0x14>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b90b      	cbnz	r3, 8000900 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80008fc:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80008fe:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8000900:	f000 f87c 	bl	80009fc <TIMER_IF_GetTimerValue>
 8000904:	e7fb      	b.n	80008fe <HAL_GetTick+0xa>
 8000906:	bf00      	nop
 8000908:	20000078 	.word	0x20000078

0800090c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800090c:	b500      	push	{lr}
 800090e:	b083      	sub	sp, #12
 8000910:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000912:	9801      	ldr	r0, [sp, #4]
 8000914:	f000 f958 	bl	8000bc8 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000918:	b003      	add	sp, #12
 800091a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000920 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000922:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000924:	f000 fecc 	bl	80016c0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000928:	f000 fed2 	bl	80016d0 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800092c:	f000 fed8 	bl	80016e0 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000930:	2400      	movs	r4, #0
 8000932:	9403      	str	r4, [sp, #12]
 8000934:	9404      	str	r4, [sp, #16]
 8000936:	9405      	str	r4, [sp, #20]
 8000938:	9406      	str	r4, [sp, #24]
 800093a:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800094a:	f042 0202 	orr.w	r2, r2, #2
 800094e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000952:	f002 0202 	and.w	r2, r2, #2
 8000956:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000958:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800095a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800095c:	f042 0202 	orr.w	r2, r2, #2
 8000960:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800096a:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800096c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8000970:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000972:	4d0c      	ldr	r5, [pc, #48]	; (80009a4 <DBG_Init+0x84>)
 8000974:	a903      	add	r1, sp, #12
 8000976:	4628      	mov	r0, r5
 8000978:	f001 f9aa 	bl	8001cd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800097c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8000980:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000982:	a903      	add	r1, sp, #12
 8000984:	4628      	mov	r0, r5
 8000986:	f001 f9a3 	bl	8001cd0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800098a:	4622      	mov	r2, r4
 800098c:	4639      	mov	r1, r7
 800098e:	4628      	mov	r0, r5
 8000990:	f001 faee 	bl	8001f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000994:	4622      	mov	r2, r4
 8000996:	4631      	mov	r1, r6
 8000998:	4628      	mov	r0, r5
 800099a:	f001 fae9 	bl	8001f70 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800099e:	b009      	add	sp, #36	; 0x24
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	bf00      	nop
 80009a4:	48000400 	.word	0x48000400

080009a8 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <TIMER_IF_SetTimerContext+0x1c>)
 80009aa:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80009ac:	e001      	b.n	80009b2 <TIMER_IF_SetTimerContext+0xa>
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <TIMER_IF_SetTimerContext+0x1c>)
 80009b0:	6898      	ldr	r0, [r3, #8]
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <TIMER_IF_SetTimerContext+0x1c>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	4283      	cmp	r3, r0
 80009b8:	d1f9      	bne.n	80009ae <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 80009ba:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <TIMER_IF_SetTimerContext+0x20>)
 80009be:	6018      	str	r0, [r3, #0]
}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40002800 	.word	0x40002800
 80009c8:	2000007c 	.word	0x2000007c

080009cc <TIMER_IF_GetTimerContext>:
}
 80009cc:	4b01      	ldr	r3, [pc, #4]	; (80009d4 <TIMER_IF_GetTimerContext+0x8>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	2000007c 	.word	0x2000007c

080009d8 <TIMER_IF_GetTimerElapsedTime>:
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80009da:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80009dc:	e001      	b.n	80009e2 <TIMER_IF_GetTimerElapsedTime+0xa>
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80009e0:	6898      	ldr	r0, [r3, #8]
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	4283      	cmp	r3, r0
 80009e8:	d1f9      	bne.n	80009de <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 80009ea:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <TIMER_IF_GetTimerElapsedTime+0x20>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	1ac0      	subs	r0, r0, r3
 80009f2:	4770      	bx	lr
 80009f4:	40002800 	.word	0x40002800
 80009f8:	2000007c 	.word	0x2000007c

080009fc <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <TIMER_IF_GetTimerValue+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b153      	cbz	r3, 8000a18 <TIMER_IF_GetTimerValue+0x1c>
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <TIMER_IF_GetTimerValue+0x24>)
 8000a04:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000a06:	e001      	b.n	8000a0c <TIMER_IF_GetTimerValue+0x10>
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <TIMER_IF_GetTimerValue+0x24>)
 8000a0a:	6898      	ldr	r0, [r3, #8]
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <TIMER_IF_GetTimerValue+0x24>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	4283      	cmp	r3, r0
 8000a12:	d1f9      	bne.n	8000a08 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8000a14:	43c0      	mvns	r0, r0
 8000a16:	4770      	bx	lr
  uint32_t ret = 0;
 8000a18:	2000      	movs	r0, #0
}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000079 	.word	0x20000079
 8000a20:	40002800 	.word	0x40002800

08000a24 <TIMER_IF_GetMinimumTimeout>:
}
 8000a24:	2003      	movs	r0, #3
 8000a26:	4770      	bx	lr

08000a28 <TIMER_IF_Convert_ms2Tick>:
{
 8000a28:	b508      	push	{r3, lr}
 8000a2a:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a30:	2300      	movs	r3, #0
 8000a32:	0280      	lsls	r0, r0, #10
 8000a34:	0d89      	lsrs	r1, r1, #22
 8000a36:	f7ff fba7 	bl	8000188 <__aeabi_uldivmod>
}
 8000a3a:	bd08      	pop	{r3, pc}

08000a3c <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000a3c:	0ec2      	lsrs	r2, r0, #27
 8000a3e:	0143      	lsls	r3, r0, #5
 8000a40:	1a1b      	subs	r3, r3, r0
 8000a42:	f162 0200 	sbc.w	r2, r2, #0
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	181b      	adds	r3, r3, r0
 8000a50:	f142 0000 	adc.w	r0, r2, #0
 8000a54:	00c0      	lsls	r0, r0, #3
 8000a56:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8000a5a:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8000a5e:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8000a62:	4770      	bx	lr

08000a64 <TIMER_IF_StopTimer>:
{
 8000a64:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <TIMER_IF_StopTimer+0x20>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000a6c:	4c06      	ldr	r4, [pc, #24]	; (8000a88 <TIMER_IF_StopTimer+0x24>)
 8000a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a72:	4620      	mov	r0, r4
 8000a74:	f002 f9f4 	bl	8002e60 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000a7e:	2000      	movs	r0, #0
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	40002800 	.word	0x40002800
 8000a88:	20000034 	.word	0x20000034

08000a8c <TIMER_IF_BkUp_Write_MSBticks>:
{
 8000a8c:	b508      	push	{r3, lr}
 8000a8e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000a90:	2102      	movs	r1, #2
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8000a94:	f002 fc2d 	bl	80032f2 <HAL_RTCEx_BKUPWrite>
}
 8000a98:	bd08      	pop	{r3, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000034 	.word	0x20000034

08000aa0 <TIMER_IF_Init>:
{
 8000aa0:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <TIMER_IF_Init+0x40>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b10b      	cbz	r3, 8000aac <TIMER_IF_Init+0xc>
}
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000aac:	4c0d      	ldr	r4, [pc, #52]	; (8000ae4 <TIMER_IF_Init+0x44>)
 8000aae:	f04f 35ff 	mov.w	r5, #4294967295
 8000ab2:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8000ab4:	f7ff fdc6 	bl	8000644 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8000ab8:	f7ff ffd4 	bl	8000a64 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000abc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f002 f9cd 	bl	8002e60 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000ac6:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f002 fbb1 	bl	8003230 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff ffdc 	bl	8000a8c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8000ad4:	f7ff ff68 	bl	80009a8 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8000ad8:	4b01      	ldr	r3, [pc, #4]	; (8000ae0 <TIMER_IF_Init+0x40>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e7e3      	b.n	8000aa8 <TIMER_IF_Init+0x8>
 8000ae0:	20000079 	.word	0x20000079
 8000ae4:	20000034 	.word	0x20000034

08000ae8 <TIMER_IF_BkUp_Write_Seconds>:
{
 8000ae8:	b508      	push	{r3, lr}
 8000aea:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000aec:	2100      	movs	r1, #0
 8000aee:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8000af0:	f002 fbff 	bl	80032f2 <HAL_RTCEx_BKUPWrite>
}
 8000af4:	bd08      	pop	{r3, pc}
 8000af6:	bf00      	nop
 8000af8:	20000034 	.word	0x20000034

08000afc <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8000afc:	b508      	push	{r3, lr}
 8000afe:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000b00:	2101      	movs	r1, #1
 8000b02:	4802      	ldr	r0, [pc, #8]	; (8000b0c <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8000b04:	f002 fbf5 	bl	80032f2 <HAL_RTCEx_BKUPWrite>
}
 8000b08:	bd08      	pop	{r3, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000034 	.word	0x20000034

08000b10 <TIMER_IF_StartTimer>:
{
 8000b10:	b510      	push	{r4, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8000b16:	222c      	movs	r2, #44	; 0x2c
 8000b18:	2100      	movs	r1, #0
 8000b1a:	a801      	add	r0, sp, #4
 8000b1c:	f007 f8e6 	bl	8007cec <memset>
  TIMER_IF_StopTimer();
 8000b20:	f7ff ffa0 	bl	8000a64 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <TIMER_IF_StartTimer+0x48>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000b2e:	43e4      	mvns	r4, r4
 8000b30:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b32:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000b34:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b38:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b40:	2201      	movs	r2, #1
 8000b42:	a901      	add	r1, sp, #4
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <TIMER_IF_StartTimer+0x4c>)
 8000b46:	f002 fab7 	bl	80030b8 <HAL_RTC_SetAlarm_IT>
 8000b4a:	b910      	cbnz	r0, 8000b52 <TIMER_IF_StartTimer+0x42>
}
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	b00c      	add	sp, #48	; 0x30
 8000b50:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b52:	f7ff fd21 	bl	8000598 <Error_Handler>
 8000b56:	e7f9      	b.n	8000b4c <TIMER_IF_StartTimer+0x3c>
 8000b58:	2000007c 	.word	0x2000007c
 8000b5c:	20000034 	.word	0x20000034

08000b60 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8000b60:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8000b62:	2102      	movs	r1, #2
 8000b64:	4801      	ldr	r0, [pc, #4]	; (8000b6c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8000b66:	f002 fbcb 	bl	8003300 <HAL_RTCEx_BKUPRead>
}
 8000b6a:	bd08      	pop	{r3, pc}
 8000b6c:	20000034 	.word	0x20000034

08000b70 <TIMER_IF_GetTime>:
{
 8000b70:	b538      	push	{r3, r4, r5, lr}
 8000b72:	4605      	mov	r5, r0
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <TIMER_IF_GetTime+0x34>)
 8000b76:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000b78:	e001      	b.n	8000b7e <TIMER_IF_GetTime+0xe>
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <TIMER_IF_GetTime+0x34>)
 8000b7c:	689c      	ldr	r4, [r3, #8]
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <TIMER_IF_GetTime+0x34>)
 8000b80:	6892      	ldr	r2, [r2, #8]
 8000b82:	42a2      	cmp	r2, r4
 8000b84:	d1f9      	bne.n	8000b7a <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8000b86:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000b88:	f7ff ffea 	bl	8000b60 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000b8c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000b8e:	0aa4      	lsrs	r4, r4, #10
 8000b90:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000b94:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8000b98:	f7ff ff50 	bl	8000a3c <TIMER_IF_Convert_Tick2ms>
 8000b9c:	8028      	strh	r0, [r5, #0]
}
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	bd38      	pop	{r3, r4, r5, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <TIMER_IF_BkUp_Read_Seconds>:
{
 8000ba8:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000baa:	2100      	movs	r1, #0
 8000bac:	4801      	ldr	r0, [pc, #4]	; (8000bb4 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8000bae:	f002 fba7 	bl	8003300 <HAL_RTCEx_BKUPRead>
}
 8000bb2:	bd08      	pop	{r3, pc}
 8000bb4:	20000034 	.word	0x20000034

08000bb8 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8000bb8:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4801      	ldr	r0, [pc, #4]	; (8000bc4 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8000bbe:	f002 fb9f 	bl	8003300 <HAL_RTCEx_BKUPRead>
}
 8000bc2:	bd08      	pop	{r3, pc}
 8000bc4:	20000034 	.word	0x20000034

08000bc8 <TIMER_IF_DelayMs>:
{
 8000bc8:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000bca:	f7ff ff2d 	bl	8000a28 <TIMER_IF_Convert_ms2Tick>
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <TIMER_IF_DelayMs+0x3c>)
 8000bd0:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000bd2:	e001      	b.n	8000bd8 <TIMER_IF_DelayMs+0x10>
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <TIMER_IF_DelayMs+0x3c>)
 8000bd6:	6899      	ldr	r1, [r3, #8]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <TIMER_IF_DelayMs+0x3c>)
 8000bda:	6892      	ldr	r2, [r2, #8]
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	d1f9      	bne.n	8000bd4 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8000be0:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000be2:	e00a      	b.n	8000bfa <TIMER_IF_DelayMs+0x32>
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <TIMER_IF_DelayMs+0x3c>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <TIMER_IF_DelayMs+0x3c>)
 8000bea:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d1f9      	bne.n	8000be4 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8000bf0:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000bf2:	1a5b      	subs	r3, r3, r1
 8000bf4:	4283      	cmp	r3, r0
 8000bf6:	d203      	bcs.n	8000c00 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8000bf8:	bf00      	nop
 8000bfa:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <TIMER_IF_DelayMs+0x3c>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000bfe:	e7f3      	b.n	8000be8 <TIMER_IF_DelayMs+0x20>
}
 8000c00:	bd08      	pop	{r3, pc}
 8000c02:	bf00      	nop
 8000c04:	40002800 	.word	0x40002800

08000c08 <HAL_RTC_AlarmAEventCallback>:
{
 8000c08:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000c0a:	f006 fec7 	bl	800799c <UTIL_TIMER_IRQ_Handler>
}
 8000c0e:	bd08      	pop	{r3, pc}

08000c10 <HAL_RTCEx_SSRUEventCallback>:
{
 8000c10:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000c12:	f7ff ffa5 	bl	8000b60 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000c16:	3001      	adds	r0, #1
 8000c18:	f7ff ff38 	bl	8000a8c <TIMER_IF_BkUp_Write_MSBticks>
}
 8000c1c:	bd08      	pop	{r3, pc}
	...

08000c20 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c20:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c22:	4817      	ldr	r0, [pc, #92]	; (8000c80 <MX_USART2_UART_Init+0x60>)
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART2_UART_Init+0x64>)
 8000c26:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000c28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c2c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c32:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c34:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c36:	220c      	movs	r2, #12
 8000c38:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c40:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c42:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c44:	f003 feb8 	bl	80049b8 <HAL_UART_Init>
 8000c48:	b970      	cbnz	r0, 8000c68 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_USART2_UART_Init+0x60>)
 8000c4e:	f004 f868 	bl	8004d22 <HAL_UARTEx_SetTxFifoThreshold>
 8000c52:	b960      	cbnz	r0, 8000c6e <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	480a      	ldr	r0, [pc, #40]	; (8000c80 <MX_USART2_UART_Init+0x60>)
 8000c58:	f004 f888 	bl	8004d6c <HAL_UARTEx_SetRxFifoThreshold>
 8000c5c:	b950      	cbnz	r0, 8000c74 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8000c5e:	4808      	ldr	r0, [pc, #32]	; (8000c80 <MX_USART2_UART_Init+0x60>)
 8000c60:	f004 f83b 	bl	8004cda <HAL_UARTEx_EnableFifoMode>
 8000c64:	b948      	cbnz	r0, 8000c7a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c68:	f7ff fc96 	bl	8000598 <Error_Handler>
 8000c6c:	e7ed      	b.n	8000c4a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8000c6e:	f7ff fc93 	bl	8000598 <Error_Handler>
 8000c72:	e7ef      	b.n	8000c54 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8000c74:	f7ff fc90 	bl	8000598 <Error_Handler>
 8000c78:	e7f1      	b.n	8000c5e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8000c7a:	f7ff fc8d 	bl	8000598 <Error_Handler>
}
 8000c7e:	e7f2      	b.n	8000c66 <MX_USART2_UART_Init+0x46>
 8000c80:	20000140 	.word	0x20000140
 8000c84:	40004400 	.word	0x40004400

08000c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c88:	b530      	push	{r4, r5, lr}
 8000c8a:	b097      	sub	sp, #92	; 0x5c
 8000c8c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	2100      	movs	r1, #0
 8000c90:	9111      	str	r1, [sp, #68]	; 0x44
 8000c92:	9112      	str	r1, [sp, #72]	; 0x48
 8000c94:	9113      	str	r1, [sp, #76]	; 0x4c
 8000c96:	9114      	str	r1, [sp, #80]	; 0x50
 8000c98:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9a:	2238      	movs	r2, #56	; 0x38
 8000c9c:	a803      	add	r0, sp, #12
 8000c9e:	f007 f825 	bl	8007cec <memset>
  if(uartHandle->Instance==USART2)
 8000ca2:	6822      	ldr	r2, [r4, #0]
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <HAL_UART_MspInit+0x114>)
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d001      	beq.n	8000cae <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000caa:	b017      	add	sp, #92	; 0x5c
 8000cac:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <HAL_UART_MspInit+0x118>)
 8000cb4:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	a803      	add	r0, sp, #12
 8000cb8:	f001 ff88 	bl	8002bcc <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d15e      	bne.n	8000d7e <HAL_UART_MspInit+0xf6>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cc6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000cca:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000cd2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000cd4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd8:	f042 0201 	orr.w	r2, r2, #1
 8000cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ce6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	a911      	add	r1, sp, #68	; 0x44
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d02:	f000 ffe5 	bl	8001cd0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_UART_MspInit+0x120>)
 8000d0a:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000d0c:	2314      	movs	r3, #20
 8000d0e:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d10:	2310      	movs	r3, #16
 8000d12:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d14:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d1a:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1c:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d1e:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d20:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d22:	f000 fdbf 	bl	80018a4 <HAL_DMA_Init>
 8000d26:	bb68      	cbnz	r0, 8000d84 <HAL_UART_MspInit+0xfc>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000d28:	2110      	movs	r1, #16
 8000d2a:	481e      	ldr	r0, [pc, #120]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d2c:	f000 ffbc 	bl	8001ca8 <HAL_DMA_ConfigChannelAttributes>
 8000d30:	bb58      	cbnz	r0, 8000d8a <HAL_UART_MspInit+0x102>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d34:	67e3      	str	r3, [r4, #124]	; 0x7c
 8000d36:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000d38:	481c      	ldr	r0, [pc, #112]	; (8000dac <HAL_UART_MspInit+0x124>)
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0x128>)
 8000d3c:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000d3e:	2313      	movs	r3, #19
 8000d40:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d42:	2300      	movs	r3, #0
 8000d44:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d46:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d4c:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d4e:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d50:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d54:	f000 fda6 	bl	80018a4 <HAL_DMA_Init>
 8000d58:	b9d0      	cbnz	r0, 8000d90 <HAL_UART_MspInit+0x108>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <HAL_UART_MspInit+0x124>)
 8000d5e:	f000 ffa3 	bl	8001ca8 <HAL_DMA_ConfigChannelAttributes>
 8000d62:	b9c0      	cbnz	r0, 8000d96 <HAL_UART_MspInit+0x10e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x124>)
 8000d66:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8000d6a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2102      	movs	r1, #2
 8000d70:	2025      	movs	r0, #37	; 0x25
 8000d72:	f000 fccf 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d76:	2025      	movs	r0, #37	; 0x25
 8000d78:	f000 fd04 	bl	8001784 <HAL_NVIC_EnableIRQ>
}
 8000d7c:	e795      	b.n	8000caa <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000d7e:	f7ff fc0b 	bl	8000598 <Error_Handler>
 8000d82:	e79d      	b.n	8000cc0 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8000d84:	f7ff fc08 	bl	8000598 <Error_Handler>
 8000d88:	e7ce      	b.n	8000d28 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8000d8a:	f7ff fc05 	bl	8000598 <Error_Handler>
 8000d8e:	e7d0      	b.n	8000d32 <HAL_UART_MspInit+0xaa>
      Error_Handler();
 8000d90:	f7ff fc02 	bl	8000598 <Error_Handler>
 8000d94:	e7e1      	b.n	8000d5a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000d96:	f7ff fbff 	bl	8000598 <Error_Handler>
 8000d9a:	e7e3      	b.n	8000d64 <HAL_UART_MspInit+0xdc>
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	000c0004 	.word	0x000c0004
 8000da4:	200000e0 	.word	0x200000e0
 8000da8:	40020058 	.word	0x40020058
 8000dac:	20000080 	.word	0x20000080
 8000db0:	40020008 	.word	0x40020008

08000db4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8000db4:	6802      	ldr	r2, [r0, #0]
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_UART_MspDeInit+0x3c>)
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d000      	beq.n	8000dbe <HAL_UART_MspDeInit+0xa>
 8000dbc:	4770      	bx	lr
{
 8000dbe:	b510      	push	{r4, lr}
 8000dc0:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dc6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000dc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8000dce:	210c      	movs	r1, #12
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f001 f84e 	bl	8001e74 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000dd8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8000dda:	f000 fdd5 	bl	8001988 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000dde:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8000de2:	f000 fdd1 	bl	8001988 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000de6:	2025      	movs	r0, #37	; 0x25
 8000de8:	f000 fcda 	bl	80017a0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000dec:	bd10      	pop	{r4, pc}
 8000dee:	bf00      	nop
 8000df0:	40004400 	.word	0x40004400

08000df4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8000df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <vcom_Init+0x20>)
 8000df8:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8000dfa:	f7ff fb43 	bl	8000484 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000dfe:	f7ff ff0f 	bl	8000c20 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <vcom_Init+0x24>)
 8000e04:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000e08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8000e10:	2000      	movs	r0, #0
 8000e12:	bd08      	pop	{r3, pc}
 8000e14:	200001d8 	.word	0x200001d8
 8000e18:	58000800 	.word	0x58000800

08000e1c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8000e1c:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8000e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8000e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e2c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <vcom_DeInit+0x28>)
 8000e34:	f7ff ffbe 	bl	8000db4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f000 fcb1 	bl	80017a0 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8000e3e:	2000      	movs	r0, #0
 8000e40:	bd08      	pop	{r3, pc}
 8000e42:	bf00      	nop
 8000e44:	20000140 	.word	0x20000140

08000e48 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8000e48:	b508      	push	{r3, lr}
 8000e4a:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8000e4c:	4601      	mov	r1, r0
 8000e4e:	4802      	ldr	r0, [pc, #8]	; (8000e58 <vcom_Trace_DMA+0x10>)
 8000e50:	f002 fe34 	bl	8003abc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8000e54:	2000      	movs	r0, #0
 8000e56:	bd08      	pop	{r3, pc}
 8000e58:	20000140 	.word	0x20000140

08000e5c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <vcom_ReceiveInit+0x50>)
 8000e62:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8000e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e68:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8000e6a:	ab02      	add	r3, sp, #8
 8000e6c:	e913 0006 	ldmdb	r3, {r1, r2}
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <vcom_ReceiveInit+0x54>)
 8000e72:	f003 feda 	bl	8004c2a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <vcom_ReceiveInit+0x54>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000e80:	d1f9      	bne.n	8000e76 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8000e82:	69da      	ldr	r2, [r3, #28]
 8000e84:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000e88:	d0fb      	beq.n	8000e82 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000e90:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8000e92:	4c07      	ldr	r4, [pc, #28]	; (8000eb0 <vcom_ReceiveInit+0x54>)
 8000e94:	4620      	mov	r0, r4
 8000e96:	f003 ff09 	bl	8004cac <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4905      	ldr	r1, [pc, #20]	; (8000eb4 <vcom_ReceiveInit+0x58>)
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f003 fe5c 	bl	8004b5c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd10      	pop	{r4, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001d4 	.word	0x200001d4
 8000eb0:	20000140 	.word	0x20000140
 8000eb4:	200001dc 	.word	0x200001dc

08000eb8 <vcom_Resume>:

void vcom_Resume(void)
{
 8000eb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eba:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <vcom_Resume+0x20>)
 8000ebc:	f003 fd7c 	bl	80049b8 <HAL_UART_Init>
 8000ec0:	b920      	cbnz	r0, 8000ecc <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <vcom_Resume+0x24>)
 8000ec4:	f000 fcee 	bl	80018a4 <HAL_DMA_Init>
 8000ec8:	b918      	cbnz	r0, 8000ed2 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8000eca:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ecc:	f7ff fb64 	bl	8000598 <Error_Handler>
 8000ed0:	e7f7      	b.n	8000ec2 <vcom_Resume+0xa>
    Error_Handler();
 8000ed2:	f7ff fb61 	bl	8000598 <Error_Handler>
}
 8000ed6:	e7f8      	b.n	8000eca <vcom_Resume+0x12>
 8000ed8:	20000140 	.word	0x20000140
 8000edc:	200000e0 	.word	0x200000e0

08000ee0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8000ee2:	6802      	ldr	r2, [r0, #0]
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_UART_TxCpltCallback+0x18>)
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d000      	beq.n	8000eec <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8000eea:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_UART_TxCpltCallback+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	4798      	blx	r3
}
 8000ef4:	e7f9      	b.n	8000eea <HAL_UART_TxCpltCallback+0xa>
 8000ef6:	bf00      	nop
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	200001d8 	.word	0x200001d8

08000f00 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8000f00:	6802      	ldr	r2, [r0, #0]
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_UART_RxCpltCallback+0x2c>)
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d000      	beq.n	8000f0a <HAL_UART_RxCpltCallback+0xa>
 8000f08:	4770      	bx	lr
{
 8000f0a:	b510      	push	{r4, lr}
 8000f0c:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_UART_RxCpltCallback+0x30>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b12b      	cbz	r3, 8000f20 <HAL_UART_RxCpltCallback+0x20>
 8000f14:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000f18:	b912      	cbnz	r2, 8000f20 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_UART_RxCpltCallback+0x34>)
 8000f1e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	4904      	ldr	r1, [pc, #16]	; (8000f34 <HAL_UART_RxCpltCallback+0x34>)
 8000f24:	4620      	mov	r0, r4
 8000f26:	f003 fe19 	bl	8004b5c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8000f2a:	bd10      	pop	{r4, pc}
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	200001d4 	.word	0x200001d4
 8000f34:	200001dc 	.word	0x200001dc

08000f38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f3c:	f000 fb9b 	bl	8001676 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f66:	f006 fedb 	bl	8007d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6a:	f7ff fb5e 	bl	800062a <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   r0, =_estack
 8000f70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f7c:	08008310 	.word	0x08008310
  ldr r2, =_sbss
 8000f80:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f84:	20000900 	.word	0x20000900

08000f88 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>

08000f8a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8000f8a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8000f8c:	f7ff fc7e 	bl	800088c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8000f90:	f000 f9e8 	bl	8001364 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8000f94:	bd08      	pop	{r3, pc}

08000f96 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8000f96:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f006 faf2 	bl	8007584 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8000fa0:	bd08      	pop	{r3, pc}
	...

08000fa4 <OnledEvent>:
      break;
  }
}

static void OnledEvent(void *context)
{
 8000fa4:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 8000fa6:	4c07      	ldr	r4, [pc, #28]	; (8000fc4 <OnledEvent+0x20>)
 8000fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fac:	4620      	mov	r0, r4
 8000fae:	f000 ffe4 	bl	8001f7a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8000fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f000 ffdf 	bl	8001f7a <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLed);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <OnledEvent+0x24>)
 8000fbe:	f006 fc8d 	bl	80078dc <UTIL_TIMER_Start>
}
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	20000408 	.word	0x20000408

08000fcc <PingPong_Process>:
{
 8000fcc:	b510      	push	{r4, lr}
  Radio.Sleep();
 8000fce:	4b73      	ldr	r3, [pc, #460]	; (800119c <PingPong_Process+0x1d0>)
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	4798      	blx	r3
  switch (State)
 8000fd4:	4b72      	ldr	r3, [pc, #456]	; (80011a0 <PingPong_Process+0x1d4>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	f200 80ac 	bhi.w	8001136 <PingPong_Process+0x16a>
 8000fde:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000fe2:	0005      	.short	0x0005
 8000fe4:	00ab00ab 	.word	0x00ab00ab
 8000fe8:	00d0009f 	.word	0x00d0009f
      if (isMaster == true)
 8000fec:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <PingPong_Process+0x1d8>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d055      	beq.n	80010a0 <PingPong_Process+0xd4>
        if (RxBufferSize > 0)
 8000ff4:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <PingPong_Process+0x1dc>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 809c 	beq.w	8001136 <PingPong_Process+0x16a>
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 8000ffe:	2204      	movs	r2, #4
 8001000:	496a      	ldr	r1, [pc, #424]	; (80011ac <PingPong_Process+0x1e0>)
 8001002:	486b      	ldr	r0, [pc, #428]	; (80011b0 <PingPong_Process+0x1e4>)
 8001004:	f006 fe7a 	bl	8007cfc <strncmp>
 8001008:	b1a0      	cbz	r0, 8001034 <PingPong_Process+0x68>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800100a:	2204      	movs	r2, #4
 800100c:	4969      	ldr	r1, [pc, #420]	; (80011b4 <PingPong_Process+0x1e8>)
 800100e:	4868      	ldr	r0, [pc, #416]	; (80011b0 <PingPong_Process+0x1e4>)
 8001010:	f006 fe74 	bl	8007cfc <strncmp>
 8001014:	2800      	cmp	r0, #0
 8001016:	d135      	bne.n	8001084 <PingPong_Process+0xb8>
            isMaster = false;
 8001018:	2100      	movs	r1, #0
 800101a:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <PingPong_Process+0x1d8>)
 800101c:	7019      	strb	r1, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800101e:	4b66      	ldr	r3, [pc, #408]	; (80011b8 <PingPong_Process+0x1ec>)
 8001020:	2201      	movs	r2, #1
 8001022:	4610      	mov	r0, r2
 8001024:	f006 f950 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001028:	4b5c      	ldr	r3, [pc, #368]	; (800119c <PingPong_Process+0x1d0>)
 800102a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001030:	4798      	blx	r3
 8001032:	e080      	b.n	8001136 <PingPong_Process+0x16a>
            UTIL_TIMER_Stop(&timerLed);
 8001034:	4861      	ldr	r0, [pc, #388]	; (80011bc <PingPong_Process+0x1f0>)
 8001036:	f006 fbf7 	bl	8007828 <UTIL_TIMER_Stop>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800103a:	4c61      	ldr	r4, [pc, #388]	; (80011c0 <PingPong_Process+0x1f4>)
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001042:	4620      	mov	r0, r4
 8001044:	f000 ff94 	bl	8001f70 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8001048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104c:	4620      	mov	r0, r4
 800104e:	f000 ff94 	bl	8001f7a <HAL_GPIO_TogglePin>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 8001052:	4c52      	ldr	r4, [pc, #328]	; (800119c <PingPong_Process+0x1d0>)
 8001054:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001056:	4798      	blx	r3
 8001058:	30c8      	adds	r0, #200	; 0xc8
 800105a:	f7ff fc57 	bl	800090c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800105e:	4b59      	ldr	r3, [pc, #356]	; (80011c4 <PingPong_Process+0x1f8>)
 8001060:	2201      	movs	r2, #1
 8001062:	2100      	movs	r1, #0
 8001064:	4610      	mov	r0, r2
 8001066:	f006 f92f 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800106a:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <PingPong_Process+0x1fc>)
 800106c:	2201      	movs	r2, #1
 800106e:	2100      	movs	r1, #0
 8001070:	4610      	mov	r0, r2
 8001072:	f006 f929 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 8001076:	4855      	ldr	r0, [pc, #340]	; (80011cc <PingPong_Process+0x200>)
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <PingPong_Process+0x204>)
 800107a:	6003      	str	r3, [r0, #0]
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800107c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4798      	blx	r3
 8001082:	e058      	b.n	8001136 <PingPong_Process+0x16a>
            isMaster = true;
 8001084:	2001      	movs	r0, #1
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <PingPong_Process+0x1d8>)
 8001088:	7018      	strb	r0, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800108a:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <PingPong_Process+0x208>)
 800108c:	4602      	mov	r2, r0
 800108e:	2100      	movs	r1, #0
 8001090:	f006 f91a 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <PingPong_Process+0x1d0>)
 8001096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001098:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800109c:	4798      	blx	r3
 800109e:	e04a      	b.n	8001136 <PingPong_Process+0x16a>
        if (RxBufferSize > 0)
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <PingPong_Process+0x1dc>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d046      	beq.n	8001136 <PingPong_Process+0x16a>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 80010a8:	2204      	movs	r2, #4
 80010aa:	4942      	ldr	r1, [pc, #264]	; (80011b4 <PingPong_Process+0x1e8>)
 80010ac:	4840      	ldr	r0, [pc, #256]	; (80011b0 <PingPong_Process+0x1e4>)
 80010ae:	f006 fe25 	bl	8007cfc <strncmp>
 80010b2:	bb38      	cbnz	r0, 8001104 <PingPong_Process+0x138>
            UTIL_TIMER_Stop(&timerLed);
 80010b4:	4841      	ldr	r0, [pc, #260]	; (80011bc <PingPong_Process+0x1f0>)
 80010b6:	f006 fbb7 	bl	8007828 <UTIL_TIMER_Stop>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80010ba:	4c41      	ldr	r4, [pc, #260]	; (80011c0 <PingPong_Process+0x1f4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c2:	4620      	mov	r0, r4
 80010c4:	f000 ff54 	bl	8001f70 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	4620      	mov	r0, r4
 80010ce:	f000 ff54 	bl	8001f7a <HAL_GPIO_TogglePin>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 80010d2:	4c32      	ldr	r4, [pc, #200]	; (800119c <PingPong_Process+0x1d0>)
 80010d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80010d6:	4798      	blx	r3
 80010d8:	30c8      	adds	r0, #200	; 0xc8
 80010da:	f7ff fc17 	bl	800090c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <PingPong_Process+0x20c>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	2100      	movs	r1, #0
 80010e4:	4610      	mov	r0, r2
 80010e6:	f006 f8ef 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 80010ea:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <PingPong_Process+0x210>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	2100      	movs	r1, #0
 80010f0:	4610      	mov	r0, r2
 80010f2:	f006 f8e9 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 80010f6:	4835      	ldr	r0, [pc, #212]	; (80011cc <PingPong_Process+0x200>)
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <PingPong_Process+0x214>)
 80010fa:	6003      	str	r3, [r0, #0]
            Radio.Send(BufferTx, PAYLOAD_LEN);
 80010fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	4798      	blx	r3
 8001102:	e018      	b.n	8001136 <PingPong_Process+0x16a>
            isMaster = true;
 8001104:	2001      	movs	r0, #1
 8001106:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <PingPong_Process+0x1d8>)
 8001108:	7018      	strb	r0, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <PingPong_Process+0x208>)
 800110c:	4602      	mov	r2, r0
 800110e:	2100      	movs	r1, #0
 8001110:	f006 f8da 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <PingPong_Process+0x1d0>)
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800111c:	4798      	blx	r3
 800111e:	e00a      	b.n	8001136 <PingPong_Process+0x16a>
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <PingPong_Process+0x218>)
 8001122:	2201      	movs	r2, #1
 8001124:	2100      	movs	r1, #0
 8001126:	4610      	mov	r0, r2
 8001128:	f006 f8ce 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <PingPong_Process+0x1d0>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001130:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001134:	4798      	blx	r3
}
 8001136:	bd10      	pop	{r4, pc}
      if (isMaster == true)
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <PingPong_Process+0x1d8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b1ab      	cbz	r3, 800116a <PingPong_Process+0x19e>
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800113e:	4c17      	ldr	r4, [pc, #92]	; (800119c <PingPong_Process+0x1d0>)
 8001140:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001142:	4798      	blx	r3
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <PingPong_Process+0x21c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4418      	add	r0, r3
 800114a:	30c8      	adds	r0, #200	; 0xc8
 800114c:	f7ff fbde 	bl	800090c <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <PingPong_Process+0x1fc>)
 8001152:	2201      	movs	r2, #1
 8001154:	2100      	movs	r1, #0
 8001156:	4610      	mov	r0, r2
 8001158:	f006 f8b6 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800115c:	481b      	ldr	r0, [pc, #108]	; (80011cc <PingPong_Process+0x200>)
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <PingPong_Process+0x204>)
 8001160:	6003      	str	r3, [r0, #0]
        Radio.Send(BufferTx, PAYLOAD_LEN);
 8001162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001164:	2140      	movs	r1, #64	; 0x40
 8001166:	4798      	blx	r3
 8001168:	e7e5      	b.n	8001136 <PingPong_Process+0x16a>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <PingPong_Process+0x1ec>)
 800116c:	2201      	movs	r2, #1
 800116e:	2100      	movs	r1, #0
 8001170:	4610      	mov	r0, r2
 8001172:	f006 f8a9 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <PingPong_Process+0x1d0>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800117e:	4798      	blx	r3
 8001180:	e7d9      	b.n	8001136 <PingPong_Process+0x16a>
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <PingPong_Process+0x1ec>)
 8001184:	2201      	movs	r2, #1
 8001186:	2100      	movs	r1, #0
 8001188:	4610      	mov	r0, r2
 800118a:	f006 f89d 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <PingPong_Process+0x1d0>)
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001196:	4798      	blx	r3
}
 8001198:	e7cd      	b.n	8001136 <PingPong_Process+0x16a>
 800119a:	bf00      	nop
 800119c:	08008154 	.word	0x08008154
 80011a0:	20000401 	.word	0x20000401
 80011a4:	20000000 	.word	0x20000000
 80011a8:	200003fe 	.word	0x200003fe
 80011ac:	08007e54 	.word	0x08007e54
 80011b0:	200001e0 	.word	0x200001e0
 80011b4:	08007e7c 	.word	0x08007e7c
 80011b8:	08007e84 	.word	0x08007e84
 80011bc:	20000408 	.word	0x20000408
 80011c0:	48000400 	.word	0x48000400
 80011c4:	08007e5c 	.word	0x08007e5c
 80011c8:	08007e68 	.word	0x08007e68
 80011cc:	200002e0 	.word	0x200002e0
 80011d0:	474e4950 	.word	0x474e4950
 80011d4:	08007e98 	.word	0x08007e98
 80011d8:	08007eac 	.word	0x08007eac
 80011dc:	08007eb8 	.word	0x08007eb8
 80011e0:	474e4f50 	.word	0x474e4f50
 80011e4:	08007ecc 	.word	0x08007ecc
 80011e8:	20000404 	.word	0x20000404

080011ec <OnRxError>:
{
 80011ec:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <OnRxError+0x20>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	2100      	movs	r1, #0
 80011f4:	4610      	mov	r0, r2
 80011f6:	f006 f867 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  State = RX_ERROR;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <OnRxError+0x24>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8001200:	2100      	movs	r1, #0
 8001202:	2001      	movs	r0, #1
 8001204:	f006 f98a 	bl	800751c <UTIL_SEQ_SetTask>
}
 8001208:	bd08      	pop	{r3, pc}
 800120a:	bf00      	nop
 800120c:	08007ed8 	.word	0x08007ed8
 8001210:	20000401 	.word	0x20000401

08001214 <OnRxTimeout>:
{
 8001214:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <OnRxTimeout+0x1c>)
 8001218:	2201      	movs	r2, #1
 800121a:	2100      	movs	r1, #0
 800121c:	4610      	mov	r0, r2
 800121e:	f006 f853 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  State = RX_TIMEOUT;
 8001222:	2001      	movs	r0, #1
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <OnRxTimeout+0x20>)
 8001226:	7018      	strb	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8001228:	2100      	movs	r1, #0
 800122a:	f006 f977 	bl	800751c <UTIL_SEQ_SetTask>
}
 800122e:	bd08      	pop	{r3, pc}
 8001230:	08007ee4 	.word	0x08007ee4
 8001234:	20000401 	.word	0x20000401

08001238 <OnTxTimeout>:
{
 8001238:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <OnTxTimeout+0x20>)
 800123c:	2201      	movs	r2, #1
 800123e:	2100      	movs	r1, #0
 8001240:	4610      	mov	r0, r2
 8001242:	f006 f841 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  State = TX_TIMEOUT;
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <OnTxTimeout+0x24>)
 8001248:	2204      	movs	r2, #4
 800124a:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800124c:	2100      	movs	r1, #0
 800124e:	2001      	movs	r0, #1
 8001250:	f006 f964 	bl	800751c <UTIL_SEQ_SetTask>
}
 8001254:	bd08      	pop	{r3, pc}
 8001256:	bf00      	nop
 8001258:	08007ef4 	.word	0x08007ef4
 800125c:	20000401 	.word	0x20000401

08001260 <OnRxDone>:
{
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	4607      	mov	r7, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4615      	mov	r5, r2
 800126a:	461e      	mov	r6, r3
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <OnRxDone+0xb4>)
 800126e:	2201      	movs	r2, #1
 8001270:	2100      	movs	r1, #0
 8001272:	4610      	mov	r0, r2
 8001274:	f006 f828 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 8001278:	9601      	str	r6, [sp, #4]
 800127a:	9500      	str	r5, [sp, #0]
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <OnRxDone+0xb8>)
 800127e:	2201      	movs	r2, #1
 8001280:	2100      	movs	r1, #0
 8001282:	4610      	mov	r0, r2
 8001284:	f006 f820 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  SnrValue = LoraSnr_FskCfo;
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <OnRxDone+0xbc>)
 800128a:	701e      	strb	r6, [r3, #0]
  State = RX;
 800128c:	2100      	movs	r1, #0
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <OnRxDone+0xc0>)
 8001290:	7019      	strb	r1, [r3, #0]
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	4823      	ldr	r0, [pc, #140]	; (8001324 <OnRxDone+0xc4>)
 8001296:	f006 fd29 	bl	8007cec <memset>
  RxBufferSize = size;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <OnRxDone+0xc8>)
 800129c:	801c      	strh	r4, [r3, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800129e:	2cff      	cmp	r4, #255	; 0xff
 80012a0:	d90a      	bls.n	80012b8 <OnRxDone+0x58>
  RssiValue = rssi;
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <OnRxDone+0xcc>)
 80012a4:	701d      	strb	r5, [r3, #0]
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 80012a6:	9400      	str	r4, [sp, #0]
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <OnRxDone+0xd0>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	2100      	movs	r1, #0
 80012ae:	2003      	movs	r0, #3
 80012b0:	f006 f80a 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 80012b4:	2400      	movs	r4, #0
 80012b6:	e006      	b.n	80012c6 <OnRxDone+0x66>
    memcpy(BufferRx, payload, RxBufferSize);
 80012b8:	4622      	mov	r2, r4
 80012ba:	4639      	mov	r1, r7
 80012bc:	4819      	ldr	r0, [pc, #100]	; (8001324 <OnRxDone+0xc4>)
 80012be:	f006 fd53 	bl	8007d68 <memcpy>
 80012c2:	e7ee      	b.n	80012a2 <OnRxDone+0x42>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 80012c4:	3401      	adds	r4, #1
 80012c6:	2c3f      	cmp	r4, #63	; 0x3f
 80012c8:	dc18      	bgt.n	80012fc <OnRxDone+0x9c>
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <OnRxDone+0xc4>)
 80012cc:	5d1b      	ldrb	r3, [r3, r4]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <OnRxDone+0xd4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	4611      	mov	r1, r2
 80012d6:	2003      	movs	r0, #3
 80012d8:	f005 fff6 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 80012dc:	4262      	negs	r2, r4
 80012de:	f004 030f 	and.w	r3, r4, #15
 80012e2:	f002 020f 	and.w	r2, r2, #15
 80012e6:	bf58      	it	pl
 80012e8:	4253      	negpl	r3, r2
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	d1ea      	bne.n	80012c4 <OnRxDone+0x64>
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <OnRxDone+0xd8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	4611      	mov	r1, r2
 80012f4:	2003      	movs	r0, #3
 80012f6:	f005 ffe7 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
 80012fa:	e7e3      	b.n	80012c4 <OnRxDone+0x64>
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <OnRxDone+0xd8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	4611      	mov	r1, r2
 8001302:	2003      	movs	r0, #3
 8001304:	f005 ffe0 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8001308:	2100      	movs	r1, #0
 800130a:	2001      	movs	r0, #1
 800130c:	f006 f906 	bl	800751c <UTIL_SEQ_SetTask>
}
 8001310:	b003      	add	sp, #12
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	08007f04 	.word	0x08007f04
 8001318:	08007f10 	.word	0x08007f10
 800131c:	20000400 	.word	0x20000400
 8001320:	20000401 	.word	0x20000401
 8001324:	200001e0 	.word	0x200001e0
 8001328:	200003fe 	.word	0x200003fe
 800132c:	200003fc 	.word	0x200003fc
 8001330:	08007f34 	.word	0x08007f34
 8001334:	08007f48 	.word	0x08007f48
 8001338:	08007f0c 	.word	0x08007f0c

0800133c <OnTxDone>:
{
 800133c:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <OnTxDone+0x20>)
 8001340:	2201      	movs	r2, #1
 8001342:	2100      	movs	r1, #0
 8001344:	4610      	mov	r0, r2
 8001346:	f005 ffbf 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  State = TX;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <OnTxDone+0x24>)
 800134c:	2203      	movs	r2, #3
 800134e:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8001350:	2100      	movs	r1, #0
 8001352:	2001      	movs	r0, #1
 8001354:	f006 f8e2 	bl	800751c <UTIL_SEQ_SetTask>
}
 8001358:	bd08      	pop	{r3, pc}
 800135a:	bf00      	nop
 800135c:	08007f50 	.word	0x08007f50
 8001360:	20000401 	.word	0x20000401

08001364 <SubghzApp_Init>:
{
 8001364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001368:	b08b      	sub	sp, #44	; 0x2c
  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <SubghzApp_Init+0x154>)
 800136c:	2200      	movs	r2, #0
 800136e:	4611      	mov	r1, r2
 8001370:	2002      	movs	r0, #2
 8001372:	f005 ffa9 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8001376:	2400      	movs	r4, #0
 8001378:	9402      	str	r4, [sp, #8]
 800137a:	2603      	movs	r6, #3
 800137c:	9601      	str	r6, [sp, #4]
 800137e:	2501      	movs	r5, #1
 8001380:	9500      	str	r5, [sp, #0]
 8001382:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <SubghzApp_Init+0x158>)
 8001384:	4622      	mov	r2, r4
 8001386:	4621      	mov	r1, r4
 8001388:	2002      	movs	r0, #2
 800138a:	f005 ff9d 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800138e:	9402      	str	r4, [sp, #8]
 8001390:	9601      	str	r6, [sp, #4]
 8001392:	9500      	str	r5, [sp, #0]
 8001394:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <SubghzApp_Init+0x15c>)
 8001396:	4622      	mov	r2, r4
 8001398:	4621      	mov	r1, r4
 800139a:	2002      	movs	r0, #2
 800139c:	f005 ff94 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L, "Hola Mundo\n\r");
 80013a0:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <SubghzApp_Init+0x160>)
 80013a2:	462a      	mov	r2, r5
 80013a4:	4621      	mov	r1, r4
 80013a6:	4628      	mov	r0, r5
 80013a8:	f005 ff8e 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 80013ac:	4e46      	ldr	r6, [pc, #280]	; (80014c8 <SubghzApp_Init+0x164>)
 80013ae:	9400      	str	r4, [sp, #0]
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <SubghzApp_Init+0x168>)
 80013b2:	4622      	mov	r2, r4
 80013b4:	21c8      	movs	r1, #200	; 0xc8
 80013b6:	4630      	mov	r0, r6
 80013b8:	f006 f9d8 	bl	800776c <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&timerLed);
 80013bc:	4630      	mov	r0, r6
 80013be:	f006 fa8d 	bl	80078dc <UTIL_TIMER_Start>
  RadioEvents.TxDone = OnTxDone;
 80013c2:	4843      	ldr	r0, [pc, #268]	; (80014d0 <SubghzApp_Init+0x16c>)
 80013c4:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <SubghzApp_Init+0x170>)
 80013c6:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <SubghzApp_Init+0x174>)
 80013ca:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <SubghzApp_Init+0x178>)
 80013ce:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <SubghzApp_Init+0x17c>)
 80013d2:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <SubghzApp_Init+0x180>)
 80013d6:	6103      	str	r3, [r0, #16]
  Radio.Init(&RadioEvents);
 80013d8:	4e43      	ldr	r6, [pc, #268]	; (80014e8 <SubghzApp_Init+0x184>)
 80013da:	6833      	ldr	r3, [r6, #0]
 80013dc:	4798      	blx	r3
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 80013de:	6973      	ldr	r3, [r6, #20]
 80013e0:	4798      	blx	r3
 80013e2:	0d80      	lsrs	r0, r0, #22
 80013e4:	4f41      	ldr	r7, [pc, #260]	; (80014ec <SubghzApp_Init+0x188>)
 80013e6:	6038      	str	r0, [r7, #0]
  Radio.SetChannel(RF_FREQUENCY);
 80013e8:	68f3      	ldr	r3, [r6, #12]
 80013ea:	4841      	ldr	r0, [pc, #260]	; (80014f0 <SubghzApp_Init+0x18c>)
 80013ec:	4798      	blx	r3
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <SubghzApp_Init+0x190>)
 80013f0:	4622      	mov	r2, r4
 80013f2:	4621      	mov	r1, r4
 80013f4:	2002      	movs	r0, #2
 80013f6:	f005 ff67 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <SubghzApp_Init+0x194>)
 80013fc:	4622      	mov	r2, r4
 80013fe:	4621      	mov	r1, r4
 8001400:	2002      	movs	r0, #2
 8001402:	f005 ff61 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8001406:	237d      	movs	r3, #125	; 0x7d
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <SubghzApp_Init+0x198>)
 800140c:	4622      	mov	r2, r4
 800140e:	4621      	mov	r1, r4
 8001410:	2002      	movs	r0, #2
 8001412:	f005 ff59 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8001416:	f04f 0807 	mov.w	r8, #7
 800141a:	f8cd 8000 	str.w	r8, [sp]
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <SubghzApp_Init+0x19c>)
 8001420:	4622      	mov	r2, r4
 8001422:	4621      	mov	r1, r4
 8001424:	2002      	movs	r0, #2
 8001426:	f005 ff4f 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800142a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800142e:	9308      	str	r3, [sp, #32]
 8001430:	9407      	str	r4, [sp, #28]
 8001432:	9406      	str	r4, [sp, #24]
 8001434:	9405      	str	r4, [sp, #20]
 8001436:	9504      	str	r5, [sp, #16]
 8001438:	9403      	str	r4, [sp, #12]
 800143a:	f04f 0908 	mov.w	r9, #8
 800143e:	f8cd 9008 	str.w	r9, [sp, #8]
 8001442:	9501      	str	r5, [sp, #4]
 8001444:	f8cd 8000 	str.w	r8, [sp]
 8001448:	4623      	mov	r3, r4
 800144a:	4622      	mov	r2, r4
 800144c:	210e      	movs	r1, #14
 800144e:	4628      	mov	r0, r5
 8001450:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 8001454:	47e0      	blx	ip
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8001456:	9509      	str	r5, [sp, #36]	; 0x24
 8001458:	9408      	str	r4, [sp, #32]
 800145a:	9407      	str	r4, [sp, #28]
 800145c:	9406      	str	r4, [sp, #24]
 800145e:	9505      	str	r5, [sp, #20]
 8001460:	9404      	str	r4, [sp, #16]
 8001462:	9403      	str	r4, [sp, #12]
 8001464:	2305      	movs	r3, #5
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	f8cd 9004 	str.w	r9, [sp, #4]
 800146c:	9400      	str	r4, [sp, #0]
 800146e:	462b      	mov	r3, r5
 8001470:	4642      	mov	r2, r8
 8001472:	4621      	mov	r1, r4
 8001474:	4628      	mov	r0, r5
 8001476:	f8d6 c018 	ldr.w	ip, [r6, #24]
 800147a:	47e0      	blx	ip
  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800147c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800147e:	21ff      	movs	r1, #255	; 0xff
 8001480:	4628      	mov	r0, r5
 8001482:	4798      	blx	r3
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	4621      	mov	r1, r4
 8001488:	481e      	ldr	r0, [pc, #120]	; (8001504 <SubghzApp_Init+0x1a0>)
 800148a:	f006 fc2f 	bl	8007cec <memset>
  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <SubghzApp_Init+0x1a4>)
 8001494:	462a      	mov	r2, r5
 8001496:	4621      	mov	r1, r4
 8001498:	4628      	mov	r0, r5
 800149a:	f005 ff15 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800149e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80014a0:	6838      	ldr	r0, [r7, #0]
 80014a2:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
 80014a6:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 80014a8:	4a18      	ldr	r2, [pc, #96]	; (800150c <SubghzApp_Init+0x1a8>)
 80014aa:	4621      	mov	r1, r4
 80014ac:	4628      	mov	r0, r5
 80014ae:	f006 f8ff 	bl	80076b0 <UTIL_SEQ_RegTask>
}
 80014b2:	b00b      	add	sp, #44	; 0x2c
 80014b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014b8:	08007f5c 	.word	0x08007f5c
 80014bc:	08007f6c 	.word	0x08007f6c
 80014c0:	08007f90 	.word	0x08007f90
 80014c4:	08007fb4 	.word	0x08007fb4
 80014c8:	20000408 	.word	0x20000408
 80014cc:	08000fa5 	.word	0x08000fa5
 80014d0:	200003e0 	.word	0x200003e0
 80014d4:	0800133d 	.word	0x0800133d
 80014d8:	08001261 	.word	0x08001261
 80014dc:	08001239 	.word	0x08001239
 80014e0:	08001215 	.word	0x08001215
 80014e4:	080011ed 	.word	0x080011ed
 80014e8:	08008154 	.word	0x08008154
 80014ec:	20000404 	.word	0x20000404
 80014f0:	33bca100 	.word	0x33bca100
 80014f4:	08007fc4 	.word	0x08007fc4
 80014f8:	08007fd8 	.word	0x08007fd8
 80014fc:	08007fec 	.word	0x08007fec
 8001500:	08008000 	.word	0x08008000
 8001504:	200002e0 	.word	0x200002e0
 8001508:	08008010 	.word	0x08008010
 800150c:	08000fcd 	.word	0x08000fcd

08001510 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001510:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001512:	f000 f815 	bl	8001540 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001516:	bd08      	pop	{r3, pc}

08001518 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001518:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800151a:	f000 f853 	bl	80015c4 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800151e:	bd08      	pop	{r3, pc}

08001520 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001520:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8001522:	f000 f89d 	bl	8001660 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001526:	bd08      	pop	{r3, pc}

08001528 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001528:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800152a:	f000 f89b 	bl	8001664 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800152e:	bd08      	pop	{r3, pc}

08001530 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001530:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8001532:	f000 f899 	bl	8001668 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001536:	bd08      	pop	{r3, pc}

08001538 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8001538:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800153a:	f000 f897 	bl	800166c <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800153e:	bd08      	pop	{r3, pc}

08001540 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001544:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001546:	2400      	movs	r4, #0
 8001548:	9401      	str	r4, [sp, #4]
 800154a:	9402      	str	r4, [sp, #8]
 800154c:	9403      	str	r4, [sp, #12]
 800154e:	9404      	str	r4, [sp, #16]
 8001550:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001558:	f042 0204 	orr.w	r2, r2, #4
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001566:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001568:	2710      	movs	r7, #16
 800156a:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001574:	4d12      	ldr	r5, [pc, #72]	; (80015c0 <BSP_RADIO_Init+0x80>)
 8001576:	a901      	add	r1, sp, #4
 8001578:	4628      	mov	r0, r5
 800157a:	f000 fba9 	bl	8001cd0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800157e:	f04f 0820 	mov.w	r8, #32
 8001582:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001586:	a901      	add	r1, sp, #4
 8001588:	4628      	mov	r0, r5
 800158a:	f000 fba1 	bl	8001cd0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800158e:	2608      	movs	r6, #8
 8001590:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001592:	a901      	add	r1, sp, #4
 8001594:	4628      	mov	r0, r5
 8001596:	f000 fb9b 	bl	8001cd0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800159a:	4622      	mov	r2, r4
 800159c:	4641      	mov	r1, r8
 800159e:	4628      	mov	r0, r5
 80015a0:	f000 fce6 	bl	8001f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80015a4:	4622      	mov	r2, r4
 80015a6:	4639      	mov	r1, r7
 80015a8:	4628      	mov	r0, r5
 80015aa:	f000 fce1 	bl	8001f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80015ae:	4622      	mov	r2, r4
 80015b0:	4631      	mov	r1, r6
 80015b2:	4628      	mov	r0, r5
 80015b4:	f000 fcdc 	bl	8001f70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80015b8:	4620      	mov	r0, r4
 80015ba:	b006      	add	sp, #24
 80015bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015c0:	48000800 	.word	0x48000800

080015c4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80015c4:	b510      	push	{r4, lr}
  switch (Config)
 80015c6:	2803      	cmp	r0, #3
 80015c8:	d813      	bhi.n	80015f2 <BSP_RADIO_ConfigRFSwitch+0x2e>
 80015ca:	e8df f000 	tbb	[pc, r0]
 80015ce:	1402      	.short	0x1402
 80015d0:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80015d2:	4c22      	ldr	r4, [pc, #136]	; (800165c <BSP_RADIO_ConfigRFSwitch+0x98>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	2108      	movs	r1, #8
 80015d8:	4620      	mov	r0, r4
 80015da:	f000 fcc9 	bl	8001f70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2110      	movs	r1, #16
 80015e2:	4620      	mov	r0, r4
 80015e4:	f000 fcc4 	bl	8001f70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2120      	movs	r1, #32
 80015ec:	4620      	mov	r0, r4
 80015ee:	f000 fcbf 	bl	8001f70 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 80015f2:	2000      	movs	r0, #0
 80015f4:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80015f6:	4c19      	ldr	r4, [pc, #100]	; (800165c <BSP_RADIO_ConfigRFSwitch+0x98>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	2108      	movs	r1, #8
 80015fc:	4620      	mov	r0, r4
 80015fe:	f000 fcb7 	bl	8001f70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001602:	2201      	movs	r2, #1
 8001604:	2110      	movs	r1, #16
 8001606:	4620      	mov	r0, r4
 8001608:	f000 fcb2 	bl	8001f70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800160c:	2200      	movs	r2, #0
 800160e:	2120      	movs	r1, #32
 8001610:	4620      	mov	r0, r4
 8001612:	f000 fcad 	bl	8001f70 <HAL_GPIO_WritePin>
      break;
 8001616:	e7ec      	b.n	80015f2 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001618:	4c10      	ldr	r4, [pc, #64]	; (800165c <BSP_RADIO_ConfigRFSwitch+0x98>)
 800161a:	2201      	movs	r2, #1
 800161c:	2108      	movs	r1, #8
 800161e:	4620      	mov	r0, r4
 8001620:	f000 fca6 	bl	8001f70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4620      	mov	r0, r4
 800162a:	f000 fca1 	bl	8001f70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800162e:	2201      	movs	r2, #1
 8001630:	2120      	movs	r1, #32
 8001632:	4620      	mov	r0, r4
 8001634:	f000 fc9c 	bl	8001f70 <HAL_GPIO_WritePin>
      break;
 8001638:	e7db      	b.n	80015f2 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800163a:	4c08      	ldr	r4, [pc, #32]	; (800165c <BSP_RADIO_ConfigRFSwitch+0x98>)
 800163c:	2201      	movs	r2, #1
 800163e:	2108      	movs	r1, #8
 8001640:	4620      	mov	r0, r4
 8001642:	f000 fc95 	bl	8001f70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001646:	2200      	movs	r2, #0
 8001648:	2110      	movs	r1, #16
 800164a:	4620      	mov	r0, r4
 800164c:	f000 fc90 	bl	8001f70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001650:	2201      	movs	r2, #1
 8001652:	2120      	movs	r1, #32
 8001654:	4620      	mov	r0, r4
 8001656:	f000 fc8b 	bl	8001f70 <HAL_GPIO_WritePin>
      break;
 800165a:	e7ca      	b.n	80015f2 <BSP_RADIO_ConfigRFSwitch+0x2e>
 800165c:	48000800 	.word	0x48000800

08001660 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8001660:	2000      	movs	r0, #0
 8001662:	4770      	bx	lr

08001664 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8001668:	2001      	movs	r0, #1
 800166a:	4770      	bx	lr

0800166c <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800166c:	b908      	cbnz	r0, 8001672 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800166e:	200f      	movs	r0, #15
 8001670:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001672:	2016      	movs	r0, #22
  }

  return ret;
}
 8001674:	4770      	bx	lr

08001676 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001676:	4770      	bx	lr

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167a:	2003      	movs	r0, #3
 800167c:	f000 f838 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001680:	f000 fe0e 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_Init+0x28>)
 8001686:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001688:	200f      	movs	r0, #15
 800168a:	f7ff f931 	bl	80008f0 <HAL_InitTick>
 800168e:	b110      	cbz	r0, 8001696 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001690:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd10      	pop	{r4, pc}
 8001696:	4604      	mov	r4, r0
    HAL_MspInit();
 8001698:	f7ff f872 	bl	8000780 <HAL_MspInit>
 800169c:	e7f9      	b.n	8001692 <HAL_Init+0x1a>
 800169e:	bf00      	nop
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80016a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80016a8:	6913      	ldr	r3, [r2, #16]
 80016aa:	f023 0302 	bic.w	r3, r3, #2
 80016ae:	6113      	str	r3, [r2, #16]
}
 80016b0:	4770      	bx	lr

080016b2 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80016b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80016b6:	6913      	ldr	r3, [r2, #16]
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6113      	str	r3, [r2, #16]
}
 80016be:	4770      	bx	lr

080016c0 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80016c0:	4a02      	ldr	r2, [pc, #8]	; (80016cc <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80016c2:	6853      	ldr	r3, [r2, #4]
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 80016ca:	4770      	bx	lr
 80016cc:	e0042000 	.word	0xe0042000

080016d0 <HAL_DBGMCU_DisableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80016d0:	4a02      	ldr	r2, [pc, #8]	; (80016dc <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80016d2:	6853      	ldr	r3, [r2, #4]
 80016d4:	f023 0302 	bic.w	r3, r3, #2
 80016d8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 80016da:	4770      	bx	lr
 80016dc:	e0042000 	.word	0xe0042000

080016e0 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80016e0:	4a02      	ldr	r2, [pc, #8]	; (80016ec <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80016e2:	6853      	ldr	r3, [r2, #4]
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 80016ea:	4770      	bx	lr
 80016ec:	e0042000 	.word	0xe0042000

080016f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016f8:	041b      	lsls	r3, r3, #16
 80016fa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	0200      	lsls	r0, r0, #8
 80016fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001702:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800170c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_NVIC_SetPriority+0x68>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171e:	f1c3 0c07 	rsb	ip, r3, #7
 8001722:	f1bc 0f04 	cmp.w	ip, #4
 8001726:	bf28      	it	cs
 8001728:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172c:	f103 0e04 	add.w	lr, r3, #4
 8001730:	f1be 0f06 	cmp.w	lr, #6
 8001734:	d918      	bls.n	8001768 <HAL_NVIC_SetPriority+0x54>
 8001736:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 3eff 	mov.w	lr, #4294967295
 800173c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001740:	ea21 010c 	bic.w	r1, r1, ip
 8001744:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001746:	fa0e fe03 	lsl.w	lr, lr, r3
 800174a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001750:	2800      	cmp	r0, #0
 8001752:	db0b      	blt.n	800176c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800175c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001760:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001764:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001768:	2300      	movs	r3, #0
 800176a:	e7e5      	b.n	8001738 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	f000 000f 	and.w	r0, r0, #15
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_NVIC_SetPriority+0x6c>)
 8001776:	541a      	strb	r2, [r3, r0]
 8001778:	e7f4      	b.n	8001764 <HAL_NVIC_SetPriority+0x50>
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00
 8001780:	e000ed14 	.word	0xe000ed14

08001784 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001784:	2800      	cmp	r0, #0
 8001786:	db07      	blt.n	8001798 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001788:	f000 021f 	and.w	r2, r0, #31
 800178c:	0940      	lsrs	r0, r0, #5
 800178e:	2301      	movs	r3, #1
 8001790:	4093      	lsls	r3, r2
 8001792:	4a02      	ldr	r2, [pc, #8]	; (800179c <HAL_NVIC_EnableIRQ+0x18>)
 8001794:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100

080017a0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017a0:	2800      	cmp	r0, #0
 80017a2:	db0c      	blt.n	80017be <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a4:	f000 021f 	and.w	r2, r0, #31
 80017a8:	0940      	lsrs	r0, r0, #5
 80017aa:	2301      	movs	r3, #1
 80017ac:	4093      	lsls	r3, r2
 80017ae:	3020      	adds	r0, #32
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_NVIC_DisableIRQ+0x20>)
 80017b2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017ba:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c4:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017c6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80017c8:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80017cc:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80017d0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80017d2:	b124      	cbz	r4, 80017de <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017d4:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80017d6:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80017da:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017de:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80017e0:	f004 0c1c 	and.w	ip, r4, #28
 80017e4:	2401      	movs	r4, #1
 80017e6:	fa04 f40c 	lsl.w	r4, r4, ip
 80017ea:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80017ee:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017f2:	6804      	ldr	r4, [r0, #0]
 80017f4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017f6:	6883      	ldr	r3, [r0, #8]
 80017f8:	2b10      	cmp	r3, #16
 80017fa:	d005      	beq.n	8001808 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80017fc:	6803      	ldr	r3, [r0, #0]
 80017fe:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001800:	6803      	ldr	r3, [r0, #0]
 8001802:	60da      	str	r2, [r3, #12]
  }
}
 8001804:	bc10      	pop	{r4}
 8001806:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001808:	6803      	ldr	r3, [r0, #0]
 800180a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800180c:	6803      	ldr	r3, [r0, #0]
 800180e:	60d9      	str	r1, [r3, #12]
 8001810:	e7f8      	b.n	8001804 <DMA_SetConfig+0x40>
	...

08001814 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001814:	6803      	ldr	r3, [r0, #0]
 8001816:	4a14      	ldr	r2, [pc, #80]	; (8001868 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d816      	bhi.n	800184a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800181c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800181e:	f022 0203 	bic.w	r2, r2, #3
 8001822:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001826:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800182a:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800182c:	b2db      	uxtb	r3, r3
 800182e:	3b08      	subs	r3, #8
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800183a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	2201      	movs	r2, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001848:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800184a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800184c:	f022 0103 	bic.w	r1, r2, #3
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8001852:	440a      	add	r2, r1
 8001854:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3b08      	subs	r3, #8
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	3307      	adds	r3, #7
 8001864:	e7e8      	b.n	8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8001866:	bf00      	nop
 8001868:	40020407 	.word	0x40020407
 800186c:	cccccccd 	.word	0xcccccccd
 8001870:	40020880 	.word	0x40020880
 8001874:	4002081c 	.word	0x4002081c

08001878 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001878:	6843      	ldr	r3, [r0, #4]
 800187a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001880:	441a      	add	r2, r3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8001888:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800188a:	3b01      	subs	r3, #1
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2201      	movs	r2, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	1000823f 	.word	0x1000823f
 80018a0:	40020940 	.word	0x40020940

080018a4 <HAL_DMA_Init>:
  if (hdma == NULL)
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d060      	beq.n	800196a <HAL_DMA_Init+0xc6>
{
 80018a8:	b510      	push	{r4, lr}
 80018aa:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018ac:	6802      	ldr	r2, [r0, #0]
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_DMA_Init+0xcc>)
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d842      	bhi.n	800193a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_DMA_Init+0xd0>)
 80018b6:	4413      	add	r3, r2
 80018b8:	492f      	ldr	r1, [pc, #188]	; (8001978 <HAL_DMA_Init+0xd4>)
 80018ba:	fba1 1303 	umull	r1, r3, r1, r3
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_DMA_Init+0xd8>)
 80018c6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	2302      	movs	r3, #2
 80018ca:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d8:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80018da:	6821      	ldr	r1, [r4, #0]
 80018dc:	680a      	ldr	r2, [r1, #0]
 80018de:	68a3      	ldr	r3, [r4, #8]
 80018e0:	68e0      	ldr	r0, [r4, #12]
 80018e2:	4303      	orrs	r3, r0
 80018e4:	6920      	ldr	r0, [r4, #16]
 80018e6:	4303      	orrs	r3, r0
 80018e8:	6960      	ldr	r0, [r4, #20]
 80018ea:	4303      	orrs	r3, r0
 80018ec:	69a0      	ldr	r0, [r4, #24]
 80018ee:	4303      	orrs	r3, r0
 80018f0:	69e0      	ldr	r0, [r4, #28]
 80018f2:	4303      	orrs	r3, r0
 80018f4:	6a20      	ldr	r0, [r4, #32]
 80018f6:	4303      	orrs	r3, r0
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff ff89 	bl	8001814 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001902:	68a3      	ldr	r3, [r4, #8]
 8001904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001908:	d022      	beq.n	8001950 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800190a:	6863      	ldr	r3, [r4, #4]
 800190c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800190e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001912:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001914:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001916:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001918:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800191a:	6863      	ldr	r3, [r4, #4]
 800191c:	3b01      	subs	r3, #1
 800191e:	2b03      	cmp	r3, #3
 8001920:	d919      	bls.n	8001956 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8001922:	2300      	movs	r3, #0
 8001924:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001926:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001928:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192a:	2000      	movs	r0, #0
 800192c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800192e:	2301      	movs	r3, #1
 8001930:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001934:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001938:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_DMA_Init+0xdc>)
 800193c:	4413      	add	r3, r2
 800193e:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_DMA_Init+0xd4>)
 8001940:	fba1 1303 	umull	r1, r3, r1, r3
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_DMA_Init+0xe0>)
 800194c:	6403      	str	r3, [r0, #64]	; 0x40
 800194e:	e7bb      	b.n	80018c8 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001950:	2300      	movs	r3, #0
 8001952:	6063      	str	r3, [r4, #4]
 8001954:	e7d9      	b.n	800190a <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001956:	4620      	mov	r0, r4
 8001958:	f7ff ff8e 	bl	8001878 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800195c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001964:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	e7df      	b.n	800192a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800196a:	2001      	movs	r0, #1
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40020407 	.word	0x40020407
 8001974:	bffdfff8 	.word	0xbffdfff8
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	40020000 	.word	0x40020000
 8001980:	bffdfbf8 	.word	0xbffdfbf8
 8001984:	40020400 	.word	0x40020400

08001988 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8001988:	2800      	cmp	r0, #0
 800198a:	d04b      	beq.n	8001a24 <HAL_DMA_DeInit+0x9c>
{
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8001990:	6802      	ldr	r2, [r0, #0]
 8001992:	6813      	ldr	r3, [r2, #0]
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800199a:	6802      	ldr	r2, [r0, #0]
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_DMA_DeInit+0xa0>)
 800199e:	429a      	cmp	r2, r3
 80019a0:	d82c      	bhi.n	80019fc <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_DMA_DeInit+0xa4>)
 80019a4:	4413      	add	r3, r2
 80019a6:	4922      	ldr	r1, [pc, #136]	; (8001a30 <HAL_DMA_DeInit+0xa8>)
 80019a8:	fba1 1303 	umull	r1, r3, r1, r3
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_DMA_DeInit+0xac>)
 80019b4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80019b6:	2500      	movs	r5, #0
 80019b8:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019bc:	f003 021c 	and.w	r2, r3, #28
 80019c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80019c2:	2301      	movs	r3, #1
 80019c4:	4093      	lsls	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff ff23 	bl	8001814 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80019ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80019d0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80019d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019d6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d918      	bls.n	8001a12 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80019e0:	2000      	movs	r0, #0
 80019e2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80019e4:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80019e6:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80019e8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80019ea:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80019ec:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80019ee:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80019f2:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80019f6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80019fa:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_DMA_DeInit+0xb0>)
 80019fe:	4413      	add	r3, r2
 8001a00:	490b      	ldr	r1, [pc, #44]	; (8001a30 <HAL_DMA_DeInit+0xa8>)
 8001a02:	fba1 1303 	umull	r1, r3, r1, r3
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_DMA_DeInit+0xb4>)
 8001a0e:	6403      	str	r3, [r0, #64]	; 0x40
 8001a10:	e7d1      	b.n	80019b6 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7ff ff30 	bl	8001878 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a1a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	e7dd      	b.n	80019e0 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
}
 8001a26:	4770      	bx	lr
 8001a28:	40020407 	.word	0x40020407
 8001a2c:	bffdfff8 	.word	0xbffdfff8
 8001a30:	cccccccd 	.word	0xcccccccd
 8001a34:	40020000 	.word	0x40020000
 8001a38:	bffdfbf8 	.word	0xbffdfbf8
 8001a3c:	40020400 	.word	0x40020400

08001a40 <HAL_DMA_Start_IT>:
{
 8001a40:	b538      	push	{r3, r4, r5, lr}
 8001a42:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001a44:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8001a48:	2801      	cmp	r0, #1
 8001a4a:	d043      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x94>
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8001a52:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001a56:	b2c0      	uxtb	r0, r0
 8001a58:	2801      	cmp	r0, #1
 8001a5a:	d006      	beq.n	8001a6a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001a60:	2300      	movs	r3, #0
 8001a62:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8001a66:	2001      	movs	r0, #1
}
 8001a68:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a70:	2000      	movs	r0, #0
 8001a72:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001a74:	6825      	ldr	r5, [r4, #0]
 8001a76:	6828      	ldr	r0, [r5, #0]
 8001a78:	f020 0001 	bic.w	r0, r0, #1
 8001a7c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff fea0 	bl	80017c4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a86:	b1d3      	cbz	r3, 8001abe <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	f043 030e 	orr.w	r3, r3, #14
 8001a90:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001a9a:	d003      	beq.n	8001aa4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8001aa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001aa6:	b11b      	cbz	r3, 8001ab0 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ab0:	6822      	ldr	r2, [r4, #0]
 8001ab2:	6813      	ldr	r3, [r2, #0]
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2000      	movs	r0, #0
 8001abc:	e7d4      	b.n	8001a68 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001abe:	6822      	ldr	r2, [r4, #0]
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ac8:	6822      	ldr	r2, [r4, #0]
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	f043 030a 	orr.w	r3, r3, #10
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e7de      	b.n	8001a92 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	e7c7      	b.n	8001a68 <HAL_DMA_Start_IT+0x28>

08001ad8 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d034      	beq.n	8001b48 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ade:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	2a02      	cmp	r2, #2
 8001ae6:	d006      	beq.n	8001af6 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae8:	2204      	movs	r2, #4
 8001aea:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001af2:	2001      	movs	r0, #1
 8001af4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af6:	6801      	ldr	r1, [r0, #0]
 8001af8:	680a      	ldr	r2, [r1, #0]
 8001afa:	f022 020e 	bic.w	r2, r2, #14
 8001afe:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b00:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b02:	680a      	ldr	r2, [r1, #0]
 8001b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b08:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b0a:	6801      	ldr	r1, [r0, #0]
 8001b0c:	680a      	ldr	r2, [r1, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001b16:	f002 011c 	and.w	r1, r2, #28
 8001b1a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	408a      	lsls	r2, r1
 8001b20:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001b26:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8001b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b2a:	b132      	cbz	r2, 8001b3a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b2c:	6811      	ldr	r1, [r2, #0]
 8001b2e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001b32:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b36:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001b38:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8001b46:	4770      	bx	lr
    return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_DMA_Abort_IT>:
{
 8001b4c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b4e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d003      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001b5c:	2001      	movs	r0, #1
}
 8001b5e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b60:	6802      	ldr	r2, [r0, #0]
 8001b62:	6813      	ldr	r3, [r2, #0]
 8001b64:	f023 030e 	bic.w	r3, r3, #14
 8001b68:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b6a:	6802      	ldr	r2, [r0, #0]
 8001b6c:	6813      	ldr	r3, [r2, #0]
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b74:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001b76:	6813      	ldr	r3, [r2, #0]
 8001b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b7c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b80:	f003 021c 	and.w	r2, r3, #28
 8001b84:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001b86:	2301      	movs	r3, #1
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001b8e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001b90:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8001b92:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001b94:	b133      	cbz	r3, 8001ba4 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b9c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b9e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001ba0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001ba2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001baa:	2300      	movs	r3, #0
 8001bac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8001bb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001bb2:	b113      	cbz	r3, 8001bba <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8001bb4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e7d1      	b.n	8001b5e <HAL_DMA_Abort_IT+0x12>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e7cf      	b.n	8001b5e <HAL_DMA_Abort_IT+0x12>
	...

08001bc0 <HAL_DMA_IRQHandler>:
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bc4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001bc6:	6804      	ldr	r4, [r0, #0]
 8001bc8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001bcc:	f003 031c 	and.w	r3, r3, #28
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	420a      	tst	r2, r1
 8001bd6:	d015      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x44>
 8001bd8:	f015 0f04 	tst.w	r5, #4
 8001bdc:	d012      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	f013 0f20 	tst.w	r3, #32
 8001be4:	d103      	bne.n	8001bee <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001bf0:	f003 021c 	and.w	r2, r3, #28
 8001bf4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	4093      	lsls	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8001bfc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001bfe:	b103      	cbz	r3, 8001c02 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8001c00:	4798      	blx	r3
}
 8001c02:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c04:	2202      	movs	r2, #2
 8001c06:	409a      	lsls	r2, r3
 8001c08:	420a      	tst	r2, r1
 8001c0a:	d028      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x9e>
 8001c0c:	f015 0f02 	tst.w	r5, #2
 8001c10:	d025      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	f013 0f20 	tst.w	r3, #32
 8001c18:	d106      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	f023 030a 	bic.w	r3, r3, #10
 8001c20:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001c28:	6802      	ldr	r2, [r0, #0]
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_DMA_IRQHandler+0xdc>)
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d90e      	bls.n	8001c4e <HAL_DMA_IRQHandler+0x8e>
 8001c30:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c32:	f003 021c 	and.w	r2, r3, #28
 8001c36:	2302      	movs	r3, #2
 8001c38:	4093      	lsls	r3, r2
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_DMA_IRQHandler+0xe0>)
 8001c3c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8001c44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0db      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8001c4a:	4798      	blx	r3
 8001c4c:	e7d9      	b.n	8001c02 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001c4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c50:	f003 021c 	and.w	r2, r3, #28
 8001c54:	2302      	movs	r3, #2
 8001c56:	4093      	lsls	r3, r2
 8001c58:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <HAL_DMA_IRQHandler+0xe4>)
 8001c5a:	6053      	str	r3, [r2, #4]
 8001c5c:	e7ef      	b.n	8001c3e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c5e:	2208      	movs	r2, #8
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	420b      	tst	r3, r1
 8001c66:	d0cc      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x42>
 8001c68:	f015 0f08 	tst.w	r5, #8
 8001c6c:	d0c9      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	f023 030e 	bic.w	r3, r3, #14
 8001c74:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c78:	f003 031c 	and.w	r3, r3, #28
 8001c7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001c7e:	2201      	movs	r2, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c86:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001c88:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001c92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0b4      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8001c98:	4798      	blx	r3
  return;
 8001c9a:	e7b2      	b.n	8001c02 <HAL_DMA_IRQHandler+0x42>
 8001c9c:	40020080 	.word	0x40020080
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8001ca8:	b178      	cbz	r0, 8001cca <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8001caa:	6803      	ldr	r3, [r0, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001cae:	f011 0f10 	tst.w	r1, #16
 8001cb2:	d004      	beq.n	8001cbe <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001cb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001cb8:	d004      	beq.n	8001cc4 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001cba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001cbe:	601a      	str	r2, [r3, #0]
  return status;
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001cc4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001cc8:	e7f9      	b.n	8001cbe <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8001cca:	2001      	movs	r0, #1
}
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8001cd2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd4:	e069      	b.n	8001daa <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cd8:	005e      	lsls	r6, r3, #1
 8001cda:	2403      	movs	r4, #3
 8001cdc:	40b4      	lsls	r4, r6
 8001cde:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce2:	68cc      	ldr	r4, [r1, #12]
 8001ce4:	40b4      	lsls	r4, r6
 8001ce6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001ce8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cec:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf0:	684c      	ldr	r4, [r1, #4]
 8001cf2:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001cf6:	409c      	lsls	r4, r3
 8001cf8:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001cfa:	6044      	str	r4, [r0, #4]
 8001cfc:	e066      	b.n	8001dcc <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfe:	08dd      	lsrs	r5, r3, #3
 8001d00:	3508      	adds	r5, #8
 8001d02:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d06:	f003 0c07 	and.w	ip, r3, #7
 8001d0a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001d0e:	f04f 0e0f 	mov.w	lr, #15
 8001d12:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001d16:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d1a:	690c      	ldr	r4, [r1, #16]
 8001d1c:	fa04 f40c 	lsl.w	r4, r4, ip
 8001d20:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001d24:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001d28:	e067      	b.n	8001dfa <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d2a:	2402      	movs	r4, #2
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x60>
 8001d2e:	2400      	movs	r4, #0
 8001d30:	fa04 f40e 	lsl.w	r4, r4, lr
 8001d34:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d36:	f10c 0c02 	add.w	ip, ip, #2
 8001d3a:	4d4b      	ldr	r5, [pc, #300]	; (8001e68 <HAL_GPIO_Init+0x198>)
 8001d3c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d40:	4c4a      	ldr	r4, [pc, #296]	; (8001e6c <HAL_GPIO_Init+0x19c>)
 8001d42:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001d44:	43d4      	mvns	r4, r2
 8001d46:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001d4e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8001d52:	d001      	beq.n	8001d58 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8001d54:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001d58:	4d44      	ldr	r5, [pc, #272]	; (8001e6c <HAL_GPIO_Init+0x19c>)
 8001d5a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001d5c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001d5e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d62:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001d66:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8001d6a:	d001      	beq.n	8001d70 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8001d6c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001d70:	4d3e      	ldr	r5, [pc, #248]	; (8001e6c <HAL_GPIO_Init+0x19c>)
 8001d72:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001d74:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001d78:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d7c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001d80:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8001d84:	d001      	beq.n	8001d8a <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8001d86:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001d8a:	4d38      	ldr	r5, [pc, #224]	; (8001e6c <HAL_GPIO_Init+0x19c>)
 8001d8c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001d90:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001d94:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d96:	684e      	ldr	r6, [r1, #4]
 8001d98:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001d9c:	d001      	beq.n	8001da2 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8001d9e:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001da2:	4a32      	ldr	r2, [pc, #200]	; (8001e6c <HAL_GPIO_Init+0x19c>)
 8001da4:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001da8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	680a      	ldr	r2, [r1, #0]
 8001dac:	fa32 f403 	lsrs.w	r4, r2, r3
 8001db0:	d058      	beq.n	8001e64 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db2:	f04f 0c01 	mov.w	ip, #1
 8001db6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001dba:	ea1c 0202 	ands.w	r2, ip, r2
 8001dbe:	d0f3      	beq.n	8001da8 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc0:	684c      	ldr	r4, [r1, #4]
 8001dc2:	f004 0403 	and.w	r4, r4, #3
 8001dc6:	3c01      	subs	r4, #1
 8001dc8:	2c01      	cmp	r4, #1
 8001dca:	d984      	bls.n	8001cd6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dcc:	684c      	ldr	r4, [r1, #4]
 8001dce:	f004 0403 	and.w	r4, r4, #3
 8001dd2:	2c03      	cmp	r4, #3
 8001dd4:	d00c      	beq.n	8001df0 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8001dd6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd8:	005d      	lsls	r5, r3, #1
 8001dda:	f04f 0c03 	mov.w	ip, #3
 8001dde:	fa0c fc05 	lsl.w	ip, ip, r5
 8001de2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	688c      	ldr	r4, [r1, #8]
 8001de8:	40ac      	lsls	r4, r5
 8001dea:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8001dee:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df0:	684c      	ldr	r4, [r1, #4]
 8001df2:	f004 0403 	and.w	r4, r4, #3
 8001df6:	2c02      	cmp	r4, #2
 8001df8:	d081      	beq.n	8001cfe <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8001dfa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dfc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e00:	f04f 0c03 	mov.w	ip, #3
 8001e04:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001e08:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0c:	684c      	ldr	r4, [r1, #4]
 8001e0e:	f004 0403 	and.w	r4, r4, #3
 8001e12:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e16:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001e1a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e1c:	684c      	ldr	r4, [r1, #4]
 8001e1e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001e22:	d0c1      	beq.n	8001da8 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e24:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001e28:	f10c 0502 	add.w	r5, ip, #2
 8001e2c:	4c0e      	ldr	r4, [pc, #56]	; (8001e68 <HAL_GPIO_Init+0x198>)
 8001e2e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001e32:	f003 0e03 	and.w	lr, r3, #3
 8001e36:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001e3a:	2407      	movs	r4, #7
 8001e3c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e40:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e44:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001e48:	f43f af71 	beq.w	8001d2e <HAL_GPIO_Init+0x5e>
 8001e4c:	4c08      	ldr	r4, [pc, #32]	; (8001e70 <HAL_GPIO_Init+0x1a0>)
 8001e4e:	42a0      	cmp	r0, r4
 8001e50:	d006      	beq.n	8001e60 <HAL_GPIO_Init+0x190>
 8001e52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e56:	42a0      	cmp	r0, r4
 8001e58:	f43f af67 	beq.w	8001d2a <HAL_GPIO_Init+0x5a>
 8001e5c:	2407      	movs	r4, #7
 8001e5e:	e767      	b.n	8001d30 <HAL_GPIO_Init+0x60>
 8001e60:	2401      	movs	r4, #1
 8001e62:	e765      	b.n	8001d30 <HAL_GPIO_Init+0x60>
  }
}
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	58000800 	.word	0x58000800
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001e74:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001e76:	fa31 f203 	lsrs.w	r2, r1, r3
 8001e7a:	d071      	beq.n	8001f60 <HAL_GPIO_DeInit+0xec>
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	e02e      	b.n	8001ede <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001e80:	2502      	movs	r5, #2
 8001e82:	e000      	b.n	8001e86 <HAL_GPIO_DeInit+0x12>
 8001e84:	2500      	movs	r5, #0
 8001e86:	fa05 f50c 	lsl.w	r5, r5, ip
 8001e8a:	42a5      	cmp	r5, r4
 8001e8c:	d049      	beq.n	8001f22 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001e8e:	6804      	ldr	r4, [r0, #0]
 8001e90:	005d      	lsls	r5, r3, #1
 8001e92:	f04f 0c03 	mov.w	ip, #3
 8001e96:	fa0c fc05 	lsl.w	ip, ip, r5
 8001e9a:	ea44 040c 	orr.w	r4, r4, ip
 8001e9e:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001ea0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001ea4:	f10e 0e08 	add.w	lr, lr, #8
 8001ea8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8001eac:	f003 0607 	and.w	r6, r3, #7
 8001eb0:	00b6      	lsls	r6, r6, #2
 8001eb2:	250f      	movs	r5, #15
 8001eb4:	40b5      	lsls	r5, r6
 8001eb6:	ea24 0405 	bic.w	r4, r4, r5
 8001eba:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ebe:	6884      	ldr	r4, [r0, #8]
 8001ec0:	ea24 040c 	bic.w	r4, r4, ip
 8001ec4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec6:	6844      	ldr	r4, [r0, #4]
 8001ec8:	ea24 0202 	bic.w	r2, r4, r2
 8001ecc:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ece:	68c2      	ldr	r2, [r0, #12]
 8001ed0:	ea22 020c 	bic.w	r2, r2, ip
 8001ed4:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8001ed6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8001ed8:	fa31 f203 	lsrs.w	r2, r1, r3
 8001edc:	d03f      	beq.n	8001f5e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8001ee2:	ea12 0701 	ands.w	r7, r2, r1
 8001ee6:	d0f6      	beq.n	8001ed6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001ee8:	089e      	lsrs	r6, r3, #2
 8001eea:	1cb5      	adds	r5, r6, #2
 8001eec:	4c1d      	ldr	r4, [pc, #116]	; (8001f64 <HAL_GPIO_DeInit+0xf0>)
 8001eee:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8001ef2:	f003 0c03 	and.w	ip, r3, #3
 8001ef6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001efa:	f04f 0e07 	mov.w	lr, #7
 8001efe:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001f02:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001f06:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001f0a:	d0bb      	beq.n	8001e84 <HAL_GPIO_DeInit+0x10>
 8001f0c:	4d16      	ldr	r5, [pc, #88]	; (8001f68 <HAL_GPIO_DeInit+0xf4>)
 8001f0e:	42a8      	cmp	r0, r5
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_DeInit+0xaa>
 8001f12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f16:	42a8      	cmp	r0, r5
 8001f18:	d0b2      	beq.n	8001e80 <HAL_GPIO_DeInit+0xc>
 8001f1a:	2507      	movs	r5, #7
 8001f1c:	e7b3      	b.n	8001e86 <HAL_GPIO_DeInit+0x12>
 8001f1e:	2501      	movs	r5, #1
 8001f20:	e7b1      	b.n	8001e86 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8001f22:	4c12      	ldr	r4, [pc, #72]	; (8001f6c <HAL_GPIO_DeInit+0xf8>)
 8001f24:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8001f28:	ea25 0507 	bic.w	r5, r5, r7
 8001f2c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001f30:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8001f34:	ea25 0507 	bic.w	r5, r5, r7
 8001f38:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8001f3c:	6825      	ldr	r5, [r4, #0]
 8001f3e:	ea25 0507 	bic.w	r5, r5, r7
 8001f42:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001f44:	6865      	ldr	r5, [r4, #4]
 8001f46:	ea25 0507 	bic.w	r5, r5, r7
 8001f4a:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001f4c:	4d05      	ldr	r5, [pc, #20]	; (8001f64 <HAL_GPIO_DeInit+0xf0>)
 8001f4e:	3602      	adds	r6, #2
 8001f50:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8001f54:	ea24 040e 	bic.w	r4, r4, lr
 8001f58:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8001f5c:	e797      	b.n	8001e8e <HAL_GPIO_DeInit+0x1a>
  }
}
 8001f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40010000 	.word	0x40010000
 8001f68:	48000400 	.word	0x48000400
 8001f6c:	58000800 	.word	0x58000800

08001f70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f70:	b10a      	cbz	r2, 8001f76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f72:	6181      	str	r1, [r0, #24]
 8001f74:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f76:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001f78:	4770      	bx	lr

08001f7a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f7a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f7c:	ea01 0203 	and.w	r2, r1, r3
 8001f80:	ea21 0103 	bic.w	r1, r1, r3
 8001f84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001f88:	6181      	str	r1, [r0, #24]
}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4a02      	ldr	r2, [pc, #8]	; (8001f98 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]
}
 8001f96:	4770      	bx	lr
 8001f98:	58000400 	.word	0x58000400

08001f9c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001fa0:	b9a0      	cbnz	r0, 8001fcc <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001faa:	d10a      	bne.n	8001fc2 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_PWR_EnterSLEEPMode+0x48>)
 8001fae:	6913      	ldr	r3, [r2, #16]
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001fb6:	2c01      	cmp	r4, #1
 8001fb8:	d010      	beq.n	8001fdc <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001fba:	bf40      	sev
    __WFE();
 8001fbc:	bf20      	wfe
    __WFE();
 8001fbe:	bf20      	wfe
  }
}
 8001fc0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001fc2:	f000 f821 	bl	8002008 <HAL_PWREx_DisableLowPowerRunMode>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_PWR_EnterSLEEPMode+0x10>
 8001fca:	e7f9      	b.n	8001fc0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001fd4:	d1ea      	bne.n	8001fac <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8001fd6:	f000 f80f 	bl	8001ff8 <HAL_PWREx_EnableLowPowerRunMode>
 8001fda:	e7e7      	b.n	8001fac <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8001fdc:	bf30      	wfi
 8001fde:	e7ef      	b.n	8001fc0 <HAL_PWR_EnterSLEEPMode+0x24>
 8001fe0:	58000400 	.word	0x58000400
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <HAL_PWREx_GetVoltageRange+0xc>)
 8001fea:	6818      	ldr	r0, [r3, #0]
}
 8001fec:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	58000400 	.word	0x58000400

08001ff8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001ff8:	4a02      	ldr	r2, [pc, #8]	; (8002004 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6013      	str	r3, [r2, #0]
}
 8002002:	4770      	bx	lr
 8002004:	58000400 	.word	0x58000400

08002008 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002008:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002010:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2232      	movs	r2, #50	; 0x32
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002024:	e000      	b.n	8002028 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8002026:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800202a:	6952      	ldr	r2, [r2, #20]
 800202c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002030:	d001      	beq.n	8002036 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f7      	bne.n	8002026 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800203e:	d101      	bne.n	8002044 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8002040:	2000      	movs	r0, #0
 8002042:	4770      	bx	lr
    return HAL_TIMEOUT;
 8002044:	2003      	movs	r0, #3
}
 8002046:	4770      	bx	lr
 8002048:	58000400 	.word	0x58000400
 800204c:	20000004 	.word	0x20000004
 8002050:	431bde83 	.word	0x431bde83

08002054 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8002056:	6813      	ldr	r3, [r2, #0]
 8002058:	f023 0307 	bic.w	r3, r3, #7
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8002064:	6913      	ldr	r3, [r2, #16]
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800206c:	2801      	cmp	r0, #1
 800206e:	d008      	beq.n	8002082 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002070:	bf40      	sev
    __WFE();
 8002072:	bf20      	wfe
    __WFE();
 8002074:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8002078:	6913      	ldr	r3, [r2, #16]
 800207a:	f023 0304 	bic.w	r3, r3, #4
 800207e:	6113      	str	r3, [r2, #16]
}
 8002080:	4770      	bx	lr
    __WFI();
 8002082:	bf30      	wfi
 8002084:	e7f7      	b.n	8002076 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8002086:	bf00      	nop
 8002088:	58000400 	.word	0x58000400
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002090:	b530      	push	{r4, r5, lr}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	4604      	mov	r4, r0
 8002096:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <RCC_SetFlashLatency+0xb4>)
 800209a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800209e:	9006      	str	r0, [sp, #24]
 80020a0:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80020a4:	f103 0208 	add.w	r2, r3, #8
 80020a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ac:	9004      	str	r0, [sp, #16]
 80020ae:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80020b2:	ad01      	add	r5, sp, #4
 80020b4:	3310      	adds	r3, #16
 80020b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020be:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80020c2:	d007      	beq.n	80020d4 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	e014      	b.n	80020f2 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80020c8:	aa08      	add	r2, sp, #32
 80020ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80020ce:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80020d2:	e01e      	b.n	8002112 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d808      	bhi.n	80020ec <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80020da:	aa08      	add	r2, sp, #32
 80020dc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80020e0:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80020e4:	42a2      	cmp	r2, r4
 80020e6:	d2ef      	bcs.n	80020c8 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020e8:	3301      	adds	r3, #1
 80020ea:	e7f4      	b.n	80020d6 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80020ec:	2500      	movs	r5, #0
 80020ee:	e010      	b.n	8002112 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80020f0:	3301      	adds	r3, #1
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d80c      	bhi.n	8002110 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80020f6:	aa08      	add	r2, sp, #32
 80020f8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80020fc:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8002100:	42a2      	cmp	r2, r4
 8002102:	d3f5      	bcc.n	80020f0 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002104:	aa08      	add	r2, sp, #32
 8002106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800210a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800210e:	e000      	b.n	8002112 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002110:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002112:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <RCC_SetFlashLatency+0xb8>)
 8002114:	6813      	ldr	r3, [r2, #0]
 8002116:	f023 0307 	bic.w	r3, r3, #7
 800211a:	432b      	orrs	r3, r5
 800211c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800211e:	f7fe fbe9 	bl	80008f4 <HAL_GetTick>
 8002122:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <RCC_SetFlashLatency+0xb8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	42ab      	cmp	r3, r5
 800212e:	d006      	beq.n	800213e <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002130:	f7fe fbe0 	bl	80008f4 <HAL_GetTick>
 8002134:	1b00      	subs	r0, r0, r4
 8002136:	2802      	cmp	r0, #2
 8002138:	d9f4      	bls.n	8002124 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800213a:	2003      	movs	r0, #3
 800213c:	e000      	b.n	8002140 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800213e:	2000      	movs	r0, #0
}
 8002140:	b009      	add	sp, #36	; 0x24
 8002142:	bd30      	pop	{r4, r5, pc}
 8002144:	08007da0 	.word	0x08007da0
 8002148:	58004000 	.word	0x58004000

0800214c <RCC_SetFlashLatencyFromMSIRange>:
{
 800214c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800214e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8002154:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	4a08      	ldr	r2, [pc, #32]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800216e:	f7ff ff3b 	bl	8001fe8 <HAL_PWREx_GetVoltageRange>
 8002172:	4601      	mov	r1, r0
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8002176:	fba3 3404 	umull	r3, r4, r3, r4
 800217a:	0ca0      	lsrs	r0, r4, #18
 800217c:	f7ff ff88 	bl	8002090 <RCC_SetFlashLatency>
}
 8002180:	bd10      	pop	{r4, pc}
 8002182:	bf00      	nop
 8002184:	0800807c 	.word	0x0800807c
 8002188:	0800801c 	.word	0x0800801c
 800218c:	431bde83 	.word	0x431bde83

08002190 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002194:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800219c:	f011 010c 	ands.w	r1, r1, #12
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x28>
 80021a2:	290c      	cmp	r1, #12
 80021a4:	d006      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a6:	2904      	cmp	r1, #4
 80021a8:	d047      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021aa:	2908      	cmp	r1, #8
 80021ac:	d03b      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80021ae:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80021b0:	4610      	mov	r0, r2
 80021b2:	e026      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d1f6      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f013 0308 	ands.w	r3, r3, #8
 80021c2:	d00d      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x50>
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f013 0308 	ands.w	r3, r3, #8
 80021ce:	d124      	bne.n	800221a <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80021d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d4:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80021d8:	4a2e      	ldr	r2, [pc, #184]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 80021da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021de:	e00e      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80021e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	f012 0f08 	tst.w	r2, #8
 80021ea:	d112      	bne.n	8002212 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80021f8:	4a26      	ldr	r2, [pc, #152]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 80021fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021fe:	b1d1      	cbz	r1, 8002236 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8002200:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d01a      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8002210:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	e7ee      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x68>
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002220:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002224:	e7d8      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8002230:	d106      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8002232:	4819      	ldr	r0, [pc, #100]	; (8002298 <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	e7e5      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8002236:	4610      	mov	r0, r2
 8002238:	e7e3      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800223a:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 800223c:	4817      	ldr	r0, [pc, #92]	; (800229c <HAL_RCC_GetSysClockFreq+0x10c>)
 800223e:	e7e0      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8002240:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8002242:	4816      	ldr	r0, [pc, #88]	; (800229c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002244:	e7dd      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002250:	2b02      	cmp	r3, #2
 8002252:	d009      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0xd8>
 8002254:	2b03      	cmp	r3, #3
 8002256:	d108      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002262:	d115      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	e000      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800226a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226e:	68cb      	ldr	r3, [r1, #12]
 8002270:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002274:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002278:	68cb      	ldr	r3, [r1, #12]
 800227a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800227e:	3301      	adds	r3, #1
 8002280:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002284:	68c8      	ldr	r0, [r1, #12]
 8002286:	0f40      	lsrs	r0, r0, #29
 8002288:	3001      	adds	r0, #1
 800228a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800228e:	e7bf      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8002290:	4a02      	ldr	r2, [pc, #8]	; (800229c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002292:	e7ea      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xda>
 8002294:	0800807c 	.word	0x0800807c
 8002298:	01e84800 	.word	0x01e84800
 800229c:	00f42400 	.word	0x00f42400

080022a0 <HAL_RCC_GetHCLKFreq>:
{
 80022a0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80022a2:	f7ff ff75 	bl	8002190 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80022a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <HAL_RCC_GetHCLKFreq+0x1c>)
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80022b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80022ba:	bd08      	pop	{r3, pc}
 80022bc:	0800801c 	.word	0x0800801c

080022c0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80022c0:	2800      	cmp	r0, #0
 80022c2:	f000 8311 	beq.w	80028e8 <HAL_RCC_OscConfig+0x628>
{
 80022c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	689d      	ldr	r5, [r3, #8]
 80022d0:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80022d4:	68de      	ldr	r6, [r3, #12]
 80022d6:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022da:	6803      	ldr	r3, [r0, #0]
 80022dc:	f013 0f20 	tst.w	r3, #32
 80022e0:	d02a      	beq.n	8002338 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	d065      	beq.n	80023b2 <HAL_RCC_OscConfig+0xf2>
 80022e6:	2d0c      	cmp	r5, #12
 80022e8:	d061      	beq.n	80023ae <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ea:	6a23      	ldr	r3, [r4, #32]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80bf 	beq.w	8002470 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80022fe:	f7fe faf9 	bl	80008f4 <HAL_GetTick>
 8002302:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f013 0f02 	tst.w	r3, #2
 800230e:	f000 80a7 	beq.w	8002460 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	f042 0208 	orr.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002324:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002332:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002336:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	f013 0f01 	tst.w	r3, #1
 800233e:	f000 80b5 	beq.w	80024ac <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002342:	2d08      	cmp	r5, #8
 8002344:	f000 80ae 	beq.w	80024a4 <HAL_RCC_OscConfig+0x1e4>
 8002348:	2d0c      	cmp	r5, #12
 800234a:	f000 80a8 	beq.w	800249e <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800234e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002358:	68a1      	ldr	r1, [r4, #8]
 800235a:	430b      	orrs	r3, r1
 800235c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235e:	6863      	ldr	r3, [r4, #4]
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	f000 80c4 	beq.w	80024f0 <HAL_RCC_OscConfig+0x230>
 8002368:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800236c:	f000 80c5 	beq.w	80024fa <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800237a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002382:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002384:	6863      	ldr	r3, [r4, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80c2 	beq.w	8002510 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 800238c:	f7fe fab2 	bl	80008f4 <HAL_GetTick>
 8002390:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800239c:	f040 8086 	bne.w	80024ac <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe faa8 	bl	80008f4 <HAL_GetTick>
 80023a4:	1bc0      	subs	r0, r0, r7
 80023a6:	2864      	cmp	r0, #100	; 0x64
 80023a8:	d9f3      	bls.n	8002392 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80023aa:	2003      	movs	r0, #3
 80023ac:	e2a9      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023ae:	2e01      	cmp	r6, #1
 80023b0:	d19b      	bne.n	80022ea <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023b2:	6a23      	ldr	r3, [r4, #32]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8299 	beq.w	80028ec <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f013 0f08 	tst.w	r3, #8
 80023c6:	d029      	beq.n	800241c <HAL_RCC_OscConfig+0x15c>
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d2:	4298      	cmp	r0, r3
 80023d4:	d92a      	bls.n	800242c <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d6:	f7ff feb9 	bl	800214c <RCC_SetFlashLatencyFromMSIRange>
 80023da:	2800      	cmp	r0, #0
 80023dc:	f040 8288 	bne.w	80028f0 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f042 0208 	orr.w	r2, r2, #8
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002400:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002404:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002406:	f7ff ff4b 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 800240a:	4bba      	ldr	r3, [pc, #744]	; (80026f4 <HAL_RCC_OscConfig+0x434>)
 800240c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800240e:	4bba      	ldr	r3, [pc, #744]	; (80026f8 <HAL_RCC_OscConfig+0x438>)
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	f7fe fa6d 	bl	80008f0 <HAL_InitTick>
        if (status != HAL_OK)
 8002416:	2800      	cmp	r0, #0
 8002418:	d08e      	beq.n	8002338 <HAL_RCC_OscConfig+0x78>
 800241a:	e272      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242a:	e7d2      	b.n	80023d2 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f042 0208 	orr.w	r2, r2, #8
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800243e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002444:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800244c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002450:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002452:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002454:	f7ff fe7a 	bl	800214c <RCC_SetFlashLatencyFromMSIRange>
 8002458:	2800      	cmp	r0, #0
 800245a:	d0d4      	beq.n	8002406 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
 800245e:	e250      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002460:	f7fe fa48 	bl	80008f4 <HAL_GetTick>
 8002464:	1bc0      	subs	r0, r0, r7
 8002466:	2802      	cmp	r0, #2
 8002468:	f67f af4c 	bls.w	8002304 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800246c:	2003      	movs	r0, #3
 800246e:	e248      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002474:	6813      	ldr	r3, [r2, #0]
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800247c:	f7fe fa3a 	bl	80008f4 <HAL_GetTick>
 8002480:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f013 0f02 	tst.w	r3, #2
 800248c:	f43f af54 	beq.w	8002338 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002490:	f7fe fa30 	bl	80008f4 <HAL_GetTick>
 8002494:	1bc0      	subs	r0, r0, r7
 8002496:	2802      	cmp	r0, #2
 8002498:	d9f3      	bls.n	8002482 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 800249a:	2003      	movs	r0, #3
 800249c:	e231      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800249e:	2e03      	cmp	r6, #3
 80024a0:	f47f af55 	bne.w	800234e <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80024a4:	6863      	ldr	r3, [r4, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8224 	beq.w	80028f4 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	f013 0f02 	tst.w	r3, #2
 80024b2:	d056      	beq.n	8002562 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024b4:	2d04      	cmp	r5, #4
 80024b6:	d03d      	beq.n	8002534 <HAL_RCC_OscConfig+0x274>
 80024b8:	2d0c      	cmp	r5, #12
 80024ba:	d039      	beq.n	8002530 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024bc:	6923      	ldr	r3, [r4, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 808a 	beq.w	80025d8 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80024d0:	f7fe fa10 	bl	80008f4 <HAL_GetTick>
 80024d4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024e0:	d136      	bne.n	8002550 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe fa07 	bl	80008f4 <HAL_GetTick>
 80024e6:	1b80      	subs	r0, r0, r6
 80024e8:	2802      	cmp	r0, #2
 80024ea:	d9f4      	bls.n	80024d6 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 80024ec:	2003      	movs	r0, #3
 80024ee:	e208      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80024f0:	6813      	ldr	r3, [r2, #0]
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	e744      	b.n	8002384 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002504:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	e739      	b.n	8002384 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002510:	f7fe f9f0 	bl	80008f4 <HAL_GetTick>
 8002514:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002520:	d0c4      	beq.n	80024ac <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002522:	f7fe f9e7 	bl	80008f4 <HAL_GetTick>
 8002526:	1bc0      	subs	r0, r0, r7
 8002528:	2864      	cmp	r0, #100	; 0x64
 800252a:	d9f4      	bls.n	8002516 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 800252c:	2003      	movs	r0, #3
 800252e:	e1e8      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002530:	2e02      	cmp	r6, #2
 8002532:	d1c3      	bne.n	80024bc <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002534:	6923      	ldr	r3, [r4, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 81de 	beq.w	80028f8 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800253e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002542:	6853      	ldr	r3, [r2, #4]
 8002544:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002548:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800254c:	6053      	str	r3, [r2, #4]
}
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002556:	6853      	ldr	r3, [r2, #4]
 8002558:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800255c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002560:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	f013 0f08 	tst.w	r3, #8
 8002568:	d07e      	beq.n	8002668 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256a:	69a3      	ldr	r3, [r4, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d062      	beq.n	8002636 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002578:	69e1      	ldr	r1, [r4, #28]
 800257a:	f003 0210 	and.w	r2, r3, #16
 800257e:	4291      	cmp	r1, r2
 8002580:	d011      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002582:	f003 0203 	and.w	r2, r3, #3
 8002586:	2a02      	cmp	r2, #2
 8002588:	f000 81b8 	beq.w	80028fc <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800258c:	f013 0f01 	tst.w	r3, #1
 8002590:	d138      	bne.n	8002604 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002596:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800259a:	f023 0310 	bic.w	r3, r3, #16
 800259e:	69e1      	ldr	r1, [r4, #28]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80025a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80025b6:	f7fe f99d 	bl	80008f4 <HAL_GetTick>
 80025ba:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c4:	f013 0f02 	tst.w	r3, #2
 80025c8:	d14e      	bne.n	8002668 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ca:	f7fe f993 	bl	80008f4 <HAL_GetTick>
 80025ce:	1b80      	subs	r0, r0, r6
 80025d0:	2811      	cmp	r0, #17
 80025d2:	d9f3      	bls.n	80025bc <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 80025d4:	2003      	movs	r0, #3
 80025d6:	e194      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80025d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025e4:	f7fe f986 	bl	80008f4 <HAL_GetTick>
 80025e8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025f4:	d0b5      	beq.n	8002562 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe f97d 	bl	80008f4 <HAL_GetTick>
 80025fa:	1b80      	subs	r0, r0, r6
 80025fc:	2802      	cmp	r0, #2
 80025fe:	d9f4      	bls.n	80025ea <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8002600:	2003      	movs	r0, #3
 8002602:	e17e      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002608:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002614:	f7fe f96e 	bl	80008f4 <HAL_GetTick>
 8002618:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	f013 0f02 	tst.w	r3, #2
 8002626:	d0b4      	beq.n	8002592 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7fe f964 	bl	80008f4 <HAL_GetTick>
 800262c:	1b80      	subs	r0, r0, r6
 800262e:	2811      	cmp	r0, #17
 8002630:	d9f3      	bls.n	800261a <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8002632:	2003      	movs	r0, #3
 8002634:	e165      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002646:	f7fe f955 	bl	80008f4 <HAL_GetTick>
 800264a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002654:	f013 0f02 	tst.w	r3, #2
 8002658:	d006      	beq.n	8002668 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265a:	f7fe f94b 	bl	80008f4 <HAL_GetTick>
 800265e:	1b80      	subs	r0, r0, r6
 8002660:	2811      	cmp	r0, #17
 8002662:	d9f3      	bls.n	800264c <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8002664:	2003      	movs	r0, #3
 8002666:	e14c      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	f013 0f04 	tst.w	r3, #4
 800266e:	f000 80b8 	beq.w	80027e2 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCC_OscConfig+0x43c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f413 7f80 	tst.w	r3, #256	; 0x100
 800267a:	d110      	bne.n	800269e <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 800267c:	f7ff fc86 	bl	8001f8c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002680:	f7fe f938 	bl	80008f4 <HAL_GetTick>
 8002684:	4606      	mov	r6, r0
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x43c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002690:	f7fe f930 	bl	80008f4 <HAL_GetTick>
 8002694:	1b80      	subs	r0, r0, r6
 8002696:	2802      	cmp	r0, #2
 8002698:	d9f5      	bls.n	8002686 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800269a:	2003      	movs	r0, #3
 800269c:	e131      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800269e:	68e3      	ldr	r3, [r4, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d068      	beq.n	8002776 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80026a4:	2b85      	cmp	r3, #133	; 0x85
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80026bc:	f7fe f91a 	bl	80008f4 <HAL_GetTick>
 80026c0:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f013 0f02 	tst.w	r3, #2
 80026de:	d10f      	bne.n	8002700 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe f908 	bl	80008f4 <HAL_GetTick>
 80026e4:	1b80      	subs	r0, r0, r6
 80026e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80026ea:	4298      	cmp	r0, r3
 80026ec:	d9f1      	bls.n	80026d2 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 80026ee:	2003      	movs	r0, #3
 80026f0:	e107      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
 80026f2:	bf00      	nop
 80026f4:	20000004 	.word	0x20000004
 80026f8:	20000008 	.word	0x20000008
 80026fc:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002700:	68e3      	ldr	r3, [r4, #12]
 8002702:	2b81      	cmp	r3, #129	; 0x81
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002706:	2b85      	cmp	r3, #133	; 0x85
 8002708:	d11a      	bne.n	8002740 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800270a:	f7fe f8f3 	bl	80008f4 <HAL_GetTick>
 800270e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002714:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800272c:	d159      	bne.n	80027e2 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe f8e1 	bl	80008f4 <HAL_GetTick>
 8002732:	1b80      	subs	r0, r0, r6
 8002734:	f241 3388 	movw	r3, #5000	; 0x1388
 8002738:	4298      	cmp	r0, r3
 800273a:	d9f1      	bls.n	8002720 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 800273c:	2003      	movs	r0, #3
 800273e:	e0e0      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8002740:	f7fe f8d8 	bl	80008f4 <HAL_GetTick>
 8002744:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800274e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002762:	d03e      	beq.n	80027e2 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe f8c6 	bl	80008f4 <HAL_GetTick>
 8002768:	1b80      	subs	r0, r0, r6
 800276a:	f241 3388 	movw	r3, #5000	; 0x1388
 800276e:	4298      	cmp	r0, r3
 8002770:	d9f1      	bls.n	8002756 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8002772:	2003      	movs	r0, #3
 8002774:	e0c5      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8002776:	f7fe f8bd 	bl	80008f4 <HAL_GetTick>
 800277a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800277c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002780:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002798:	d008      	beq.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe f8ab 	bl	80008f4 <HAL_GetTick>
 800279e:	1b80      	subs	r0, r0, r6
 80027a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80027a4:	4298      	cmp	r0, r3
 80027a6:	d9f1      	bls.n	800278c <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80027a8:	2003      	movs	r0, #3
 80027aa:	e0aa      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80027ac:	f7fe f8a2 	bl	80008f4 <HAL_GetTick>
 80027b0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	f013 0f02 	tst.w	r3, #2
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe f890 	bl	80008f4 <HAL_GetTick>
 80027d4:	1b80      	subs	r0, r0, r6
 80027d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80027da:	4298      	cmp	r0, r3
 80027dc:	d9f1      	bls.n	80027c2 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 80027de:	2003      	movs	r0, #3
 80027e0:	e08f      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 808b 	beq.w	8002900 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ea:	2d0c      	cmp	r5, #12
 80027ec:	d060      	beq.n	80028b0 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d016      	beq.n	8002820 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f6:	6813      	ldr	r3, [r2, #0]
 80027f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027fe:	f7fe f879 	bl	80008f4 <HAL_GetTick>
 8002802:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800280e:	d148      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002814:	68d1      	ldr	r1, [r2, #12]
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x65c>)
 8002818:	400b      	ands	r3, r1
 800281a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800281c:	2000      	movs	r0, #0
 800281e:	e070      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800282c:	f7fe f862 	bl	80008f4 <HAL_GetTick>
 8002830:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800283c:	d12a      	bne.n	8002894 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002842:	68d3      	ldr	r3, [r2, #12]
 8002844:	4936      	ldr	r1, [pc, #216]	; (8002920 <HAL_RCC_OscConfig+0x660>)
 8002846:	4019      	ands	r1, r3
 8002848:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800284a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800284c:	4303      	orrs	r3, r0
 800284e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002850:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002854:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002856:	4303      	orrs	r3, r0
 8002858:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800285a:	4303      	orrs	r3, r0
 800285c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800285e:	4303      	orrs	r3, r0
 8002860:	4319      	orrs	r1, r3
 8002862:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002864:	6813      	ldr	r3, [r2, #0]
 8002866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800286c:	68d3      	ldr	r3, [r2, #12]
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002872:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002874:	f7fe f83e 	bl	80008f4 <HAL_GetTick>
 8002878:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002884:	d13e      	bne.n	8002904 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe f835 	bl	80008f4 <HAL_GetTick>
 800288a:	1b00      	subs	r0, r0, r4
 800288c:	280a      	cmp	r0, #10
 800288e:	d9f4      	bls.n	800287a <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8002890:	2003      	movs	r0, #3
 8002892:	e036      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe f82e 	bl	80008f4 <HAL_GetTick>
 8002898:	1b40      	subs	r0, r0, r5
 800289a:	280a      	cmp	r0, #10
 800289c:	d9c9      	bls.n	8002832 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800289e:	2003      	movs	r0, #3
 80028a0:	e02f      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe f827 	bl	80008f4 <HAL_GetTick>
 80028a6:	1b00      	subs	r0, r0, r4
 80028a8:	280a      	cmp	r0, #10
 80028aa:	d9ab      	bls.n	8002804 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80028ac:	2003      	movs	r0, #3
 80028ae:	e028      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d029      	beq.n	8002908 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b8:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80028ba:	f003 0103 	and.w	r1, r3, #3
 80028be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028c0:	4291      	cmp	r1, r2
 80028c2:	d123      	bne.n	800290c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80028c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028ca:	428a      	cmp	r2, r1
 80028cc:	d120      	bne.n	8002910 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80028ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80028d4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80028d8:	d11c      	bne.n	8002914 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80028da:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80028de:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d119      	bne.n	8002918 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 80028e4:	2000      	movs	r0, #0
 80028e6:	e00c      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
}
 80028ea:	4770      	bx	lr
        return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 80028f0:	2001      	movs	r0, #1
 80028f2:	e006      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80028f4:	2001      	movs	r0, #1
 80028f6:	e004      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80028f8:	2001      	movs	r0, #1
 80028fa:	e002      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 80028fc:	2001      	movs	r0, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8002900:	2000      	movs	r0, #0
}
 8002902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002904:	2000      	movs	r0, #0
 8002906:	e7fc      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8002908:	2001      	movs	r0, #1
 800290a:	e7fa      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800290c:	2001      	movs	r0, #1
 800290e:	e7f8      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
 8002910:	2001      	movs	r0, #1
 8002912:	e7f6      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
 8002914:	2001      	movs	r0, #1
 8002916:	e7f4      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
 8002918:	2001      	movs	r0, #1
 800291a:	e7f2      	b.n	8002902 <HAL_RCC_OscConfig+0x642>
 800291c:	eefefffc 	.word	0xeefefffc
 8002920:	11c1808c 	.word	0x11c1808c

08002924 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002924:	2800      	cmp	r0, #0
 8002926:	f000 8127 	beq.w	8002b78 <HAL_RCC_ClockConfig+0x254>
{
 800292a:	b570      	push	{r4, r5, r6, lr}
 800292c:	460c      	mov	r4, r1
 800292e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b93      	ldr	r3, [pc, #588]	; (8002b80 <HAL_RCC_ClockConfig+0x25c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	428b      	cmp	r3, r1
 800293a:	d32d      	bcc.n	8002998 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	f013 0f02 	tst.w	r3, #2
 8002942:	d13f      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	f013 0f20 	tst.w	r3, #32
 800294a:	d153      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002952:	d16a      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	f013 0f04 	tst.w	r3, #4
 800295a:	f040 8083 	bne.w	8002a64 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	682b      	ldr	r3, [r5, #0]
 8002960:	f013 0f08 	tst.w	r3, #8
 8002964:	f040 8097 	bne.w	8002a96 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	f013 0f01 	tst.w	r3, #1
 800296e:	f000 80de 	beq.w	8002b2e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	686b      	ldr	r3, [r5, #4]
 8002974:	2b02      	cmp	r3, #2
 8002976:	f000 80a8 	beq.w	8002aca <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	2b03      	cmp	r3, #3
 800297c:	f000 80ad 	beq.w	8002ada <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 80b2 	bne.w	8002aea <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	f012 0f02 	tst.w	r2, #2
 8002990:	f040 80b1 	bne.w	8002af6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8002994:	2001      	movs	r0, #1
 8002996:	e0ee      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002998:	4a79      	ldr	r2, [pc, #484]	; (8002b80 <HAL_RCC_ClockConfig+0x25c>)
 800299a:	6813      	ldr	r3, [r2, #0]
 800299c:	f023 0307 	bic.w	r3, r3, #7
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80029a4:	f7fd ffa6 	bl	80008f4 <HAL_GetTick>
 80029a8:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b75      	ldr	r3, [pc, #468]	; (8002b80 <HAL_RCC_ClockConfig+0x25c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	42a3      	cmp	r3, r4
 80029b4:	d0c2      	beq.n	800293c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029b6:	f7fd ff9d 	bl	80008f4 <HAL_GetTick>
 80029ba:	1b80      	subs	r0, r0, r6
 80029bc:	2802      	cmp	r0, #2
 80029be:	d9f4      	bls.n	80029aa <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80029c0:	2003      	movs	r0, #3
 80029c2:	e0d8      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80029c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ca:	688a      	ldr	r2, [r1, #8]
 80029cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80029d4:	f7fd ff8e 	bl	80008f4 <HAL_GetTick>
 80029d8:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80029da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80029e4:	d1ae      	bne.n	8002944 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029e6:	f7fd ff85 	bl	80008f4 <HAL_GetTick>
 80029ea:	1b80      	subs	r0, r0, r6
 80029ec:	2802      	cmp	r0, #2
 80029ee:	d9f4      	bls.n	80029da <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80029f0:	2003      	movs	r0, #3
 80029f2:	e0c0      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80029f4:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80029f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fa:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80029fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002a08:	f7fd ff74 	bl	80008f4 <HAL_GetTick>
 8002a0c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a1a:	d197      	bne.n	800294c <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a1c:	f7fd ff6a 	bl	80008f4 <HAL_GetTick>
 8002a20:	1b80      	subs	r0, r0, r6
 8002a22:	2802      	cmp	r0, #2
 8002a24:	d9f3      	bls.n	8002a0e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8002a26:	2003      	movs	r0, #3
 8002a28:	e0a5      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002a2a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a30:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8002a34:	f023 030f 	bic.w	r3, r3, #15
 8002a38:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8002a3c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002a40:	f7fd ff58 	bl	80008f4 <HAL_GetTick>
 8002a44:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a52:	f47f af7f 	bne.w	8002954 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a56:	f7fd ff4d 	bl	80008f4 <HAL_GetTick>
 8002a5a:	1b80      	subs	r0, r0, r6
 8002a5c:	2802      	cmp	r0, #2
 8002a5e:	d9f2      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8002a60:	2003      	movs	r0, #3
 8002a62:	e088      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6a:	688a      	ldr	r2, [r1, #8]
 8002a6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002a74:	f7fd ff3e 	bl	80008f4 <HAL_GetTick>
 8002a78:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a84:	f47f af6b 	bne.w	800295e <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a88:	f7fd ff34 	bl	80008f4 <HAL_GetTick>
 8002a8c:	1b80      	subs	r0, r0, r6
 8002a8e:	2802      	cmp	r0, #2
 8002a90:	d9f3      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8002a92:	2003      	movs	r0, #3
 8002a94:	e06f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a96:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9c:	6893      	ldr	r3, [r2, #8]
 8002a9e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002aa2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002aa6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002aa8:	f7fd ff24 	bl	80008f4 <HAL_GetTick>
 8002aac:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002ab8:	f47f af56 	bne.w	8002968 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002abc:	f7fd ff1a 	bl	80008f4 <HAL_GetTick>
 8002ac0:	1b80      	subs	r0, r0, r6
 8002ac2:	2802      	cmp	r0, #2
 8002ac4:	d9f3      	bls.n	8002aae <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8002ac6:	2003      	movs	r0, #3
 8002ac8:	e055      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002ad4:	d10f      	bne.n	8002af6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	e04d      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	e045      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002af4:	d042      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afa:	688a      	ldr	r2, [r1, #8]
 8002afc:	f022 0203 	bic.w	r2, r2, #3
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002b04:	f7fd fef6 	bl	80008f4 <HAL_GetTick>
 8002b08:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b14:	686a      	ldr	r2, [r5, #4]
 8002b16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7fd feea 	bl	80008f4 <HAL_GetTick>
 8002b20:	1b80      	subs	r0, r0, r6
 8002b22:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b26:	4298      	cmp	r0, r3
 8002b28:	d9ef      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8002b2a:	2003      	movs	r0, #3
 8002b2c:	e023      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_RCC_ClockConfig+0x25c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	42a3      	cmp	r3, r4
 8002b38:	d915      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_RCC_ClockConfig+0x25c>)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
 8002b42:	4323      	orrs	r3, r4
 8002b44:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b46:	f7fd fed5 	bl	80008f4 <HAL_GetTick>
 8002b4a:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_RCC_ClockConfig+0x25c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	42a3      	cmp	r3, r4
 8002b56:	d006      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b58:	f7fd fecc 	bl	80008f4 <HAL_GetTick>
 8002b5c:	1b40      	subs	r0, r0, r5
 8002b5e:	2802      	cmp	r0, #2
 8002b60:	d9f4      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8002b62:	2003      	movs	r0, #3
 8002b64:	e007      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b66:	f7ff fb9b 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCC_ClockConfig+0x264>)
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	f7fd febd 	bl	80008f0 <HAL_InitTick>
}
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002b78:	2001      	movs	r0, #1
}
 8002b7a:	4770      	bx	lr
        return HAL_ERROR;
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	e7fa      	b.n	8002b76 <HAL_RCC_ClockConfig+0x252>
 8002b80:	58004000 	.word	0x58004000
 8002b84:	20000004 	.word	0x20000004
 8002b88:	20000008 	.word	0x20000008

08002b8c <HAL_RCC_GetPCLK1Freq>:
{
 8002b8c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b8e:	f7ff fb87 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002b9c:	4a02      	ldr	r2, [pc, #8]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002ba2:	40d8      	lsrs	r0, r3
 8002ba4:	bd08      	pop	{r3, pc}
 8002ba6:	bf00      	nop
 8002ba8:	0800805c 	.word	0x0800805c

08002bac <HAL_RCC_GetPCLK2Freq>:
{
 8002bac:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002bae:	f7ff fb77 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002bbc:	4a02      	ldr	r2, [pc, #8]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002bc2:	40d8      	lsrs	r0, r3
 8002bc4:	bd08      	pop	{r3, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0800805c 	.word	0x0800805c

08002bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd0:	6803      	ldr	r3, [r0, #0]
 8002bd2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002bd6:	f040 80ab 	bne.w	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002bda:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	f013 0f01 	tst.w	r3, #1
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be4:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002bee:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8002bf2:	b292      	uxth	r2, r2
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	f013 0f02 	tst.w	r3, #2
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c02:	68a2      	ldr	r2, [r4, #8]
 8002c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c08:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c0c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8002c10:	b292      	uxth	r2, r2
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f013 0f20 	tst.w	r3, #32
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c20:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002c3a:	d00c      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c3c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c42:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c46:	0c02      	lsrs	r2, r0, #16
 8002c48:	0412      	lsls	r2, r2, #16
 8002c4a:	ea23 0302 	bic.w	r3, r3, r2
 8002c4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c5c:	d00c      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c64:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c68:	0c02      	lsrs	r2, r0, #16
 8002c6a:	0412      	lsls	r2, r2, #16
 8002c6c:	ea23 0302 	bic.w	r3, r3, r2
 8002c70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002c7e:	d00c      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002c80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c86:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c8a:	0c02      	lsrs	r2, r0, #16
 8002c8c:	0412      	lsls	r2, r2, #16
 8002c8e:	ea23 0302 	bic.w	r3, r3, r2
 8002c92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ca0:	f040 809e 	bne.w	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002caa:	f040 80aa 	bne.w	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cb4:	f040 80b6 	bne.w	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	f013 0f10 	tst.w	r3, #16
 8002cbe:	d00e      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002cc0:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002cd4:	68e3      	ldr	r3, [r4, #12]
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cda:	f000 80b4 	beq.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ce4:	d00f      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cf0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002cfc:	b91b      	cbnz	r3, 8002d06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002cfe:	68cb      	ldr	r3, [r1, #12]
 8002d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d04:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002d0c:	d00e      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002d22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d28:	f000 8092 	beq.w	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8002d30:	f7ff f92c 	bl	8001f8c <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8002d34:	f7fd fdde 	bl	80008f4 <HAL_GetTick>
 8002d38:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002d3a:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d42:	d106      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d44:	f7fd fdd6 	bl	80008f4 <HAL_GetTick>
 8002d48:	1b40      	subs	r0, r0, r5
 8002d4a:	2802      	cmp	r0, #2
 8002d4c:	d9f5      	bls.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8002d4e:	2503      	movs	r5, #3
 8002d50:	e000      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002d52:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8002d54:	2d00      	cmp	r5, #0
 8002d56:	f47f af41 	bne.w	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002d66:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d024      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002d74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d78:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8002d7c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002d80:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d84:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8002d88:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002d8c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002d90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002d94:	f012 0f02 	tst.w	r2, #2
 8002d98:	d10f      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	f47f af1e 	bne.w	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002daa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002db4:	e712      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8002db6:	2200      	movs	r2, #0
 8002db8:	e7ec      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8002dba:	f7fd fd9b 	bl	80008f4 <HAL_GetTick>
 8002dbe:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f013 0f02 	tst.w	r3, #2
 8002dcc:	d1e5      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fd fd91 	bl	80008f4 <HAL_GetTick>
 8002dd2:	1b80      	subs	r0, r0, r6
 8002dd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dd8:	4298      	cmp	r0, r3
 8002dda:	d9f1      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8002ddc:	2503      	movs	r5, #3
 8002dde:	e7dc      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de0:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002de2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002de6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002dea:	0919      	lsrs	r1, r3, #4
 8002dec:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002df0:	ea22 0201 	bic.w	r2, r2, r1
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8002e00:	e750      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e02:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e04:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002e08:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002e0c:	0919      	lsrs	r1, r3, #4
 8002e0e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002e12:	ea22 0201 	bic.w	r2, r2, r1
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8002e22:	e744      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e24:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e26:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002e2a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002e2e:	0919      	lsrs	r1, r3, #4
 8002e30:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002e34:	ea22 0201 	bic.w	r2, r2, r1
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8002e44:	e738      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002e46:	68cb      	ldr	r3, [r1, #12]
 8002e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	60cb      	str	r3, [r1, #12]
 8002e4e:	e746      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e50:	68cb      	ldr	r3, [r1, #12]
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e56:	60cb      	str	r3, [r1, #12]
 8002e58:	e768      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e5a:	bf00      	nop
 8002e5c:	58000400 	.word	0x58000400

08002e60 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002e60:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e62:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8002e66:	2a01      	cmp	r2, #1
 8002e68:	d035      	beq.n	8002ed6 <HAL_RTC_DeactivateAlarm+0x76>
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e70:	2202      	movs	r2, #2
 8002e72:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e76:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_RTC_DeactivateAlarm+0x7c>)
 8002e78:	20ca      	movs	r0, #202	; 0xca
 8002e7a:	6250      	str	r0, [r2, #36]	; 0x24
 8002e7c:	2053      	movs	r0, #83	; 0x53
 8002e7e:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002e80:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002e84:	d018      	beq.n	8002eb8 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8002e86:	4a15      	ldr	r2, [pc, #84]	; (8002edc <HAL_RTC_DeactivateAlarm+0x7c>)
 8002e88:	6991      	ldr	r1, [r2, #24]
 8002e8a:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8002e8e:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8002e90:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002e92:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002e96:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8002e98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e9a:	f021 0102 	bic.w	r1, r1, #2
 8002e9e:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <HAL_RTC_DeactivateAlarm+0x7c>)
 8002ea6:	21ff      	movs	r1, #255	; 0xff
 8002ea8:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 8002eb6:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8002eb8:	6991      	ldr	r1, [r2, #24]
 8002eba:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002ebe:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8002ec0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ec2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002ec6:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8002ec8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eca:	f021 0101 	bic.w	r1, r1, #1
 8002ece:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	65d1      	str	r1, [r2, #92]	; 0x5c
 8002ed4:	e7e6      	b.n	8002ea4 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8002ed6:	2002      	movs	r0, #2
}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40002800 	.word	0x40002800

08002ee0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8002ee6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8002ee8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002eea:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8002eec:	f015 0f01 	tst.w	r5, #1
 8002ef0:	d106      	bne.n	8002f00 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8002ef2:	f015 0f02 	tst.w	r5, #2
 8002ef6:	d109      	bne.n	8002f0c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8002efe:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8002f06:	f7fd fe7f 	bl	8000c08 <HAL_RTC_AlarmAEventCallback>
 8002f0a:	e7f2      	b.n	8002ef2 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8002f0e:	2202      	movs	r2, #2
 8002f10:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002f12:	4620      	mov	r0, r4
 8002f14:	f000 f9ec 	bl	80032f0 <HAL_RTCEx_AlarmBEventCallback>
 8002f18:	e7ee      	b.n	8002ef8 <HAL_RTC_AlarmIRQHandler+0x18>
 8002f1a:	bf00      	nop
 8002f1c:	40002800 	.word	0x40002800

08002f20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f20:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <HAL_RTC_WaitForSynchro+0x30>)
 8002f24:	68d3      	ldr	r3, [r2, #12]
 8002f26:	f023 0320 	bic.w	r3, r3, #32
 8002f2a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002f2c:	f7fd fce2 	bl	80008f4 <HAL_GetTick>
 8002f30:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_RTC_WaitForSynchro+0x30>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f013 0f20 	tst.w	r3, #32
 8002f3a:	d107      	bne.n	8002f4c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f3c:	f7fd fcda 	bl	80008f4 <HAL_GetTick>
 8002f40:	1b00      	subs	r0, r0, r4
 8002f42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f46:	d9f4      	bls.n	8002f32 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8002f48:	2003      	movs	r0, #3
 8002f4a:	e000      	b.n	8002f4e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002f4c:	2000      	movs	r0, #0
}
 8002f4e:	bd10      	pop	{r4, pc}
 8002f50:	40002800 	.word	0x40002800

08002f54 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <RTC_EnterInitMode+0x48>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f5e:	d002      	beq.n	8002f66 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8002f62:	4620      	mov	r0, r4
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002f68:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <RTC_EnterInitMode+0x48>)
 8002f6a:	68d3      	ldr	r3, [r2, #12]
 8002f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f70:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8002f72:	f7fd fcbf 	bl	80008f4 <HAL_GetTick>
 8002f76:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002f78:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <RTC_EnterInitMode+0x48>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f82:	d1ee      	bne.n	8002f62 <RTC_EnterInitMode+0xe>
 8002f84:	2c03      	cmp	r4, #3
 8002f86:	d0ec      	beq.n	8002f62 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002f88:	f7fd fcb4 	bl	80008f4 <HAL_GetTick>
 8002f8c:	1b43      	subs	r3, r0, r5
 8002f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f92:	d9f2      	bls.n	8002f7a <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f94:	2403      	movs	r4, #3
 8002f96:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8002f9a:	e7ee      	b.n	8002f7a <RTC_EnterInitMode+0x26>
 8002f9c:	40002800 	.word	0x40002800

08002fa0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <RTC_ExitInitMode+0x48>)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f013 0f20 	tst.w	r3, #32
 8002fb4:	d106      	bne.n	8002fc4 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fb6:	f7ff ffb3 	bl	8002f20 <HAL_RTC_WaitForSynchro>
 8002fba:	b198      	cbz	r0, 8002fe4 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8002fc2:	e00f      	b.n	8002fe4 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fc4:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <RTC_ExitInitMode+0x48>)
 8002fc6:	6993      	ldr	r3, [r2, #24]
 8002fc8:	f023 0320 	bic.w	r3, r3, #32
 8002fcc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fce:	f7ff ffa7 	bl	8002f20 <HAL_RTC_WaitForSynchro>
 8002fd2:	b110      	cbz	r0, 8002fda <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fda:	4a03      	ldr	r2, [pc, #12]	; (8002fe8 <RTC_ExitInitMode+0x48>)
 8002fdc:	6993      	ldr	r3, [r2, #24]
 8002fde:	f043 0320 	orr.w	r3, r3, #32
 8002fe2:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8002fe4:	bd10      	pop	{r4, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40002800 	.word	0x40002800

08002fec <HAL_RTC_Init>:
  if (hrtc != NULL)
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d052      	beq.n	8003096 <HAL_RTC_Init+0xaa>
{
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ff4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8002ff8:	b163      	cbz	r3, 8003014 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_RTC_Init+0xb0>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f013 0f10 	tst.w	r3, #16
 8003008:	d009      	beq.n	800301e <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800300a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 800300c:	2301      	movs	r3, #1
 800300e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8003012:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8003014:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8003018:	f7fd fb52 	bl	80006c0 <HAL_RTC_MspInit>
 800301c:	e7ed      	b.n	8002ffa <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800301e:	4b1f      	ldr	r3, [pc, #124]	; (800309c <HAL_RTC_Init+0xb0>)
 8003020:	22ca      	movs	r2, #202	; 0xca
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
 8003024:	2253      	movs	r2, #83	; 0x53
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff ff93 	bl	8002f54 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800302e:	b128      	cbz	r0, 800303c <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <HAL_RTC_Init+0xb0>)
 8003032:	22ff      	movs	r2, #255	; 0xff
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003036:	2800      	cmp	r0, #0
 8003038:	d1eb      	bne.n	8003012 <HAL_RTC_Init+0x26>
 800303a:	e7e7      	b.n	800300c <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <HAL_RTC_Init+0xb0>)
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8003044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003048:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800304a:	6999      	ldr	r1, [r3, #24]
 800304c:	6862      	ldr	r2, [r4, #4]
 800304e:	6920      	ldr	r0, [r4, #16]
 8003050:	4302      	orrs	r2, r0
 8003052:	69a0      	ldr	r0, [r4, #24]
 8003054:	4302      	orrs	r2, r0
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800305a:	68e2      	ldr	r2, [r4, #12]
 800305c:	68a1      	ldr	r1, [r4, #8]
 800305e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003062:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800306a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800306c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800306e:	4301      	orrs	r1, r0
 8003070:	430a      	orrs	r2, r1
 8003072:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8003074:	4620      	mov	r0, r4
 8003076:	f7ff ff93 	bl	8002fa0 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800307a:	2800      	cmp	r0, #0
 800307c:	d1d8      	bne.n	8003030 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 800307e:	4907      	ldr	r1, [pc, #28]	; (800309c <HAL_RTC_Init+0xb0>)
 8003080:	698b      	ldr	r3, [r1, #24]
 8003082:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003086:	6a22      	ldr	r2, [r4, #32]
 8003088:	69e5      	ldr	r5, [r4, #28]
 800308a:	432a      	orrs	r2, r5
 800308c:	6965      	ldr	r5, [r4, #20]
 800308e:	432a      	orrs	r2, r5
 8003090:	4313      	orrs	r3, r2
 8003092:	618b      	str	r3, [r1, #24]
 8003094:	e7cc      	b.n	8003030 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003096:	2001      	movs	r0, #1
}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40002800 	.word	0x40002800

080030a0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80030a0:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80030a2:	e002      	b.n	80030aa <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80030a4:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80030a6:	380a      	subs	r0, #10
 80030a8:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80030aa:	2809      	cmp	r0, #9
 80030ac:	d8fa      	bhi.n	80030a4 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	b2db      	uxtb	r3, r3
}
 80030b2:	4318      	orrs	r0, r3
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80030b8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	f000 80b0 	beq.w	8003222 <HAL_RTC_SetAlarm_IT+0x16a>
{
 80030c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c6:	4605      	mov	r5, r0
 80030c8:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80030ca:	2301      	movs	r3, #1
 80030cc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030d0:	2302      	movs	r3, #2
 80030d2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80030d6:	4b54      	ldr	r3, [pc, #336]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 80030d8:	68de      	ldr	r6, [r3, #12]
 80030da:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80030de:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80030e2:	d043      	beq.n	800316c <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80030e4:	bb12      	cbnz	r2, 800312c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030ec:	d101      	bne.n	80030f2 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80030f2:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030f6:	7820      	ldrb	r0, [r4, #0]
 80030f8:	f7ff ffd2 	bl	80030a0 <RTC_ByteToBcd2>
 80030fc:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030fe:	7860      	ldrb	r0, [r4, #1]
 8003100:	f7ff ffce 	bl	80030a0 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003104:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003108:	78a0      	ldrb	r0, [r4, #2]
 800310a:	f7ff ffc9 	bl	80030a0 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800310e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003110:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003112:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003116:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800311a:	f7ff ffc1 	bl	80030a0 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800311e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003122:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003124:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003126:	ea48 0000 	orr.w	r0, r8, r0
 800312a:	e020      	b.n	800316e <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800312c:	6948      	ldr	r0, [r1, #20]
 800312e:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8003132:	d009      	beq.n	8003148 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003134:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003138:	d006      	beq.n	8003148 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003142:	d101      	bne.n	8003148 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003148:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800314a:	7863      	ldrb	r3, [r4, #1]
 800314c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800314e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003152:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003154:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003156:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003158:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800315c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003160:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003164:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003166:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003168:	4318      	orrs	r0, r3
 800316a:	e000      	b.n	800316e <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 800316c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800316e:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 8003170:	22ca      	movs	r2, #202	; 0xca
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
 8003174:	2253      	movs	r2, #83	; 0x53
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800317a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317e:	d02a      	beq.n	80031d6 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8003188:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800318a:	2202      	movs	r2, #2
 800318c:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800318e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003192:	d040      	beq.n	8003216 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003194:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 8003196:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003198:	69a2      	ldr	r2, [r4, #24]
 800319a:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800319c:	6862      	ldr	r2, [r4, #4]
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 80031a0:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80031a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80031a4:	f042 0202 	orr.w	r2, r2, #2
 80031a8:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80031b0:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_RTC_SetAlarm_IT+0x174>)
 80031b4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80031d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80031de:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80031e0:	2201      	movs	r2, #1
 80031e2:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80031e4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80031e8:	d00f      	beq.n	800320a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 80031ec:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80031ee:	69a2      	ldr	r2, [r4, #24]
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80031f2:	6862      	ldr	r2, [r4, #4]
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 80031f6:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80031f8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8003206:	619a      	str	r2, [r3, #24]
 8003208:	e7d3      	b.n	80031b2 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800320a:	69a3      	ldr	r3, [r4, #24]
 800320c:	69e2      	ldr	r2, [r4, #28]
 800320e:	4313      	orrs	r3, r2
 8003210:	4a05      	ldr	r2, [pc, #20]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 8003212:	6453      	str	r3, [r2, #68]	; 0x44
 8003214:	e7ed      	b.n	80031f2 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003216:	69a3      	ldr	r3, [r4, #24]
 8003218:	69e2      	ldr	r2, [r4, #28]
 800321a:	4313      	orrs	r3, r2
 800321c:	4a02      	ldr	r2, [pc, #8]	; (8003228 <HAL_RTC_SetAlarm_IT+0x170>)
 800321e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003220:	e7bc      	b.n	800319c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8003222:	2002      	movs	r0, #2
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40002800 	.word	0x40002800
 800322c:	58000800 	.word	0x58000800

08003230 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003230:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d017      	beq.n	8003268 <HAL_RTCEx_EnableBypassShadow+0x38>
 8003238:	2101      	movs	r1, #1
 800323a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8003246:	22ca      	movs	r2, #202	; 0xca
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
 800324a:	2253      	movs	r2, #83	; 0x53
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	f042 0220 	orr.w	r2, r2, #32
 8003254:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003256:	22ff      	movs	r2, #255	; 0xff
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800325a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800325e:	2300      	movs	r3, #0
 8003260:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003264:	4618      	mov	r0, r3
 8003266:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003268:	2002      	movs	r0, #2
}
 800326a:	4770      	bx	lr
 800326c:	40002800 	.word	0x40002800

08003270 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003270:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d020      	beq.n	80032ba <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8003278:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800327a:	2101      	movs	r1, #1
 800327c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003280:	2302      	movs	r3, #2
 8003282:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8003288:	22ca      	movs	r2, #202	; 0xca
 800328a:	625a      	str	r2, [r3, #36]	; 0x24
 800328c:	2253      	movs	r2, #83	; 0x53
 800328e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003296:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8003298:	4c0a      	ldr	r4, [pc, #40]	; (80032c4 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800329a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800329e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80032a2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a6:	22ff      	movs	r2, #255	; 0xff
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80032aa:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032ae:	2300      	movs	r3, #0
 80032b0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80032b4:	4618      	mov	r0, r3
}
 80032b6:	bc10      	pop	{r4}
 80032b8:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80032ba:	2002      	movs	r0, #2
}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40002800 	.word	0x40002800
 80032c4:	58000800 	.word	0x58000800

080032c8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80032c8:	b510      	push	{r4, lr}
 80032ca:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80032cc:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032d4:	d103      	bne.n	80032de <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80032dc:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80032de:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80032e0:	2240      	movs	r2, #64	; 0x40
 80032e2:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80032e4:	f7fd fc94 	bl	8000c10 <HAL_RTCEx_SSRUEventCallback>
 80032e8:	e7f5      	b.n	80032d6 <HAL_RTCEx_SSRUIRQHandler+0xe>
 80032ea:	bf00      	nop
 80032ec:	40002800 	.word	0x40002800

080032f0 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80032f0:	4770      	bx	lr

080032f2 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80032f2:	0089      	lsls	r1, r1, #2
 80032f4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80032f8:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80032fc:	600a      	str	r2, [r1, #0]
}
 80032fe:	4770      	bx	lr

08003300 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8003300:	0089      	lsls	r1, r1, #2
 8003302:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003306:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800330a:	6808      	ldr	r0, [r1, #0]
}
 800330c:	4770      	bx	lr
	...

08003310 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <SUBGHZSPI_Init+0x20>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003318:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800331a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800331e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003320:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003324:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332c:	601a      	str	r2, [r3, #0]
}
 800332e:	4770      	bx	lr
 8003330:	58010000 	.word	0x58010000

08003334 <HAL_SUBGHZ_Init>:
{
 8003334:	b530      	push	{r4, r5, lr}
 8003336:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8003338:	2800      	cmp	r0, #0
 800333a:	d058      	beq.n	80033ee <HAL_SUBGHZ_Init+0xba>
 800333c:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 800333e:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003340:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8003344:	b10b      	cbz	r3, 800334a <HAL_SUBGHZ_Init+0x16>
 8003346:	2d03      	cmp	r5, #3
 8003348:	d10b      	bne.n	8003362 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 800334a:	2300      	movs	r3, #0
 800334c:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800334e:	4620      	mov	r0, r4
 8003350:	f7fd fa5e 	bl	8000810 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003354:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <HAL_SUBGHZ_Init+0xc0>)
 8003356:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800335a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800335e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003362:	b185      	cbz	r5, 8003386 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_SUBGHZ_Init+0xc4>)
 8003366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336a:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 800336c:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	f7ff ffce 	bl	8003310 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003374:	2301      	movs	r3, #1
 8003376:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003378:	2300      	movs	r3, #0
 800337a:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800337c:	2301      	movs	r3, #1
 800337e:	71a3      	strb	r3, [r4, #6]
}
 8003380:	4628      	mov	r0, r5
 8003382:	b003      	add	sp, #12
 8003384:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003386:	2302      	movs	r3, #2
 8003388:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800338a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800338e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003392:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_SUBGHZ_Init+0xc8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80033a2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80033a6:	2264      	movs	r2, #100	; 0x64
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80033ae:	9b01      	ldr	r3, [sp, #4]
 80033b0:	b1d3      	cbz	r3, 80033e8 <HAL_SUBGHZ_Init+0xb4>
      count--;
 80033b2:	9b01      	ldr	r3, [sp, #4]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80033c4:	d1f3      	bne.n	80033ae <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_SUBGHZ_Init+0xc4>)
 80033c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80033cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033da:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80033dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e0:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80033e2:	2d00      	cmp	r5, #0
 80033e4:	d1ca      	bne.n	800337c <HAL_SUBGHZ_Init+0x48>
 80033e6:	e7c2      	b.n	800336e <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80033e8:	2501      	movs	r5, #1
 80033ea:	60a5      	str	r5, [r4, #8]
        break;
 80033ec:	e7eb      	b.n	80033c6 <HAL_SUBGHZ_Init+0x92>
    return status;
 80033ee:	2501      	movs	r5, #1
 80033f0:	e7c6      	b.n	8003380 <HAL_SUBGHZ_Init+0x4c>
 80033f2:	bf00      	nop
 80033f4:	58000800 	.word	0x58000800
 80033f8:	58000400 	.word	0x58000400
 80033fc:	20000004 	.word	0x20000004

08003400 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003400:	b082      	sub	sp, #8
 8003402:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <SUBGHZSPI_Transmit+0x70>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800340c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003410:	2064      	movs	r0, #100	; 0x64
 8003412:	fb00 f303 	mul.w	r3, r0, r3
 8003416:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003418:	9b01      	ldr	r3, [sp, #4]
 800341a:	b14b      	cbz	r3, 8003430 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800341c:	9b01      	ldr	r3, [sp, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <SUBGHZSPI_Transmit+0x74>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f013 0f02 	tst.w	r3, #2
 800342a:	d0f5      	beq.n	8003418 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2000      	movs	r0, #0
 800342e:	e001      	b.n	8003434 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003430:	2001      	movs	r0, #1
 8003432:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <SUBGHZSPI_Transmit+0x74>)
 8003436:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003438:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <SUBGHZSPI_Transmit+0x70>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003440:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003444:	2164      	movs	r1, #100	; 0x64
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800344c:	9b01      	ldr	r3, [sp, #4]
 800344e:	b143      	cbz	r3, 8003462 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003450:	9b01      	ldr	r3, [sp, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <SUBGHZSPI_Transmit+0x74>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f013 0f01 	tst.w	r3, #1
 800345e:	d0f5      	beq.n	800344c <SUBGHZSPI_Transmit+0x4c>
 8003460:	e001      	b.n	8003466 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003462:	2001      	movs	r0, #1
 8003464:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003466:	4b03      	ldr	r3, [pc, #12]	; (8003474 <SUBGHZSPI_Transmit+0x74>)
 8003468:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800346a:	b002      	add	sp, #8
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000004 	.word	0x20000004
 8003474:	58010000 	.word	0x58010000

08003478 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003478:	b082      	sub	sp, #8
 800347a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <SUBGHZSPI_Receive+0x78>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003484:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003488:	2064      	movs	r0, #100	; 0x64
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003490:	9b01      	ldr	r3, [sp, #4]
 8003492:	b14b      	cbz	r3, 80034a8 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003494:	9b01      	ldr	r3, [sp, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <SUBGHZSPI_Receive+0x7c>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f013 0f02 	tst.w	r3, #2
 80034a2:	d0f5      	beq.n	8003490 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2000      	movs	r0, #0
 80034a6:	e001      	b.n	80034ac <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80034a8:	2001      	movs	r0, #1
 80034aa:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <SUBGHZSPI_Receive+0x7c>)
 80034ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80034b2:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <SUBGHZSPI_Receive+0x78>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80034be:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80034c2:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80034c6:	fb0c f303 	mul.w	r3, ip, r3
 80034ca:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80034cc:	9b01      	ldr	r3, [sp, #4]
 80034ce:	b143      	cbz	r3, 80034e2 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80034d0:	9b01      	ldr	r3, [sp, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80034d6:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <SUBGHZSPI_Receive+0x7c>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f013 0f01 	tst.w	r3, #1
 80034de:	d0f5      	beq.n	80034cc <SUBGHZSPI_Receive+0x54>
 80034e0:	e001      	b.n	80034e6 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80034e2:	2001      	movs	r0, #1
 80034e4:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80034e6:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <SUBGHZSPI_Receive+0x7c>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	700b      	strb	r3, [r1, #0]

  return status;
}
 80034ec:	b002      	add	sp, #8
 80034ee:	4770      	bx	lr
 80034f0:	20000004 	.word	0x20000004
 80034f4:	58010000 	.word	0x58010000

080034f8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80034f8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <SUBGHZ_WaitOnBusy+0x50>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003502:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8003506:	2264      	movs	r2, #100	; 0x64
 8003508:	fb02 f303 	mul.w	r3, r2, r3
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	e006      	b.n	800351e <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003510:	2302      	movs	r3, #2
 8003512:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8003514:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8003516:	b002      	add	sp, #8
 8003518:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800351a:	4213      	tst	r3, r2
 800351c:	d012      	beq.n	8003544 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <SUBGHZ_WaitOnBusy+0x54>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f013 0304 	ands.w	r3, r3, #4
 8003526:	d000      	beq.n	800352a <SUBGHZ_WaitOnBusy+0x32>
 8003528:	2301      	movs	r3, #1
    if (count == 0U)
 800352a:	9a01      	ldr	r2, [sp, #4]
 800352c:	2a00      	cmp	r2, #0
 800352e:	d0ef      	beq.n	8003510 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8003530:	9a01      	ldr	r2, [sp, #4]
 8003532:	3a01      	subs	r2, #1
 8003534:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003536:	4a05      	ldr	r2, [pc, #20]	; (800354c <SUBGHZ_WaitOnBusy+0x54>)
 8003538:	6952      	ldr	r2, [r2, #20]
 800353a:	f012 0202 	ands.w	r2, r2, #2
 800353e:	d0ec      	beq.n	800351a <SUBGHZ_WaitOnBusy+0x22>
 8003540:	2201      	movs	r2, #1
 8003542:	e7ea      	b.n	800351a <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8003544:	2000      	movs	r0, #0
 8003546:	e7e6      	b.n	8003516 <SUBGHZ_WaitOnBusy+0x1e>
 8003548:	20000004 	.word	0x20000004
 800354c:	58000400 	.word	0x58000400

08003550 <SUBGHZ_CheckDeviceReady>:
{
 8003550:	b500      	push	{lr}
 8003552:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003554:	7903      	ldrb	r3, [r0, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d004      	beq.n	8003564 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800355a:	f7ff ffcd 	bl	80034f8 <SUBGHZ_WaitOnBusy>
}
 800355e:	b003      	add	sp, #12
 8003560:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003564:	4b0d      	ldr	r3, [pc, #52]	; (800359c <SUBGHZ_CheckDeviceReady+0x4c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800356c:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8003570:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003572:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <SUBGHZ_CheckDeviceReady+0x50>)
 8003574:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8003580:	9b01      	ldr	r3, [sp, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f9      	bne.n	8003580 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <SUBGHZ_CheckDeviceReady+0x50>)
 800358e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800359a:	e7de      	b.n	800355a <SUBGHZ_CheckDeviceReady+0xa>
 800359c:	20000004 	.word	0x20000004
 80035a0:	58000400 	.word	0x58000400

080035a4 <HAL_SUBGHZ_WriteRegisters>:
{
 80035a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80035aa:	7980      	ldrb	r0, [r0, #6]
 80035ac:	fa5f f880 	uxtb.w	r8, r0
 80035b0:	f1b8 0f01 	cmp.w	r8, #1
 80035b4:	d13e      	bne.n	8003634 <HAL_SUBGHZ_WriteRegisters+0x90>
 80035b6:	460c      	mov	r4, r1
 80035b8:	4617      	mov	r7, r2
 80035ba:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80035bc:	796b      	ldrb	r3, [r5, #5]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d03b      	beq.n	800363a <HAL_SUBGHZ_WriteRegisters+0x96>
 80035c2:	2301      	movs	r3, #1
 80035c4:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80035c6:	2302      	movs	r3, #2
 80035c8:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80035ca:	4628      	mov	r0, r5
 80035cc:	f7ff ffc0 	bl	8003550 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80035d0:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80035d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80035de:	210d      	movs	r1, #13
 80035e0:	4628      	mov	r0, r5
 80035e2:	f7ff ff0d 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80035e6:	0a21      	lsrs	r1, r4, #8
 80035e8:	4628      	mov	r0, r5
 80035ea:	f7ff ff09 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80035ee:	b2e1      	uxtb	r1, r4
 80035f0:	4628      	mov	r0, r5
 80035f2:	f7ff ff05 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80035f6:	2400      	movs	r4, #0
 80035f8:	e005      	b.n	8003606 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80035fa:	5d39      	ldrb	r1, [r7, r4]
 80035fc:	4628      	mov	r0, r5
 80035fe:	f7ff feff 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003602:	3401      	adds	r4, #1
 8003604:	b2a4      	uxth	r4, r4
 8003606:	42b4      	cmp	r4, r6
 8003608:	d3f7      	bcc.n	80035fa <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800360a:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800360c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003618:	4628      	mov	r0, r5
 800361a:	f7ff ff6d 	bl	80034f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800361e:	68ab      	ldr	r3, [r5, #8]
 8003620:	b90b      	cbnz	r3, 8003626 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8003622:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003626:	2301      	movs	r3, #1
 8003628:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800362a:	2300      	movs	r3, #0
 800362c:	716b      	strb	r3, [r5, #5]
}
 800362e:	4640      	mov	r0, r8
 8003630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003634:	f04f 0802 	mov.w	r8, #2
 8003638:	e7f9      	b.n	800362e <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800363a:	f04f 0802 	mov.w	r8, #2
 800363e:	e7f6      	b.n	800362e <HAL_SUBGHZ_WriteRegisters+0x8a>
 8003640:	58000400 	.word	0x58000400

08003644 <HAL_SUBGHZ_ReadRegisters>:
{
 8003644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003648:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800364a:	7980      	ldrb	r0, [r0, #6]
 800364c:	fa5f f880 	uxtb.w	r8, r0
 8003650:	f1b8 0f01 	cmp.w	r8, #1
 8003654:	d141      	bne.n	80036da <HAL_SUBGHZ_ReadRegisters+0x96>
 8003656:	460c      	mov	r4, r1
 8003658:	4615      	mov	r5, r2
 800365a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800365c:	7973      	ldrb	r3, [r6, #5]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d03e      	beq.n	80036e0 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8003662:	2301      	movs	r3, #1
 8003664:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003666:	4630      	mov	r0, r6
 8003668:	f7ff ff72 	bl	8003550 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800366c:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800366e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003672:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800367a:	211d      	movs	r1, #29
 800367c:	4630      	mov	r0, r6
 800367e:	f7ff febf 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003682:	0a21      	lsrs	r1, r4, #8
 8003684:	4630      	mov	r0, r6
 8003686:	f7ff febb 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800368a:	b2e1      	uxtb	r1, r4
 800368c:	4630      	mov	r0, r6
 800368e:	f7ff feb7 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003692:	2100      	movs	r1, #0
 8003694:	4630      	mov	r0, r6
 8003696:	f7ff feb3 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800369a:	2400      	movs	r4, #0
 800369c:	e006      	b.n	80036ac <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800369e:	4629      	mov	r1, r5
 80036a0:	4630      	mov	r0, r6
 80036a2:	f7ff fee9 	bl	8003478 <SUBGHZSPI_Receive>
      pData++;
 80036a6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80036a8:	3401      	adds	r4, #1
 80036aa:	b2a4      	uxth	r4, r4
 80036ac:	42bc      	cmp	r4, r7
 80036ae:	d3f6      	bcc.n	800369e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80036b0:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80036b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80036b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80036be:	4630      	mov	r0, r6
 80036c0:	f7ff ff1a 	bl	80034f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80036c4:	68b3      	ldr	r3, [r6, #8]
 80036c6:	b90b      	cbnz	r3, 80036cc <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80036c8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80036cc:	2301      	movs	r3, #1
 80036ce:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80036d0:	2300      	movs	r3, #0
 80036d2:	7173      	strb	r3, [r6, #5]
}
 80036d4:	4640      	mov	r0, r8
 80036d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80036da:	f04f 0802 	mov.w	r8, #2
 80036de:	e7f9      	b.n	80036d4 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80036e0:	f04f 0802 	mov.w	r8, #2
 80036e4:	e7f6      	b.n	80036d4 <HAL_SUBGHZ_ReadRegisters+0x90>
 80036e6:	bf00      	nop
 80036e8:	58000400 	.word	0x58000400

080036ec <HAL_SUBGHZ_ExecSetCmd>:
{
 80036ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80036f2:	7980      	ldrb	r0, [r0, #6]
 80036f4:	fa5f f980 	uxtb.w	r9, r0
 80036f8:	f1b9 0f01 	cmp.w	r9, #1
 80036fc:	d143      	bne.n	8003786 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80036fe:	4688      	mov	r8, r1
 8003700:	4617      	mov	r7, r2
 8003702:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003704:	796b      	ldrb	r3, [r5, #5]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d040      	beq.n	800378c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800370a:	2301      	movs	r3, #1
 800370c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800370e:	4628      	mov	r0, r5
 8003710:	f7ff ff1e 	bl	8003550 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003714:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003718:	d005      	beq.n	8003726 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800371a:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800371e:	d002      	beq.n	8003726 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	712b      	strb	r3, [r5, #4]
 8003724:	e001      	b.n	800372a <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003726:	2301      	movs	r3, #1
 8003728:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800372a:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800372c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003730:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003738:	4641      	mov	r1, r8
 800373a:	4628      	mov	r0, r5
 800373c:	f7ff fe60 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003740:	2400      	movs	r4, #0
 8003742:	e005      	b.n	8003750 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003744:	5d39      	ldrb	r1, [r7, r4]
 8003746:	4628      	mov	r0, r5
 8003748:	f7ff fe5a 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800374c:	3401      	adds	r4, #1
 800374e:	b2a4      	uxth	r4, r4
 8003750:	42b4      	cmp	r4, r6
 8003752:	d3f7      	bcc.n	8003744 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003754:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003756:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800375a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8003762:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003766:	d10a      	bne.n	800377e <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003768:	68ab      	ldr	r3, [r5, #8]
 800376a:	b90b      	cbnz	r3, 8003770 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 800376c:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003770:	2301      	movs	r3, #1
 8003772:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003774:	2300      	movs	r3, #0
 8003776:	716b      	strb	r3, [r5, #5]
}
 8003778:	4648      	mov	r0, r9
 800377a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800377e:	4628      	mov	r0, r5
 8003780:	f7ff feba 	bl	80034f8 <SUBGHZ_WaitOnBusy>
 8003784:	e7f0      	b.n	8003768 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8003786:	f04f 0902 	mov.w	r9, #2
 800378a:	e7f5      	b.n	8003778 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 800378c:	f04f 0902 	mov.w	r9, #2
 8003790:	e7f2      	b.n	8003778 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8003792:	bf00      	nop
 8003794:	58000400 	.word	0x58000400

08003798 <HAL_SUBGHZ_ExecGetCmd>:
{
 8003798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800379e:	7980      	ldrb	r0, [r0, #6]
 80037a0:	fa5f f880 	uxtb.w	r8, r0
 80037a4:	f1b8 0f01 	cmp.w	r8, #1
 80037a8:	d139      	bne.n	800381e <HAL_SUBGHZ_ExecGetCmd+0x86>
 80037aa:	460c      	mov	r4, r1
 80037ac:	4615      	mov	r5, r2
 80037ae:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80037b0:	7973      	ldrb	r3, [r6, #5]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d036      	beq.n	8003824 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80037b6:	2301      	movs	r3, #1
 80037b8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80037ba:	4630      	mov	r0, r6
 80037bc:	f7ff fec8 	bl	8003550 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80037c0:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80037c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80037c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80037ce:	4621      	mov	r1, r4
 80037d0:	4630      	mov	r0, r6
 80037d2:	f7ff fe15 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80037d6:	2100      	movs	r1, #0
 80037d8:	4630      	mov	r0, r6
 80037da:	f7ff fe11 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80037de:	2400      	movs	r4, #0
 80037e0:	e006      	b.n	80037f0 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80037e2:	4629      	mov	r1, r5
 80037e4:	4630      	mov	r0, r6
 80037e6:	f7ff fe47 	bl	8003478 <SUBGHZSPI_Receive>
      pData++;
 80037ea:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80037ec:	3401      	adds	r4, #1
 80037ee:	b2a4      	uxth	r4, r4
 80037f0:	42bc      	cmp	r4, r7
 80037f2:	d3f6      	bcc.n	80037e2 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80037f4:	4a0d      	ldr	r2, [pc, #52]	; (800382c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80037f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003802:	4630      	mov	r0, r6
 8003804:	f7ff fe78 	bl	80034f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003808:	68b3      	ldr	r3, [r6, #8]
 800380a:	b90b      	cbnz	r3, 8003810 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 800380c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003810:	2301      	movs	r3, #1
 8003812:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003814:	2300      	movs	r3, #0
 8003816:	7173      	strb	r3, [r6, #5]
}
 8003818:	4640      	mov	r0, r8
 800381a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800381e:	f04f 0802 	mov.w	r8, #2
 8003822:	e7f9      	b.n	8003818 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8003824:	f04f 0802 	mov.w	r8, #2
 8003828:	e7f6      	b.n	8003818 <HAL_SUBGHZ_ExecGetCmd+0x80>
 800382a:	bf00      	nop
 800382c:	58000400 	.word	0x58000400

08003830 <HAL_SUBGHZ_IRQHandler>:
{
 8003830:	b530      	push	{r4, r5, lr}
 8003832:	b083      	sub	sp, #12
 8003834:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8003836:	2300      	movs	r3, #0
 8003838:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800383c:	2302      	movs	r3, #2
 800383e:	aa01      	add	r2, sp, #4
 8003840:	2112      	movs	r1, #18
 8003842:	f7ff ffa9 	bl	8003798 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003846:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800384a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800384e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003852:	2302      	movs	r3, #2
 8003854:	aa01      	add	r2, sp, #4
 8003856:	4619      	mov	r1, r3
 8003858:	4628      	mov	r0, r5
 800385a:	f7ff ff47 	bl	80036ec <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800385e:	f014 0f01 	tst.w	r4, #1
 8003862:	d123      	bne.n	80038ac <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003864:	f014 0f02 	tst.w	r4, #2
 8003868:	d124      	bne.n	80038b4 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800386a:	f014 0f04 	tst.w	r4, #4
 800386e:	d125      	bne.n	80038bc <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003870:	f014 0f08 	tst.w	r4, #8
 8003874:	d126      	bne.n	80038c4 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003876:	f014 0f10 	tst.w	r4, #16
 800387a:	d127      	bne.n	80038cc <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800387c:	f014 0f20 	tst.w	r4, #32
 8003880:	d128      	bne.n	80038d4 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003882:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003886:	d129      	bne.n	80038dc <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003888:	f014 0f80 	tst.w	r4, #128	; 0x80
 800388c:	d006      	beq.n	800389c <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800388e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003892:	d027      	beq.n	80038e4 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003894:	2101      	movs	r1, #1
 8003896:	4628      	mov	r0, r5
 8003898:	f003 fb84 	bl	8006fa4 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800389c:	f414 7f00 	tst.w	r4, #512	; 0x200
 80038a0:	d125      	bne.n	80038ee <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80038a2:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 80038a6:	d126      	bne.n	80038f6 <HAL_SUBGHZ_IRQHandler+0xc6>
}
 80038a8:	b003      	add	sp, #12
 80038aa:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80038ac:	4628      	mov	r0, r5
 80038ae:	f003 fb61 	bl	8006f74 <HAL_SUBGHZ_TxCpltCallback>
 80038b2:	e7d7      	b.n	8003864 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80038b4:	4628      	mov	r0, r5
 80038b6:	f003 fb65 	bl	8006f84 <HAL_SUBGHZ_RxCpltCallback>
 80038ba:	e7d6      	b.n	800386a <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80038bc:	4628      	mov	r0, r5
 80038be:	f003 fb95 	bl	8006fec <HAL_SUBGHZ_PreambleDetectedCallback>
 80038c2:	e7d5      	b.n	8003870 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80038c4:	4628      	mov	r0, r5
 80038c6:	f003 fb99 	bl	8006ffc <HAL_SUBGHZ_SyncWordValidCallback>
 80038ca:	e7d4      	b.n	8003876 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80038cc:	4628      	mov	r0, r5
 80038ce:	f003 fb9d 	bl	800700c <HAL_SUBGHZ_HeaderValidCallback>
 80038d2:	e7d3      	b.n	800387c <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80038d4:	4628      	mov	r0, r5
 80038d6:	f003 fb81 	bl	8006fdc <HAL_SUBGHZ_HeaderErrorCallback>
 80038da:	e7d2      	b.n	8003882 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80038dc:	4628      	mov	r0, r5
 80038de:	f003 fb59 	bl	8006f94 <HAL_SUBGHZ_CRCErrorCallback>
 80038e2:	e7d1      	b.n	8003888 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80038e4:	2100      	movs	r1, #0
 80038e6:	4628      	mov	r0, r5
 80038e8:	f003 fb5c 	bl	8006fa4 <HAL_SUBGHZ_CADStatusCallback>
 80038ec:	e7d6      	b.n	800389c <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80038ee:	4628      	mov	r0, r5
 80038f0:	f003 fb6a 	bl	8006fc8 <HAL_SUBGHZ_RxTxTimeoutCallback>
 80038f4:	e7d5      	b.n	80038a2 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80038f6:	4628      	mov	r0, r5
 80038f8:	f003 fb90 	bl	800701c <HAL_SUBGHZ_LrFhssHopCallback>
}
 80038fc:	e7d4      	b.n	80038a8 <HAL_SUBGHZ_IRQHandler+0x78>
	...

08003900 <HAL_SUBGHZ_WriteBuffer>:
{
 8003900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003904:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003906:	7980      	ldrb	r0, [r0, #6]
 8003908:	fa5f f880 	uxtb.w	r8, r0
 800390c:	f1b8 0f01 	cmp.w	r8, #1
 8003910:	d138      	bne.n	8003984 <HAL_SUBGHZ_WriteBuffer+0x84>
 8003912:	460c      	mov	r4, r1
 8003914:	4617      	mov	r7, r2
 8003916:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003918:	796b      	ldrb	r3, [r5, #5]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d035      	beq.n	800398a <HAL_SUBGHZ_WriteBuffer+0x8a>
 800391e:	2301      	movs	r3, #1
 8003920:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003922:	4628      	mov	r0, r5
 8003924:	f7ff fe14 	bl	8003550 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003928:	4a19      	ldr	r2, [pc, #100]	; (8003990 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800392a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800392e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003936:	210e      	movs	r1, #14
 8003938:	4628      	mov	r0, r5
 800393a:	f7ff fd61 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800393e:	4621      	mov	r1, r4
 8003940:	4628      	mov	r0, r5
 8003942:	f7ff fd5d 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003946:	2400      	movs	r4, #0
 8003948:	e005      	b.n	8003956 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800394a:	5d39      	ldrb	r1, [r7, r4]
 800394c:	4628      	mov	r0, r5
 800394e:	f7ff fd57 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003952:	3401      	adds	r4, #1
 8003954:	b2a4      	uxth	r4, r4
 8003956:	42b4      	cmp	r4, r6
 8003958:	d3f7      	bcc.n	800394a <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800395a:	4a0d      	ldr	r2, [pc, #52]	; (8003990 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800395c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003968:	4628      	mov	r0, r5
 800396a:	f7ff fdc5 	bl	80034f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800396e:	68ab      	ldr	r3, [r5, #8]
 8003970:	b90b      	cbnz	r3, 8003976 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8003972:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003976:	2301      	movs	r3, #1
 8003978:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800397a:	2300      	movs	r3, #0
 800397c:	716b      	strb	r3, [r5, #5]
}
 800397e:	4640      	mov	r0, r8
 8003980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003984:	f04f 0802 	mov.w	r8, #2
 8003988:	e7f9      	b.n	800397e <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800398a:	f04f 0802 	mov.w	r8, #2
 800398e:	e7f6      	b.n	800397e <HAL_SUBGHZ_WriteBuffer+0x7e>
 8003990:	58000400 	.word	0x58000400

08003994 <HAL_SUBGHZ_ReadBuffer>:
{
 8003994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003998:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800399a:	7980      	ldrb	r0, [r0, #6]
 800399c:	fa5f f880 	uxtb.w	r8, r0
 80039a0:	f1b8 0f01 	cmp.w	r8, #1
 80039a4:	d13d      	bne.n	8003a22 <HAL_SUBGHZ_ReadBuffer+0x8e>
 80039a6:	460c      	mov	r4, r1
 80039a8:	4615      	mov	r5, r2
 80039aa:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80039ac:	7973      	ldrb	r3, [r6, #5]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d03a      	beq.n	8003a28 <HAL_SUBGHZ_ReadBuffer+0x94>
 80039b2:	2301      	movs	r3, #1
 80039b4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80039b6:	4630      	mov	r0, r6
 80039b8:	f7ff fdca 	bl	8003550 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80039be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80039c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80039ca:	211e      	movs	r1, #30
 80039cc:	4630      	mov	r0, r6
 80039ce:	f7ff fd17 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80039d2:	4621      	mov	r1, r4
 80039d4:	4630      	mov	r0, r6
 80039d6:	f7ff fd13 	bl	8003400 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80039da:	2100      	movs	r1, #0
 80039dc:	4630      	mov	r0, r6
 80039de:	f7ff fd0f 	bl	8003400 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80039e2:	2400      	movs	r4, #0
 80039e4:	e006      	b.n	80039f4 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80039e6:	4629      	mov	r1, r5
 80039e8:	4630      	mov	r0, r6
 80039ea:	f7ff fd45 	bl	8003478 <SUBGHZSPI_Receive>
      pData++;
 80039ee:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80039f0:	3401      	adds	r4, #1
 80039f2:	b2a4      	uxth	r4, r4
 80039f4:	42bc      	cmp	r4, r7
 80039f6:	d3f6      	bcc.n	80039e6 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80039fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80039fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7ff fd76 	bl	80034f8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003a0c:	68b3      	ldr	r3, [r6, #8]
 8003a0e:	b90b      	cbnz	r3, 8003a14 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8003a10:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a14:	2301      	movs	r3, #1
 8003a16:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	7173      	strb	r3, [r6, #5]
}
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003a22:	f04f 0802 	mov.w	r8, #2
 8003a26:	e7f9      	b.n	8003a1c <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8003a28:	f04f 0802 	mov.w	r8, #2
 8003a2c:	e7f6      	b.n	8003a1c <HAL_SUBGHZ_ReadBuffer+0x88>
 8003a2e:	bf00      	nop
 8003a30:	58000400 	.word	0x58000400

08003a34 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003a34:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	e852 3f00 	ldrex	r3, [r2]
 8003a3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	e842 3100 	strex	r1, r3, [r2]
 8003a42:	2900      	cmp	r1, #0
 8003a44:	d1f6      	bne.n	8003a34 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003a46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	f102 0308 	add.w	r3, r2, #8
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	3208      	adds	r2, #8
 8003a56:	e842 3100 	strex	r1, r3, [r2]
 8003a5a:	2900      	cmp	r1, #0
 8003a5c:	d1f3      	bne.n	8003a46 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a5e:	2320      	movs	r3, #32
 8003a60:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8003a64:	4770      	bx	lr

08003a66 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a66:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	e852 3f00 	ldrex	r3, [r2]
 8003a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	e842 3100 	strex	r1, r3, [r2]
 8003a74:	2900      	cmp	r1, #0
 8003a76:	d1f6      	bne.n	8003a66 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	f102 0308 	add.w	r3, r2, #8
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a86:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	3208      	adds	r2, #8
 8003a8c:	e842 3100 	strex	r1, r3, [r2]
 8003a90:	2900      	cmp	r1, #0
 8003a92:	d1f1      	bne.n	8003a78 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d006      	beq.n	8003aa8 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aa4:	6743      	str	r3, [r0, #116]	; 0x74
}
 8003aa6:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	e852 3f00 	ldrex	r3, [r2]
 8003aae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	e842 3100 	strex	r1, r3, [r2]
 8003ab6:	2900      	cmp	r1, #0
 8003ab8:	d1f6      	bne.n	8003aa8 <UART_EndRxTransfer+0x42>
 8003aba:	e7ee      	b.n	8003a9a <UART_EndRxTransfer+0x34>

08003abc <HAL_UART_Transmit_DMA>:
{
 8003abc:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003abe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003ac2:	2a20      	cmp	r2, #32
 8003ac4:	d13d      	bne.n	8003b42 <HAL_UART_Transmit_DMA+0x86>
{
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8003aca:	2900      	cmp	r1, #0
 8003acc:	d03b      	beq.n	8003b46 <HAL_UART_Transmit_DMA+0x8a>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d03b      	beq.n	8003b4a <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8003ad2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003ad4:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ad8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae2:	2221      	movs	r2, #33	; 0x21
 8003ae4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8003ae8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003aea:	b1ca      	cbz	r2, 8003b20 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003aec:	4918      	ldr	r1, [pc, #96]	; (8003b50 <HAL_UART_Transmit_DMA+0x94>)
 8003aee:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003af0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003af2:	4918      	ldr	r1, [pc, #96]	; (8003b54 <HAL_UART_Transmit_DMA+0x98>)
 8003af4:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003af6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003af8:	4917      	ldr	r1, [pc, #92]	; (8003b58 <HAL_UART_Transmit_DMA+0x9c>)
 8003afa:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8003afc:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003afe:	2100      	movs	r1, #0
 8003b00:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003b02:	6802      	ldr	r2, [r0, #0]
 8003b04:	3228      	adds	r2, #40	; 0x28
 8003b06:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003b08:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8003b0a:	f7fd ff99 	bl	8001a40 <HAL_DMA_Start_IT>
 8003b0e:	b138      	cbz	r0, 8003b20 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b10:	2310      	movs	r3, #16
 8003b12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8003b16:	2320      	movs	r3, #32
 8003b18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	e00f      	b.n	8003b40 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	2240      	movs	r2, #64	; 0x40
 8003b24:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b26:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	f102 0308 	add.w	r3, r2, #8
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	3208      	adds	r2, #8
 8003b36:	e842 3100 	strex	r1, r3, [r2]
 8003b3a:	2900      	cmp	r1, #0
 8003b3c:	d1f3      	bne.n	8003b26 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8003b3e:	2000      	movs	r0, #0
}
 8003b40:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003b42:	2002      	movs	r0, #2
}
 8003b44:	4770      	bx	lr
      return HAL_ERROR;
 8003b46:	2001      	movs	r0, #1
 8003b48:	e7fa      	b.n	8003b40 <HAL_UART_Transmit_DMA+0x84>
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	e7f8      	b.n	8003b40 <HAL_UART_Transmit_DMA+0x84>
 8003b4e:	bf00      	nop
 8003b50:	08003b5d 	.word	0x08003b5d
 8003b54:	08003bcb 	.word	0x08003bcb
 8003b58:	08003bd7 	.word	0x08003bd7

08003b5c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b508      	push	{r3, lr}
 8003b5e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b60:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f013 0f20 	tst.w	r3, #32
 8003b6a:	d118      	bne.n	8003b9e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	f102 0308 	add.w	r3, r2, #8
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	3208      	adds	r2, #8
 8003b82:	e842 3100 	strex	r1, r3, [r2]
 8003b86:	2900      	cmp	r1, #0
 8003b88:	d1f3      	bne.n	8003b72 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b8a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	e852 3f00 	ldrex	r3, [r2]
 8003b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	e842 3100 	strex	r1, r3, [r2]
 8003b98:	2900      	cmp	r1, #0
 8003b9a:	d1f6      	bne.n	8003b8a <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b9c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003b9e:	f7fd f99f 	bl	8000ee0 <HAL_UART_TxCpltCallback>
}
 8003ba2:	e7fb      	b.n	8003b9c <UART_DMATransmitCplt+0x40>

08003ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ba4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ba6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	e852 3f00 	ldrex	r3, [r2]
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	e842 3100 	strex	r1, r3, [r2]
 8003bb4:	2900      	cmp	r1, #0
 8003bb6:	d1f6      	bne.n	8003ba6 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bc2:	f7fd f98d 	bl	8000ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc6:	bd08      	pop	{r3, pc}

08003bc8 <HAL_UART_TxHalfCpltCallback>:
}
 8003bc8:	4770      	bx	lr

08003bca <UART_DMATxHalfCplt>:
{
 8003bca:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003bcc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003bce:	f7ff fffb 	bl	8003bc8 <HAL_UART_TxHalfCpltCallback>
}
 8003bd2:	bd08      	pop	{r3, pc}

08003bd4 <HAL_UART_ErrorCallback>:
}
 8003bd4:	4770      	bx	lr

08003bd6 <UART_DMAError>:
{
 8003bd6:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bd8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003bda:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003bde:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003bea:	d001      	beq.n	8003bf0 <UART_DMAError+0x1a>
 8003bec:	2a21      	cmp	r2, #33	; 0x21
 8003bee:	d010      	beq.n	8003c12 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bf8:	d001      	beq.n	8003bfe <UART_DMAError+0x28>
 8003bfa:	2d22      	cmp	r5, #34	; 0x22
 8003bfc:	d010      	beq.n	8003c20 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003bfe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003c02:	f043 0310 	orr.w	r3, r3, #16
 8003c06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7ff ffe2 	bl	8003bd4 <HAL_UART_ErrorCallback>
}
 8003c10:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff ff0b 	bl	8003a34 <UART_EndTxTransfer>
 8003c1e:	e7e7      	b.n	8003bf0 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7ff ff1d 	bl	8003a66 <UART_EndRxTransfer>
 8003c2c:	e7e7      	b.n	8003bfe <UART_DMAError+0x28>

08003c2e <UART_DMAAbortOnError>:
{
 8003c2e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c30:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003c38:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8003c3c:	f7ff ffca 	bl	8003bd4 <HAL_UART_ErrorCallback>
}
 8003c40:	bd08      	pop	{r3, pc}

08003c42 <HAL_UARTEx_RxEventCallback>:
}
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_IRQHandler>:
{
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c48:	6801      	ldr	r1, [r0, #0]
 8003c4a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c4c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c4e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c50:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8003c54:	401a      	ands	r2, r3
 8003c56:	d108      	bne.n	8003c6a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c58:	f013 0f20 	tst.w	r3, #32
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c5e:	f010 0f20 	tst.w	r0, #32
 8003c62:	d134      	bne.n	8003cce <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c64:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8003c68:	d131      	bne.n	8003cce <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8003c6a:	b12a      	cbz	r2, 8003c78 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c6c:	4a99      	ldr	r2, [pc, #612]	; (8003ed4 <HAL_UART_IRQHandler+0x290>)
 8003c6e:	402a      	ands	r2, r5
 8003c70:	d133      	bne.n	8003cda <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c72:	4e99      	ldr	r6, [pc, #612]	; (8003ed8 <HAL_UART_IRQHandler+0x294>)
 8003c74:	4230      	tst	r0, r6
 8003c76:	d130      	bne.n	8003cda <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c78:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003c7a:	2a01      	cmp	r2, #1
 8003c7c:	f000 80c6 	beq.w	8003e0c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003c84:	d003      	beq.n	8003c8e <HAL_UART_IRQHandler+0x4a>
 8003c86:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8003c8a:	f040 8165 	bne.w	8003f58 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c92:	d007      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c94:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003c98:	f040 8165 	bne.w	8003f66 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c9c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8003ca0:	f040 8161 	bne.w	8003f66 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ca4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ca8:	d003      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x6e>
 8003caa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cae:	f040 8161 	bne.w	8003f74 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003cb2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003cb6:	d003      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x7c>
 8003cb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003cbc:	f040 815e 	bne.w	8003f7c <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003cc0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003cc4:	d002      	beq.n	8003ccc <HAL_UART_IRQHandler+0x88>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	f2c0 815c 	blt.w	8003f84 <HAL_UART_IRQHandler+0x340>
}
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8003cce:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0fb      	beq.n	8003ccc <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4798      	blx	r3
      return;
 8003cd8:	e7f8      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cda:	f013 0f01 	tst.w	r3, #1
 8003cde:	d009      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xb0>
 8003ce0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003ce4:	d006      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ce6:	2601      	movs	r6, #1
 8003ce8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cea:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003cee:	4331      	orrs	r1, r6
 8003cf0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf4:	f013 0f02 	tst.w	r3, #2
 8003cf8:	d00b      	beq.n	8003d12 <HAL_UART_IRQHandler+0xce>
 8003cfa:	f015 0f01 	tst.w	r5, #1
 8003cfe:	d008      	beq.n	8003d12 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d00:	6821      	ldr	r1, [r4, #0]
 8003d02:	2602      	movs	r6, #2
 8003d04:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d06:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003d0a:	f041 0104 	orr.w	r1, r1, #4
 8003d0e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d12:	f013 0f04 	tst.w	r3, #4
 8003d16:	d00b      	beq.n	8003d30 <HAL_UART_IRQHandler+0xec>
 8003d18:	f015 0f01 	tst.w	r5, #1
 8003d1c:	d008      	beq.n	8003d30 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d1e:	6821      	ldr	r1, [r4, #0]
 8003d20:	2604      	movs	r6, #4
 8003d22:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d24:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003d28:	f041 0102 	orr.w	r1, r1, #2
 8003d2c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d30:	f013 0f08 	tst.w	r3, #8
 8003d34:	d00b      	beq.n	8003d4e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d36:	f010 0f20 	tst.w	r0, #32
 8003d3a:	d100      	bne.n	8003d3e <HAL_UART_IRQHandler+0xfa>
 8003d3c:	b13a      	cbz	r2, 8003d4e <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	2108      	movs	r1, #8
 8003d42:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d44:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003d52:	d00c      	beq.n	8003d6e <HAL_UART_IRQHandler+0x12a>
 8003d54:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8003d58:	d009      	beq.n	8003d6e <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d60:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d62:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003d66:	f042 0220 	orr.w	r2, r2, #32
 8003d6a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d6e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	d0aa      	beq.n	8003ccc <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d76:	f013 0f20 	tst.w	r3, #32
 8003d7a:	d009      	beq.n	8003d90 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d7c:	f010 0f20 	tst.w	r0, #32
 8003d80:	d102      	bne.n	8003d88 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d82:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8003d86:	d003      	beq.n	8003d90 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8003d88:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003d8a:	b10b      	cbz	r3, 8003d90 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003d90:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d9c:	d102      	bne.n	8003da4 <HAL_UART_IRQHandler+0x160>
 8003d9e:	f012 0f28 	tst.w	r2, #40	; 0x28
 8003da2:	d02c      	beq.n	8003dfe <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8003da4:	4620      	mov	r0, r4
 8003da6:	f7ff fe5e 	bl	8003a66 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003db2:	d020      	beq.n	8003df6 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	f102 0308 	add.w	r3, r2, #8
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	3208      	adds	r2, #8
 8003dc4:	e842 3100 	strex	r1, r3, [r2]
 8003dc8:	2900      	cmp	r1, #0
 8003dca:	d1f3      	bne.n	8003db4 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8003dcc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003dd0:	b16b      	cbz	r3, 8003dee <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dd2:	4a42      	ldr	r2, [pc, #264]	; (8003edc <HAL_UART_IRQHandler+0x298>)
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dd6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003dda:	f7fd feb7 	bl	8001b4c <HAL_DMA_Abort_IT>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	f43f af74 	beq.w	8003ccc <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003de4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003de8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003dea:	4798      	blx	r3
 8003dec:	e76e      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8003dee:	4620      	mov	r0, r4
 8003df0:	f7ff fef0 	bl	8003bd4 <HAL_UART_ErrorCallback>
 8003df4:	e76a      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8003df6:	4620      	mov	r0, r4
 8003df8:	f7ff feec 	bl	8003bd4 <HAL_UART_ErrorCallback>
 8003dfc:	e766      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f7ff fee8 	bl	8003bd4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 8003e0a:	e75f      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e0c:	f013 0f10 	tst.w	r3, #16
 8003e10:	f43f af36 	beq.w	8003c80 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e14:	f010 0f10 	tst.w	r0, #16
 8003e18:	f43f af32 	beq.w	8003c80 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e28:	d05a      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e2a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f43f af49 	beq.w	8003ccc <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e3a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8003e3e:	4299      	cmp	r1, r3
 8003e40:	f67f af44 	bls.w	8003ccc <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8003e44:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e48:	6813      	ldr	r3, [r2, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f013 0f20 	tst.w	r3, #32
 8003e50:	d132      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	e852 3f00 	ldrex	r3, [r2]
 8003e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	e842 3100 	strex	r1, r3, [r2]
 8003e60:	2900      	cmp	r1, #0
 8003e62:	d1f6      	bne.n	8003e52 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	f102 0308 	add.w	r3, r2, #8
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	3208      	adds	r2, #8
 8003e74:	e842 3100 	strex	r1, r3, [r2]
 8003e78:	2900      	cmp	r1, #0
 8003e7a:	d1f3      	bne.n	8003e64 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	f102 0308 	add.w	r3, r2, #8
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	3208      	adds	r2, #8
 8003e8c:	e842 3100 	strex	r1, r3, [r2]
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d1f3      	bne.n	8003e7c <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8003e94:	2320      	movs	r3, #32
 8003e96:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	e852 3f00 	ldrex	r3, [r2]
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	e842 3100 	strex	r1, r3, [r2]
 8003eac:	2900      	cmp	r1, #0
 8003eae:	d1f6      	bne.n	8003e9e <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003eb4:	f7fd fe10 	bl	8001ad8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ebc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8003ec0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	1ac9      	subs	r1, r1, r3
 8003ec8:	b289      	uxth	r1, r1
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7ff feb9 	bl	8003c42 <HAL_UARTEx_RxEventCallback>
      return;
 8003ed0:	e6fc      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
 8003ed2:	bf00      	nop
 8003ed4:	10000001 	.word	0x10000001
 8003ed8:	04000120 	.word	0x04000120
 8003edc:	08003c2f 	.word	0x08003c2f
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8003ee4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	1ac9      	subs	r1, r1, r3
 8003eec:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003eee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f43f aee9 	beq.w	8003ccc <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8003efa:	2900      	cmp	r1, #0
 8003efc:	f43f aee6 	beq.w	8003ccc <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	e852 3f00 	ldrex	r3, [r2]
 8003f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	e842 3000 	strex	r0, r3, [r2]
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d1f6      	bne.n	8003f00 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	f102 0308 	add.w	r3, r2, #8
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	3208      	adds	r2, #8
 8003f26:	e842 3000 	strex	r0, r3, [r2]
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d1f1      	bne.n	8003f12 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f34:	2300      	movs	r3, #0
 8003f36:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8003f38:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	e852 3f00 	ldrex	r3, [r2]
 8003f40:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	e842 3000 	strex	r0, r3, [r2]
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d1f6      	bne.n	8003f3a <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f50:	4620      	mov	r0, r4
 8003f52:	f7ff fe76 	bl	8003c42 <HAL_UARTEx_RxEventCallback>
      return;
 8003f56:	e6b9      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f5c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f000 fe60 	bl	8004c24 <HAL_UARTEx_WakeupCallback>
    return;
 8003f64:	e6b2      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8003f66:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f43f aeaf 	beq.w	8003ccc <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8003f6e:	4620      	mov	r0, r4
 8003f70:	4798      	blx	r3
    return;
 8003f72:	e6ab      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8003f74:	4620      	mov	r0, r4
 8003f76:	f7ff fe15 	bl	8003ba4 <UART_EndTransmit_IT>
    return;
 8003f7a:	e6a7      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f000 fe53 	bl	8004c28 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003f82:	e6a3      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003f84:	4620      	mov	r0, r4
 8003f86:	f000 fe4e 	bl	8004c26 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003f8a:	e69f      	b.n	8003ccc <HAL_UART_IRQHandler+0x88>

08003f8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f8c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8003f8e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f92:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8003f96:	2a22      	cmp	r2, #34	; 0x22
 8003f98:	d005      	beq.n	8003fa6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f9a:	6802      	ldr	r2, [r0, #0]
 8003f9c:	6993      	ldr	r3, [r2, #24]
 8003f9e:	f043 0308 	orr.w	r3, r3, #8
 8003fa2:	6193      	str	r3, [r2, #24]
  }
}
 8003fa4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fa6:	6802      	ldr	r2, [r0, #0]
 8003fa8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003fae:	400b      	ands	r3, r1
 8003fb0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8003fb2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003fb8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8003fc6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e9      	bne.n	8003fa4 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fd0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	e852 3f00 	ldrex	r3, [r2]
 8003fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	e842 3100 	strex	r1, r3, [r2]
 8003fde:	2900      	cmp	r1, #0
 8003fe0:	d1f6      	bne.n	8003fd0 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	f102 0308 	add.w	r3, r2, #8
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	e842 3100 	strex	r1, r3, [r2]
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	d1f3      	bne.n	8003fe2 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	2320      	movs	r3, #32
 8003ffc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004004:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004006:	6803      	ldr	r3, [r0, #0]
 8004008:	4a16      	ldr	r2, [pc, #88]	; (8004064 <UART_RxISR_8BIT+0xd8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00c      	beq.n	8004028 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004014:	d008      	beq.n	8004028 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004016:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	e852 3f00 	ldrex	r3, [r2]
 800401c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	e842 3100 	strex	r1, r3, [r2]
 8004024:	2900      	cmp	r1, #0
 8004026:	d1f6      	bne.n	8004016 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800402a:	2b01      	cmp	r3, #1
 800402c:	d116      	bne.n	800405c <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	2300      	movs	r3, #0
 8004030:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	e852 3f00 	ldrex	r3, [r2]
 8004038:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	e842 3100 	strex	r1, r3, [r2]
 8004040:	2900      	cmp	r1, #0
 8004042:	d1f6      	bne.n	8004032 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004044:	6803      	ldr	r3, [r0, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	f012 0f10 	tst.w	r2, #16
 800404c:	d001      	beq.n	8004052 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800404e:	2210      	movs	r2, #16
 8004050:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004052:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8004056:	f7ff fdf4 	bl	8003c42 <HAL_UARTEx_RxEventCallback>
 800405a:	e7a3      	b.n	8003fa4 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800405c:	f7fc ff50 	bl	8000f00 <HAL_UART_RxCpltCallback>
 8004060:	e7a0      	b.n	8003fa4 <UART_RxISR_8BIT+0x18>
 8004062:	bf00      	nop
 8004064:	40008000 	.word	0x40008000

08004068 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004068:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800406a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800406e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8004072:	2b22      	cmp	r3, #34	; 0x22
 8004074:	d005      	beq.n	8004082 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004076:	6802      	ldr	r2, [r0, #0]
 8004078:	6993      	ldr	r3, [r2, #24]
 800407a:	f043 0308 	orr.w	r3, r3, #8
 800407e:	6193      	str	r3, [r2, #24]
  }
}
 8004080:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004082:	6803      	ldr	r3, [r0, #0]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004086:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8004088:	4013      	ands	r3, r2
 800408a:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800408c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800408e:	3302      	adds	r3, #2
 8004090:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8004092:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29b      	uxth	r3, r3
 800409c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80040a0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ea      	bne.n	8004080 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	e852 3f00 	ldrex	r3, [r2]
 80040b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	e842 3100 	strex	r1, r3, [r2]
 80040b8:	2900      	cmp	r1, #0
 80040ba:	d1f6      	bne.n	80040aa <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	f102 0308 	add.w	r3, r2, #8
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	3208      	adds	r2, #8
 80040cc:	e842 3100 	strex	r1, r3, [r2]
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d1f3      	bne.n	80040bc <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80040d4:	2320      	movs	r3, #32
 80040d6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040de:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040e0:	6803      	ldr	r3, [r0, #0]
 80040e2:	4a16      	ldr	r2, [pc, #88]	; (800413c <UART_RxISR_16BIT+0xd4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00c      	beq.n	8004102 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80040ee:	d008      	beq.n	8004102 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	e852 3f00 	ldrex	r3, [r2]
 80040f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	e842 3100 	strex	r1, r3, [r2]
 80040fe:	2900      	cmp	r1, #0
 8004100:	d1f6      	bne.n	80040f0 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004102:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d116      	bne.n	8004136 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004108:	2300      	movs	r3, #0
 800410a:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	e852 3f00 	ldrex	r3, [r2]
 8004112:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	e842 3100 	strex	r1, r3, [r2]
 800411a:	2900      	cmp	r1, #0
 800411c:	d1f6      	bne.n	800410c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800411e:	6803      	ldr	r3, [r0, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	f012 0f10 	tst.w	r2, #16
 8004126:	d001      	beq.n	800412c <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004128:	2210      	movs	r2, #16
 800412a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8004130:	f7ff fd87 	bl	8003c42 <HAL_UARTEx_RxEventCallback>
 8004134:	e7a4      	b.n	8004080 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8004136:	f7fc fee3 	bl	8000f00 <HAL_UART_RxCpltCallback>
 800413a:	e7a1      	b.n	8004080 <UART_RxISR_16BIT+0x18>
 800413c:	40008000 	.word	0x40008000

08004140 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8004144:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004148:	6803      	ldr	r3, [r0, #0]
 800414a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800414c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004150:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004154:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8004158:	2a22      	cmp	r2, #34	; 0x22
 800415a:	d005      	beq.n	8004168 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	f042 0208 	orr.w	r2, r2, #8
 8004162:	619a      	str	r2, [r3, #24]
  }
}
 8004164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004168:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800416a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800416e:	e008      	b.n	8004182 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004170:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004174:	2b00      	cmp	r3, #0
 8004176:	d14c      	bne.n	8004212 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8004178:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d04e      	beq.n	8004220 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004182:	2f00      	cmp	r7, #0
 8004184:	f000 809a 	beq.w	80042bc <UART_RxISR_8BIT_FIFOEN+0x17c>
 8004188:	f015 0f20 	tst.w	r5, #32
 800418c:	f000 8096 	beq.w	80042bc <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004194:	b2f3      	uxtb	r3, r6
 8004196:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004198:	400b      	ands	r3, r1
 800419a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800419c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800419e:	3301      	adds	r3, #1
 80041a0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80041a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041b4:	f015 0f07 	tst.w	r5, #7
 80041b8:	d0de      	beq.n	8004178 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041ba:	f015 0f01 	tst.w	r5, #1
 80041be:	d009      	beq.n	80041d4 <UART_RxISR_8BIT_FIFOEN+0x94>
 80041c0:	f419 7f80 	tst.w	r9, #256	; 0x100
 80041c4:	d006      	beq.n	80041d4 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041c6:	2201      	movs	r2, #1
 80041c8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d4:	f015 0f02 	tst.w	r5, #2
 80041d8:	d00b      	beq.n	80041f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80041da:	f018 0f01 	tst.w	r8, #1
 80041de:	d008      	beq.n	80041f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	2202      	movs	r2, #2
 80041e4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f2:	f015 0f04 	tst.w	r5, #4
 80041f6:	d0bb      	beq.n	8004170 <UART_RxISR_8BIT_FIFOEN+0x30>
 80041f8:	f018 0f01 	tst.w	r8, #1
 80041fc:	d0b8      	beq.n	8004170 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	2204      	movs	r2, #4
 8004202:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004204:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004208:	f043 0302 	orr.w	r3, r3, #2
 800420c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004210:	e7ae      	b.n	8004170 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004212:	4620      	mov	r0, r4
 8004214:	f7ff fcde 	bl	8003bd4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800421e:	e7ab      	b.n	8004178 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004220:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	e852 3f00 	ldrex	r3, [r2]
 8004226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	e842 3100 	strex	r1, r3, [r2]
 800422e:	2900      	cmp	r1, #0
 8004230:	d1f6      	bne.n	8004220 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004232:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	f102 0308 	add.w	r3, r2, #8
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004240:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	3208      	adds	r2, #8
 8004246:	e842 3100 	strex	r1, r3, [r2]
 800424a:	2900      	cmp	r1, #0
 800424c:	d1f1      	bne.n	8004232 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800424e:	2320      	movs	r3, #32
 8004250:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004258:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	4a29      	ldr	r2, [pc, #164]	; (8004304 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004268:	d106      	bne.n	8004278 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d00d      	beq.n	800428c <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8004270:	4620      	mov	r0, r4
 8004272:	f7fc fe45 	bl	8000f00 <HAL_UART_RxCpltCallback>
 8004276:	e784      	b.n	8004182 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004278:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	e852 3f00 	ldrex	r3, [r2]
 800427e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	e842 3100 	strex	r1, r3, [r2]
 8004286:	2900      	cmp	r1, #0
 8004288:	d1f6      	bne.n	8004278 <UART_RxISR_8BIT_FIFOEN+0x138>
 800428a:	e7ee      	b.n	800426a <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428c:	2300      	movs	r3, #0
 800428e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	e852 3f00 	ldrex	r3, [r2]
 8004296:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	e842 3100 	strex	r1, r3, [r2]
 800429e:	2900      	cmp	r1, #0
 80042a0:	d1f6      	bne.n	8004290 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	f012 0f10 	tst.w	r2, #16
 80042aa:	d001      	beq.n	80042b0 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042ac:	2210      	movs	r2, #16
 80042ae:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042b0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff fcc4 	bl	8003c42 <HAL_UARTEx_RxEventCallback>
 80042ba:	e762      	b.n	8004182 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80042bc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80042c0:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f43f af4e 	beq.w	8004164 <UART_RxISR_8BIT_FIFOEN+0x24>
 80042c8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80042cc:	429a      	cmp	r2, r3
 80042ce:	f67f af49 	bls.w	8004164 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	f102 0308 	add.w	r3, r2, #8
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	3208      	adds	r2, #8
 80042e2:	e842 3100 	strex	r1, r3, [r2]
 80042e6:	2900      	cmp	r1, #0
 80042e8:	d1f3      	bne.n	80042d2 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 80042ec:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80042ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	e852 3f00 	ldrex	r3, [r2]
 80042f4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	e842 3100 	strex	r1, r3, [r2]
 80042fc:	2900      	cmp	r1, #0
 80042fe:	d1f6      	bne.n	80042ee <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8004300:	e730      	b.n	8004164 <UART_RxISR_8BIT_FIFOEN+0x24>
 8004302:	bf00      	nop
 8004304:	40008000 	.word	0x40008000
 8004308:	08003f8d 	.word	0x08003f8d

0800430c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004310:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004314:	6803      	ldr	r3, [r0, #0]
 8004316:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004318:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800431c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004320:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8004324:	2a22      	cmp	r2, #34	; 0x22
 8004326:	d005      	beq.n	8004334 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	f042 0208 	orr.w	r2, r2, #8
 800432e:	619a      	str	r2, [r3, #24]
  }
}
 8004330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004334:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8004336:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800433a:	e008      	b.n	800434e <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800433c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004340:	2b00      	cmp	r3, #0
 8004342:	d14b      	bne.n	80043dc <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8004344:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d04d      	beq.n	80043ea <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800434e:	2f00      	cmp	r7, #0
 8004350:	f000 8099 	beq.w	8004486 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8004354:	f015 0f20 	tst.w	r5, #32
 8004358:	f000 8095 	beq.w	8004486 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004360:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8004362:	4033      	ands	r3, r6
 8004364:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004368:	3302      	adds	r3, #2
 800436a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800436c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29b      	uxth	r3, r3
 8004376:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800437e:	f015 0f07 	tst.w	r5, #7
 8004382:	d0df      	beq.n	8004344 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004384:	f015 0f01 	tst.w	r5, #1
 8004388:	d009      	beq.n	800439e <UART_RxISR_16BIT_FIFOEN+0x92>
 800438a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800438e:	d006      	beq.n	800439e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004390:	2201      	movs	r2, #1
 8004392:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004394:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800439e:	f015 0f02 	tst.w	r5, #2
 80043a2:	d00b      	beq.n	80043bc <UART_RxISR_16BIT_FIFOEN+0xb0>
 80043a4:	f018 0f01 	tst.w	r8, #1
 80043a8:	d008      	beq.n	80043bc <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	2202      	movs	r2, #2
 80043ae:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043bc:	f015 0f04 	tst.w	r5, #4
 80043c0:	d0bc      	beq.n	800433c <UART_RxISR_16BIT_FIFOEN+0x30>
 80043c2:	f018 0f01 	tst.w	r8, #1
 80043c6:	d0b9      	beq.n	800433c <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	2204      	movs	r2, #4
 80043cc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80043d2:	f043 0302 	orr.w	r3, r3, #2
 80043d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80043da:	e7af      	b.n	800433c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80043dc:	4620      	mov	r0, r4
 80043de:	f7ff fbf9 	bl	8003bd4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80043e8:	e7ac      	b.n	8004344 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	e852 3f00 	ldrex	r3, [r2]
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	e842 3100 	strex	r1, r3, [r2]
 80043f8:	2900      	cmp	r1, #0
 80043fa:	d1f6      	bne.n	80043ea <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	f102 0308 	add.w	r3, r2, #8
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	3208      	adds	r2, #8
 8004410:	e842 3100 	strex	r1, r3, [r2]
 8004414:	2900      	cmp	r1, #0
 8004416:	d1f1      	bne.n	80043fc <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8004418:	2320      	movs	r3, #32
 800441a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004422:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	4a29      	ldr	r2, [pc, #164]	; (80044cc <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004432:	d106      	bne.n	8004442 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004434:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d00d      	beq.n	8004456 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 800443a:	4620      	mov	r0, r4
 800443c:	f7fc fd60 	bl	8000f00 <HAL_UART_RxCpltCallback>
 8004440:	e785      	b.n	800434e <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004442:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	e852 3f00 	ldrex	r3, [r2]
 8004448:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	e842 3100 	strex	r1, r3, [r2]
 8004450:	2900      	cmp	r1, #0
 8004452:	d1f6      	bne.n	8004442 <UART_RxISR_16BIT_FIFOEN+0x136>
 8004454:	e7ee      	b.n	8004434 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	2300      	movs	r3, #0
 8004458:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	e852 3f00 	ldrex	r3, [r2]
 8004460:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	e842 3100 	strex	r1, r3, [r2]
 8004468:	2900      	cmp	r1, #0
 800446a:	d1f6      	bne.n	800445a <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	f012 0f10 	tst.w	r2, #16
 8004474:	d001      	beq.n	800447a <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004476:	2210      	movs	r2, #16
 8004478:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800447e:	4620      	mov	r0, r4
 8004480:	f7ff fbdf 	bl	8003c42 <HAL_UARTEx_RxEventCallback>
 8004484:	e763      	b.n	800434e <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8004486:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800448a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800448c:	2b00      	cmp	r3, #0
 800448e:	f43f af4f 	beq.w	8004330 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004492:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8004496:	429a      	cmp	r2, r3
 8004498:	f67f af4a 	bls.w	8004330 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800449c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	f102 0308 	add.w	r3, r2, #8
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	3208      	adds	r2, #8
 80044ac:	e842 3100 	strex	r1, r3, [r2]
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d1f3      	bne.n	800449c <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80044b6:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80044b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	e852 3f00 	ldrex	r3, [r2]
 80044be:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	e842 3100 	strex	r1, r3, [r2]
 80044c6:	2900      	cmp	r1, #0
 80044c8:	d1f6      	bne.n	80044b8 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 80044ca:	e731      	b.n	8004330 <UART_RxISR_16BIT_FIFOEN+0x24>
 80044cc:	40008000 	.word	0x40008000
 80044d0:	08004069 	.word	0x08004069

080044d4 <UART_SetConfig>:
{
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80044d8:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044da:	6883      	ldr	r3, [r0, #8]
 80044dc:	6902      	ldr	r2, [r0, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	6942      	ldr	r2, [r0, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	69c2      	ldr	r2, [r0, #28]
 80044e6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e8:	6808      	ldr	r0, [r1, #0]
 80044ea:	4a9d      	ldr	r2, [pc, #628]	; (8004760 <UART_SetConfig+0x28c>)
 80044ec:	4002      	ands	r2, r0
 80044ee:	431a      	orrs	r2, r3
 80044f0:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	6853      	ldr	r3, [r2, #4]
 80044f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044fa:	68e1      	ldr	r1, [r4, #12]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004500:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	4b97      	ldr	r3, [pc, #604]	; (8004764 <UART_SetConfig+0x290>)
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800450a:	6a23      	ldr	r3, [r4, #32]
 800450c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800450e:	6893      	ldr	r3, [r2, #8]
 8004510:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004514:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004518:	430b      	orrs	r3, r1
 800451a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004520:	f023 030f 	bic.w	r3, r3, #15
 8004524:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004526:	430b      	orrs	r3, r1
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	4a8e      	ldr	r2, [pc, #568]	; (8004768 <UART_SetConfig+0x294>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01c      	beq.n	800456c <UART_SetConfig+0x98>
 8004532:	4a8e      	ldr	r2, [pc, #568]	; (800476c <UART_SetConfig+0x298>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d031      	beq.n	800459c <UART_SetConfig+0xc8>
 8004538:	4a8a      	ldr	r2, [pc, #552]	; (8004764 <UART_SetConfig+0x290>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d04b      	beq.n	80045d6 <UART_SetConfig+0x102>
 800453e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8004540:	4988      	ldr	r1, [pc, #544]	; (8004764 <UART_SetConfig+0x290>)
 8004542:	428b      	cmp	r3, r1
 8004544:	d068      	beq.n	8004618 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004546:	69e0      	ldr	r0, [r4, #28]
 8004548:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800454c:	f000 80a5 	beq.w	800469a <UART_SetConfig+0x1c6>
    switch (clocksource)
 8004550:	2a08      	cmp	r2, #8
 8004552:	f200 811f 	bhi.w	8004794 <UART_SetConfig+0x2c0>
 8004556:	e8df f012 	tbh	[pc, r2, lsl #1]
 800455a:	00d3      	.short	0x00d3
 800455c:	00d100f5 	.word	0x00d100f5
 8004560:	00f8011d 	.word	0x00f8011d
 8004564:	011d011d 	.word	0x011d011d
 8004568:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800456c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004570:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004574:	f002 0203 	and.w	r2, r2, #3
 8004578:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457c:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8004580:	2a03      	cmp	r2, #3
 8004582:	d809      	bhi.n	8004598 <UART_SetConfig+0xc4>
 8004584:	e8df f002 	tbb	[pc, r2]
 8004588:	063c0402 	.word	0x063c0402
 800458c:	2201      	movs	r2, #1
 800458e:	e7d7      	b.n	8004540 <UART_SetConfig+0x6c>
 8004590:	2204      	movs	r2, #4
 8004592:	e7d5      	b.n	8004540 <UART_SetConfig+0x6c>
 8004594:	2208      	movs	r2, #8
 8004596:	e7d3      	b.n	8004540 <UART_SetConfig+0x6c>
 8004598:	2210      	movs	r2, #16
 800459a:	e7d1      	b.n	8004540 <UART_SetConfig+0x6c>
 800459c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80045a4:	f002 020c 	and.w	r2, r2, #12
 80045a8:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80045ac:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 80045b0:	2a0c      	cmp	r2, #12
 80045b2:	d80e      	bhi.n	80045d2 <UART_SetConfig+0xfe>
 80045b4:	e8df f002 	tbb	[pc, r2]
 80045b8:	0d0d0d07 	.word	0x0d0d0d07
 80045bc:	0d0d0d09 	.word	0x0d0d0d09
 80045c0:	0d0d0d26 	.word	0x0d0d0d26
 80045c4:	0b          	.byte	0x0b
 80045c5:	00          	.byte	0x00
 80045c6:	2200      	movs	r2, #0
 80045c8:	e7ba      	b.n	8004540 <UART_SetConfig+0x6c>
 80045ca:	2204      	movs	r2, #4
 80045cc:	e7b8      	b.n	8004540 <UART_SetConfig+0x6c>
 80045ce:	2208      	movs	r2, #8
 80045d0:	e7b6      	b.n	8004540 <UART_SetConfig+0x6c>
 80045d2:	2210      	movs	r2, #16
 80045d4:	e7b4      	b.n	8004540 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80045d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045da:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80045de:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80045e2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80045e6:	d00f      	beq.n	8004608 <UART_SetConfig+0x134>
 80045e8:	d805      	bhi.n	80045f6 <UART_SetConfig+0x122>
 80045ea:	b17a      	cbz	r2, 800460c <UART_SetConfig+0x138>
 80045ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80045f0:	d10e      	bne.n	8004610 <UART_SetConfig+0x13c>
 80045f2:	2204      	movs	r2, #4
 80045f4:	e7a4      	b.n	8004540 <UART_SetConfig+0x6c>
 80045f6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80045fa:	d10b      	bne.n	8004614 <UART_SetConfig+0x140>
 80045fc:	2208      	movs	r2, #8
 80045fe:	e79f      	b.n	8004540 <UART_SetConfig+0x6c>
 8004600:	2202      	movs	r2, #2
 8004602:	e79d      	b.n	8004540 <UART_SetConfig+0x6c>
 8004604:	2202      	movs	r2, #2
 8004606:	e79b      	b.n	8004540 <UART_SetConfig+0x6c>
 8004608:	2202      	movs	r2, #2
 800460a:	e799      	b.n	8004540 <UART_SetConfig+0x6c>
 800460c:	2200      	movs	r2, #0
 800460e:	e797      	b.n	8004540 <UART_SetConfig+0x6c>
 8004610:	2210      	movs	r2, #16
 8004612:	e795      	b.n	8004540 <UART_SetConfig+0x6c>
 8004614:	2210      	movs	r2, #16
 8004616:	e793      	b.n	8004540 <UART_SetConfig+0x6c>
    switch (clocksource)
 8004618:	2a08      	cmp	r2, #8
 800461a:	f200 809c 	bhi.w	8004756 <UART_SetConfig+0x282>
 800461e:	e8df f002 	tbb	[pc, r2]
 8004622:	9a08      	.short	0x9a08
 8004624:	9a379a3a 	.word	0x9a379a3a
 8004628:	9a9a      	.short	0x9a9a
 800462a:	05          	.byte	0x05
 800462b:	00          	.byte	0x00
 800462c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004630:	e004      	b.n	800463c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004632:	f7fe faab 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004636:	2800      	cmp	r0, #0
 8004638:	f000 808f 	beq.w	800475a <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800463c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800463e:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <UART_SetConfig+0x29c>)
 8004640:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004644:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004648:	6865      	ldr	r5, [r4, #4]
 800464a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800464e:	4299      	cmp	r1, r3
 8004650:	f200 8094 	bhi.w	800477c <UART_SetConfig+0x2a8>
 8004654:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004658:	f200 8092 	bhi.w	8004780 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800465c:	2600      	movs	r6, #0
 800465e:	4633      	mov	r3, r6
 8004660:	4631      	mov	r1, r6
 8004662:	f7fb fd91 	bl	8000188 <__aeabi_uldivmod>
 8004666:	0209      	lsls	r1, r1, #8
 8004668:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800466c:	0200      	lsls	r0, r0, #8
 800466e:	086b      	lsrs	r3, r5, #1
 8004670:	18c0      	adds	r0, r0, r3
 8004672:	462a      	mov	r2, r5
 8004674:	4633      	mov	r3, r6
 8004676:	f141 0100 	adc.w	r1, r1, #0
 800467a:	f7fb fd85 	bl	8000188 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800467e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004682:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <UART_SetConfig+0x2a0>)
 8004684:	429a      	cmp	r2, r3
 8004686:	d87d      	bhi.n	8004784 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	60d8      	str	r0, [r3, #12]
 800468c:	4630      	mov	r0, r6
 800468e:	e050      	b.n	8004732 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004690:	f7fd fd7e 	bl	8002190 <HAL_RCC_GetSysClockFreq>
        break;
 8004694:	e7cf      	b.n	8004636 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8004696:	4838      	ldr	r0, [pc, #224]	; (8004778 <UART_SetConfig+0x2a4>)
 8004698:	e7d0      	b.n	800463c <UART_SetConfig+0x168>
    switch (clocksource)
 800469a:	2a08      	cmp	r2, #8
 800469c:	d874      	bhi.n	8004788 <UART_SetConfig+0x2b4>
 800469e:	e8df f002 	tbb	[pc, r2]
 80046a2:	2707      	.short	0x2707
 80046a4:	732a7305 	.word	0x732a7305
 80046a8:	7373      	.short	0x7373
 80046aa:	0b          	.byte	0x0b
 80046ab:	00          	.byte	0x00
 80046ac:	4832      	ldr	r0, [pc, #200]	; (8004778 <UART_SetConfig+0x2a4>)
 80046ae:	e003      	b.n	80046b8 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b0:	f7fe fa6c 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d069      	beq.n	800478c <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <UART_SetConfig+0x29c>)
 80046bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80046c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80046c4:	6862      	ldr	r2, [r4, #4]
 80046c6:	0853      	lsrs	r3, r2, #1
 80046c8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80046cc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d0:	f1a3 0110 	sub.w	r1, r3, #16
 80046d4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80046d8:	4291      	cmp	r1, r2
 80046da:	d859      	bhi.n	8004790 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046dc:	b29a      	uxth	r2, r3
 80046de:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046e2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80046e6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	60d3      	str	r3, [r2, #12]
 80046ec:	2000      	movs	r0, #0
 80046ee:	e020      	b.n	8004732 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f0:	f7fe fa5c 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
        break;
 80046f4:	e7de      	b.n	80046b4 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80046f6:	f7fd fd4b 	bl	8002190 <HAL_RCC_GetSysClockFreq>
        break;
 80046fa:	e7db      	b.n	80046b4 <UART_SetConfig+0x1e0>
    switch (clocksource)
 80046fc:	481e      	ldr	r0, [pc, #120]	; (8004778 <UART_SetConfig+0x2a4>)
 80046fe:	e003      	b.n	8004708 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004700:	f7fe fa44 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004704:	2800      	cmp	r0, #0
 8004706:	d047      	beq.n	8004798 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004708:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800470a:	4b19      	ldr	r3, [pc, #100]	; (8004770 <UART_SetConfig+0x29c>)
 800470c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004710:	fbb0 f0f3 	udiv	r0, r0, r3
 8004714:	6863      	ldr	r3, [r4, #4]
 8004716:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800471a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800471e:	f1a0 0210 	sub.w	r2, r0, #16
 8004722:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004726:	429a      	cmp	r2, r3
 8004728:	d838      	bhi.n	800479c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	b280      	uxth	r0, r0
 800472e:	60d8      	str	r0, [r3, #12]
 8004730:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8004732:	2301      	movs	r3, #1
 8004734:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004738:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8004740:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004742:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fe fa32 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
        break;
 8004748:	e7dc      	b.n	8004704 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800474a:	f7fd fd21 	bl	8002190 <HAL_RCC_GetSysClockFreq>
        break;
 800474e:	e7d9      	b.n	8004704 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8004750:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004754:	e7d8      	b.n	8004708 <UART_SetConfig+0x234>
    switch (clocksource)
 8004756:	2001      	movs	r0, #1
 8004758:	e7eb      	b.n	8004732 <UART_SetConfig+0x25e>
 800475a:	2000      	movs	r0, #0
 800475c:	e7e9      	b.n	8004732 <UART_SetConfig+0x25e>
 800475e:	bf00      	nop
 8004760:	cfff69f3 	.word	0xcfff69f3
 8004764:	40008000 	.word	0x40008000
 8004768:	40013800 	.word	0x40013800
 800476c:	40004400 	.word	0x40004400
 8004770:	080080bc 	.word	0x080080bc
 8004774:	000ffcff 	.word	0x000ffcff
 8004778:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800477c:	2001      	movs	r0, #1
 800477e:	e7d8      	b.n	8004732 <UART_SetConfig+0x25e>
 8004780:	2001      	movs	r0, #1
 8004782:	e7d6      	b.n	8004732 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8004784:	2001      	movs	r0, #1
 8004786:	e7d4      	b.n	8004732 <UART_SetConfig+0x25e>
    switch (clocksource)
 8004788:	2001      	movs	r0, #1
 800478a:	e7d2      	b.n	8004732 <UART_SetConfig+0x25e>
 800478c:	2000      	movs	r0, #0
 800478e:	e7d0      	b.n	8004732 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8004790:	2001      	movs	r0, #1
 8004792:	e7ce      	b.n	8004732 <UART_SetConfig+0x25e>
    switch (clocksource)
 8004794:	2001      	movs	r0, #1
 8004796:	e7cc      	b.n	8004732 <UART_SetConfig+0x25e>
 8004798:	2000      	movs	r0, #0
 800479a:	e7ca      	b.n	8004732 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800479c:	2001      	movs	r0, #1
 800479e:	e7c8      	b.n	8004732 <UART_SetConfig+0x25e>

080047a0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047a2:	f013 0f01 	tst.w	r3, #1
 80047a6:	d006      	beq.n	80047b6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047a8:	6802      	ldr	r2, [r0, #0]
 80047aa:	6853      	ldr	r3, [r2, #4]
 80047ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047b0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80047b2:	430b      	orrs	r3, r1
 80047b4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047b8:	f013 0f02 	tst.w	r3, #2
 80047bc:	d006      	beq.n	80047cc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047be:	6802      	ldr	r2, [r0, #0]
 80047c0:	6853      	ldr	r3, [r2, #4]
 80047c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047ce:	f013 0f04 	tst.w	r3, #4
 80047d2:	d006      	beq.n	80047e2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047d4:	6802      	ldr	r2, [r0, #0]
 80047d6:	6853      	ldr	r3, [r2, #4]
 80047d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047dc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80047de:	430b      	orrs	r3, r1
 80047e0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047e4:	f013 0f08 	tst.w	r3, #8
 80047e8:	d006      	beq.n	80047f8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ea:	6802      	ldr	r2, [r0, #0]
 80047ec:	6853      	ldr	r3, [r2, #4]
 80047ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047f2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047fa:	f013 0f10 	tst.w	r3, #16
 80047fe:	d006      	beq.n	800480e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004800:	6802      	ldr	r2, [r0, #0]
 8004802:	6893      	ldr	r3, [r2, #8]
 8004804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004808:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800480a:	430b      	orrs	r3, r1
 800480c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800480e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004810:	f013 0f20 	tst.w	r3, #32
 8004814:	d006      	beq.n	8004824 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004816:	6802      	ldr	r2, [r0, #0]
 8004818:	6893      	ldr	r3, [r2, #8]
 800481a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800481e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004820:	430b      	orrs	r3, r1
 8004822:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004824:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004826:	f013 0f40 	tst.w	r3, #64	; 0x40
 800482a:	d00a      	beq.n	8004842 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800482c:	6802      	ldr	r2, [r0, #0]
 800482e:	6853      	ldr	r3, [r2, #4]
 8004830:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004834:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004836:	430b      	orrs	r3, r1
 8004838:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800483c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004840:	d00b      	beq.n	800485a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004842:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004844:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004848:	d006      	beq.n	8004858 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484a:	6802      	ldr	r2, [r0, #0]
 800484c:	6853      	ldr	r3, [r2, #4]
 800484e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004852:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004854:	430b      	orrs	r3, r1
 8004856:	6053      	str	r3, [r2, #4]
}
 8004858:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800485a:	6802      	ldr	r2, [r0, #0]
 800485c:	6853      	ldr	r3, [r2, #4]
 800485e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004862:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004864:	430b      	orrs	r3, r1
 8004866:	6053      	str	r3, [r2, #4]
 8004868:	e7eb      	b.n	8004842 <UART_AdvFeatureConfig+0xa2>

0800486a <UART_WaitOnFlagUntilTimeout>:
{
 800486a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800486e:	4605      	mov	r5, r0
 8004870:	460f      	mov	r7, r1
 8004872:	4616      	mov	r6, r2
 8004874:	4699      	mov	r9, r3
 8004876:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	69dc      	ldr	r4, [r3, #28]
 800487e:	ea37 0404 	bics.w	r4, r7, r4
 8004882:	bf0c      	ite	eq
 8004884:	2401      	moveq	r4, #1
 8004886:	2400      	movne	r4, #0
 8004888:	42b4      	cmp	r4, r6
 800488a:	d157      	bne.n	800493c <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800488c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004890:	d0f3      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fc f82f 	bl	80008f4 <HAL_GetTick>
 8004896:	eba0 0009 	sub.w	r0, r0, r9
 800489a:	4540      	cmp	r0, r8
 800489c:	d82f      	bhi.n	80048fe <UART_WaitOnFlagUntilTimeout+0x94>
 800489e:	f1b8 0f00 	cmp.w	r8, #0
 80048a2:	d02c      	beq.n	80048fe <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	f012 0f04 	tst.w	r2, #4
 80048ac:	d0e5      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80048b4:	d0e1      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ba:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048bc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	e852 3f00 	ldrex	r3, [r2]
 80048c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	e842 3100 	strex	r1, r3, [r2]
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d1f6      	bne.n	80048bc <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	f102 0308 	add.w	r3, r2, #8
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	3208      	adds	r2, #8
 80048de:	e842 3100 	strex	r1, r3, [r2]
 80048e2:	2900      	cmp	r1, #0
 80048e4:	d1f3      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 80048e6:	2320      	movs	r3, #32
 80048e8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80048ec:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80048f4:	2300      	movs	r3, #0
 80048f6:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 80048fa:	2003      	movs	r0, #3
 80048fc:	e01f      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048fe:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	e852 3f00 	ldrex	r3, [r2]
 8004904:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	e842 3100 	strex	r1, r3, [r2]
 800490c:	2900      	cmp	r1, #0
 800490e:	d1f6      	bne.n	80048fe <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	f102 0308 	add.w	r3, r2, #8
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	3208      	adds	r2, #8
 8004920:	e842 3100 	strex	r1, r3, [r2]
 8004924:	2900      	cmp	r1, #0
 8004926:	d1f3      	bne.n	8004910 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8004928:	2320      	movs	r3, #32
 800492a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800492e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8004932:	2300      	movs	r3, #0
 8004934:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 8004938:	2003      	movs	r0, #3
 800493a:	e000      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800493c:	2000      	movs	r0, #0
}
 800493e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004942 <UART_CheckIdleState>:
{
 8004942:	b530      	push	{r4, r5, lr}
 8004944:	b083      	sub	sp, #12
 8004946:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	2300      	movs	r3, #0
 800494a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800494e:	f7fb ffd1 	bl	80008f4 <HAL_GetTick>
 8004952:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	f012 0f08 	tst.w	r2, #8
 800495c:	d110      	bne.n	8004980 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f013 0f04 	tst.w	r3, #4
 8004966:	d119      	bne.n	800499c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8004968:	2320      	movs	r3, #32
 800496a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800496e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	2000      	movs	r0, #0
 8004974:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004976:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8004978:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800497c:	b003      	add	sp, #12
 800497e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	4603      	mov	r3, r0
 8004988:	2200      	movs	r2, #0
 800498a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800498e:	4620      	mov	r0, r4
 8004990:	f7ff ff6b 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 8004994:	2800      	cmp	r0, #0
 8004996:	d0e2      	beq.n	800495e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8004998:	2003      	movs	r0, #3
 800499a:	e7ef      	b.n	800497c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800499c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	462b      	mov	r3, r5
 80049a4:	2200      	movs	r2, #0
 80049a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049aa:	4620      	mov	r0, r4
 80049ac:	f7ff ff5d 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d0d9      	beq.n	8004968 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80049b4:	2003      	movs	r0, #3
 80049b6:	e7e1      	b.n	800497c <UART_CheckIdleState+0x3a>

080049b8 <HAL_UART_Init>:
  if (huart == NULL)
 80049b8:	b378      	cbz	r0, 8004a1a <HAL_UART_Init+0x62>
{
 80049ba:	b510      	push	{r4, lr}
 80049bc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80049be:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80049c2:	b30b      	cbz	r3, 8004a08 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80049c4:	2324      	movs	r3, #36	; 0x24
 80049c6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff fd7d 	bl	80044d4 <UART_SetConfig>
 80049da:	2801      	cmp	r0, #1
 80049dc:	d013      	beq.n	8004a06 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049e0:	b9bb      	cbnz	r3, 8004a12 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	6853      	ldr	r3, [r2, #4]
 80049e6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80049ea:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ec:	6822      	ldr	r2, [r4, #0]
 80049ee:	6893      	ldr	r3, [r2, #8]
 80049f0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80049f4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	6813      	ldr	r3, [r2, #0]
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004a00:	4620      	mov	r0, r4
 8004a02:	f7ff ff9e 	bl	8004942 <UART_CheckIdleState>
}
 8004a06:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004a08:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8004a0c:	f7fc f93c 	bl	8000c88 <HAL_UART_MspInit>
 8004a10:	e7d8      	b.n	80049c4 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff fec4 	bl	80047a0 <UART_AdvFeatureConfig>
 8004a18:	e7e3      	b.n	80049e2 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004a1a:	2001      	movs	r0, #1
}
 8004a1c:	4770      	bx	lr
	...

08004a20 <UART_Start_Receive_IT>:
{
 8004a20:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8004a22:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004a24:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004a28:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8004a30:	6883      	ldr	r3, [r0, #8]
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a36:	d006      	beq.n	8004a46 <UART_Start_Receive_IT+0x26>
 8004a38:	b9a3      	cbnz	r3, 8004a64 <UART_Start_Receive_IT+0x44>
 8004a3a:	6903      	ldr	r3, [r0, #16]
 8004a3c:	b973      	cbnz	r3, 8004a5c <UART_Start_Receive_IT+0x3c>
 8004a3e:	23ff      	movs	r3, #255	; 0xff
 8004a40:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004a44:	e014      	b.n	8004a70 <UART_Start_Receive_IT+0x50>
 8004a46:	6903      	ldr	r3, [r0, #16]
 8004a48:	b923      	cbnz	r3, 8004a54 <UART_Start_Receive_IT+0x34>
 8004a4a:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004a4e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004a52:	e00d      	b.n	8004a70 <UART_Start_Receive_IT+0x50>
 8004a54:	23ff      	movs	r3, #255	; 0xff
 8004a56:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004a5a:	e009      	b.n	8004a70 <UART_Start_Receive_IT+0x50>
 8004a5c:	237f      	movs	r3, #127	; 0x7f
 8004a5e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004a62:	e005      	b.n	8004a70 <UART_Start_Receive_IT+0x50>
 8004a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a68:	d02d      	beq.n	8004ac6 <UART_Start_Receive_IT+0xa6>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a76:	2322      	movs	r3, #34	; 0x22
 8004a78:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	f101 0308 	add.w	r3, r1, #8
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	3108      	adds	r1, #8
 8004a8c:	e841 3400 	strex	r4, r3, [r1]
 8004a90:	2c00      	cmp	r4, #0
 8004a92:	d1f3      	bne.n	8004a7c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004a94:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9a:	d01e      	beq.n	8004ada <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9c:	6883      	ldr	r3, [r0, #8]
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d042      	beq.n	8004b2a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <UART_Start_Receive_IT+0x12c>)
 8004aa6:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004aa8:	6903      	ldr	r3, [r0, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d043      	beq.n	8004b36 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004aae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	e852 3f00 	ldrex	r3, [r2]
 8004ab4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	e842 3100 	strex	r1, r3, [r2]
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d1f6      	bne.n	8004aae <UART_Start_Receive_IT+0x8e>
}
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	bc10      	pop	{r4}
 8004ac4:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8004ac6:	6903      	ldr	r3, [r0, #16]
 8004ac8:	b91b      	cbnz	r3, 8004ad2 <UART_Start_Receive_IT+0xb2>
 8004aca:	237f      	movs	r3, #127	; 0x7f
 8004acc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004ad0:	e7ce      	b.n	8004a70 <UART_Start_Receive_IT+0x50>
 8004ad2:	233f      	movs	r3, #63	; 0x3f
 8004ad4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004ad8:	e7ca      	b.n	8004a70 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004ada:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d8dc      	bhi.n	8004a9c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae2:	6883      	ldr	r3, [r0, #8]
 8004ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae8:	d019      	beq.n	8004b1e <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004aea:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <UART_Start_Receive_IT+0x130>)
 8004aec:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004aee:	6903      	ldr	r3, [r0, #16]
 8004af0:	b143      	cbz	r3, 8004b04 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	e852 3f00 	ldrex	r3, [r2]
 8004af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	e842 3100 	strex	r1, r3, [r2]
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d1f6      	bne.n	8004af2 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b04:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	f102 0308 	add.w	r3, r2, #8
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	3208      	adds	r2, #8
 8004b14:	e842 3100 	strex	r1, r3, [r2]
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	d1f3      	bne.n	8004b04 <UART_Start_Receive_IT+0xe4>
 8004b1c:	e7d0      	b.n	8004ac0 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1e:	6903      	ldr	r3, [r0, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e2      	bne.n	8004aea <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <UART_Start_Receive_IT+0x134>)
 8004b26:	6743      	str	r3, [r0, #116]	; 0x74
 8004b28:	e7e1      	b.n	8004aee <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2a:	6903      	ldr	r3, [r0, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1b9      	bne.n	8004aa4 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <UART_Start_Receive_IT+0x138>)
 8004b32:	6743      	str	r3, [r0, #116]	; 0x74
 8004b34:	e7b8      	b.n	8004aa8 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b36:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	e852 3f00 	ldrex	r3, [r2]
 8004b3c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	e842 3100 	strex	r1, r3, [r2]
 8004b44:	2900      	cmp	r1, #0
 8004b46:	d1f6      	bne.n	8004b36 <UART_Start_Receive_IT+0x116>
 8004b48:	e7ba      	b.n	8004ac0 <UART_Start_Receive_IT+0xa0>
 8004b4a:	bf00      	nop
 8004b4c:	08003f8d 	.word	0x08003f8d
 8004b50:	08004141 	.word	0x08004141
 8004b54:	0800430d 	.word	0x0800430d
 8004b58:	08004069 	.word	0x08004069

08004b5c <HAL_UART_Receive_IT>:
{
 8004b5c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b5e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d117      	bne.n	8004b96 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8004b66:	b1c1      	cbz	r1, 8004b9a <HAL_UART_Receive_IT+0x3e>
 8004b68:	b1ca      	cbz	r2, 8004b9e <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b6e:	6803      	ldr	r3, [r0, #0]
 8004b70:	4c0c      	ldr	r4, [pc, #48]	; (8004ba4 <HAL_UART_Receive_IT+0x48>)
 8004b72:	42a3      	cmp	r3, r4
 8004b74:	d00c      	beq.n	8004b90 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004b7c:	d008      	beq.n	8004b90 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b7e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	e854 3f00 	ldrex	r3, [r4]
 8004b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	e844 3500 	strex	r5, r3, [r4]
 8004b8c:	2d00      	cmp	r5, #0
 8004b8e:	d1f6      	bne.n	8004b7e <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b90:	f7ff ff46 	bl	8004a20 <UART_Start_Receive_IT>
 8004b94:	e000      	b.n	8004b98 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8004b96:	2002      	movs	r0, #2
}
 8004b98:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	e7fc      	b.n	8004b98 <HAL_UART_Receive_IT+0x3c>
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	e7fa      	b.n	8004b98 <HAL_UART_Receive_IT+0x3c>
 8004ba2:	bf00      	nop
 8004ba4:	40008000 	.word	0x40008000

08004ba8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8004ba8:	b082      	sub	sp, #8
 8004baa:	ab02      	add	r3, sp, #8
 8004bac:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8004bb0:	6802      	ldr	r2, [r0, #0]
 8004bb2:	6853      	ldr	r3, [r2, #4]
 8004bb4:	f023 0310 	bic.w	r3, r3, #16
 8004bb8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8004bc0:	6802      	ldr	r2, [r0, #0]
 8004bc2:	6853      	ldr	r3, [r2, #4]
 8004bc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004bcc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004bd0:	6053      	str	r3, [r2, #4]
}
 8004bd2:	b002      	add	sp, #8
 8004bd4:	4770      	bx	lr
	...

08004bd8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bd8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004bda:	b92b      	cbnz	r3, 8004be8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004be2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8004be6:	4770      	bx	lr
{
 8004be8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bea:	6803      	ldr	r3, [r0, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bf6:	4d09      	ldr	r5, [pc, #36]	; (8004c1c <UARTEx_SetNbDataToProcess+0x44>)
 8004bf8:	5c6b      	ldrb	r3, [r5, r1]
 8004bfa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bfc:	4c08      	ldr	r4, [pc, #32]	; (8004c20 <UARTEx_SetNbDataToProcess+0x48>)
 8004bfe:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c00:	fb93 f3f1 	sdiv	r3, r3, r1
 8004c04:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c08:	5cab      	ldrb	r3, [r5, r2]
 8004c0a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c0c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c12:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8004c16:	bc30      	pop	{r4, r5}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	080080dc 	.word	0x080080dc
 8004c20:	080080d4 	.word	0x080080d4

08004c24 <HAL_UARTEx_WakeupCallback>:
}
 8004c24:	4770      	bx	lr

08004c26 <HAL_UARTEx_RxFifoFullCallback>:
}
 8004c26:	4770      	bx	lr

08004c28 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8004c28:	4770      	bx	lr

08004c2a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8004c2a:	b510      	push	{r4, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	ab04      	add	r3, sp, #16
 8004c30:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8004c34:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d035      	beq.n	8004ca8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004c44:	2324      	movs	r3, #36	; 0x24
 8004c46:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8004c4a:	6802      	ldr	r2, [r0, #0]
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8004c54:	6801      	ldr	r1, [r0, #0]
 8004c56:	688b      	ldr	r3, [r1, #8]
 8004c58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004c5c:	9a02      	ldr	r2, [sp, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8004c62:	b1aa      	cbz	r2, 8004c90 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	6813      	ldr	r3, [r2, #0]
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004c6e:	f7fb fe41 	bl	80008f4 <HAL_GetTick>
 8004c72:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c74:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004c78:	9200      	str	r2, [sp, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7ff fdf2 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 8004c86:	b948      	cbnz	r0, 8004c9c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8004c88:	2320      	movs	r3, #32
 8004c8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004c8e:	e006      	b.n	8004c9e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8004c90:	ab04      	add	r3, sp, #16
 8004c92:	e913 0006 	ldmdb	r3, {r1, r2}
 8004c96:	f7ff ff87 	bl	8004ba8 <UARTEx_Wakeup_AddressConfig>
 8004c9a:	e7e3      	b.n	8004c64 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8004c9c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8004ca4:	b004      	add	sp, #16
 8004ca6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8004ca8:	2002      	movs	r0, #2
 8004caa:	e7fb      	b.n	8004ca4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08004cac <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8004cac:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d010      	beq.n	8004cd6 <HAL_UARTEx_EnableStopMode+0x2a>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8004cba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	e852 3f00 	ldrex	r3, [r2]
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	e842 3100 	strex	r1, r3, [r2]
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	d1f6      	bne.n	8004cba <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004cd6:	2002      	movs	r0, #2
}
 8004cd8:	4770      	bx	lr

08004cda <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8004cda:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d01d      	beq.n	8004d1e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004cec:	2324      	movs	r3, #36	; 0x24
 8004cee:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cf2:	6802      	ldr	r2, [r0, #0]
 8004cf4:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004cf6:	6811      	ldr	r1, [r2, #0]
 8004cf8:	f021 0101 	bic.w	r1, r1, #1
 8004cfc:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8004d02:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d06:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d08:	6802      	ldr	r2, [r0, #0]
 8004d0a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8004d0c:	f7ff ff64 	bl	8004bd8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004d10:	2320      	movs	r3, #32
 8004d12:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8004d1c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8004d1e:	2002      	movs	r0, #2
}
 8004d20:	4770      	bx	lr

08004d22 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004d22:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004d24:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d01d      	beq.n	8004d68 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004d34:	2324      	movs	r3, #36	; 0x24
 8004d36:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d3a:	6803      	ldr	r3, [r0, #0]
 8004d3c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d46:	6802      	ldr	r2, [r0, #0]
 8004d48:	6893      	ldr	r3, [r2, #8]
 8004d4a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004d4e:	4319      	orrs	r1, r3
 8004d50:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004d52:	f7ff ff41 	bl	8004bd8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004d5a:	2320      	movs	r3, #32
 8004d5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8004d60:	2000      	movs	r0, #0
 8004d62:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004d68:	2002      	movs	r0, #2
 8004d6a:	e7fc      	b.n	8004d66 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08004d6c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004d6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004d6e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d01d      	beq.n	8004db2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004d76:	4604      	mov	r4, r0
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004d7e:	2324      	movs	r3, #36	; 0x24
 8004d80:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d84:	6803      	ldr	r3, [r0, #0]
 8004d86:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d90:	6802      	ldr	r2, [r0, #0]
 8004d92:	6893      	ldr	r3, [r2, #8]
 8004d94:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8004d98:	4319      	orrs	r1, r3
 8004d9a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004d9c:	f7ff ff1c 	bl	8004bd8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004da4:	2320      	movs	r3, #32
 8004da6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8004daa:	2000      	movs	r0, #0
 8004dac:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8004db0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004db2:	2002      	movs	r0, #2
 8004db4:	e7fc      	b.n	8004db0 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08004db6 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8004db6:	2001      	movs	r0, #1
 8004db8:	4770      	bx	lr
	...

08004dbc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8004dbc:	280a      	cmp	r0, #10
 8004dbe:	d807      	bhi.n	8004dd0 <RadioGetLoRaBandwidthInHz+0x14>
 8004dc0:	e8df f000 	tbb	[pc, r0]
 8004dc4:	17110b20 	.word	0x17110b20
 8004dc8:	061e1c1a 	.word	0x061e1c1a
 8004dcc:	0e08      	.short	0x0e08
 8004dce:	14          	.byte	0x14
 8004dcf:	00          	.byte	0x00
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8004dd4:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8004dd8:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8004dda:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8004dde:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8004de0:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8004de4:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8004de6:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8004dea:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8004dec:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8004df0:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8004df2:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8004df6:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8004df8:	4804      	ldr	r0, [pc, #16]	; (8004e0c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8004dfa:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8004dfc:	4804      	ldr	r0, [pc, #16]	; (8004e10 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8004dfe:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8004e00:	4804      	ldr	r0, [pc, #16]	; (8004e14 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8004e02:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8004e04:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	0001e848 	.word	0x0001e848
 8004e10:	0003d090 	.word	0x0003d090
 8004e14:	0007a120 	.word	0x0007a120

08004e18 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8004e18:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8004e1c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8004e1e:	b953      	cbnz	r3, 8004e36 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8004e20:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8004e22:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8004e24:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8004e26:	b141      	cbz	r1, 8004e3a <RadioGetGfskTimeOnAirNumerator+0x22>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f89d 0000 	ldrb.w	r0, [sp]
 8004e2e:	4418      	add	r0, r3
}
 8004e30:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004e34:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8004e36:	2300      	movs	r3, #0
 8004e38:	e7f3      	b.n	8004e22 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e7f5      	b.n	8004e2a <RadioGetGfskTimeOnAirNumerator+0x12>

08004e3e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8004e3e:	b570      	push	{r4, r5, r6, lr}
 8004e40:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8004e44:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8004e48:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8004e4a:	f1a1 0c05 	sub.w	ip, r1, #5
 8004e4e:	f1bc 0f01 	cmp.w	ip, #1
 8004e52:	d931      	bls.n	8004eb8 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004e54:	b918      	cbnz	r0, 8004e5e <RadioGetLoRaTimeOnAirNumerator+0x20>
 8004e56:	f1a1 060b 	sub.w	r6, r1, #11
 8004e5a:	2e01      	cmp	r6, #1
 8004e5c:	d934      	bls.n	8004ec8 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8004e5e:	2801      	cmp	r0, #1
 8004e60:	d02e      	beq.n	8004ec0 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8004e62:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004e64:	f89d c014 	ldrb.w	ip, [sp, #20]
 8004e68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8004e6c:	b385      	cbz	r5, 8004ed0 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8004e6e:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004e70:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8004e72:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8004e74:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8004e78:	b364      	cbz	r4, 8004ed4 <RadioGetLoRaTimeOnAirNumerator+0x96>
 8004e7a:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8004e7e:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8004e80:	2906      	cmp	r1, #6
 8004e82:	d904      	bls.n	8004e8e <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8004e84:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8004e88:	b10e      	cbz	r6, 8004e8e <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8004e8a:	1e88      	subs	r0, r1, #2
 8004e8c:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8004e8e:	f1bc 0f00 	cmp.w	ip, #0
 8004e92:	db22      	blt.n	8004eda <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8004e94:	4484      	add	ip, r0
 8004e96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004e9a:	fb9c fcf0 	sdiv	ip, ip, r0
 8004e9e:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8004ea2:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8004ea6:	2906      	cmp	r1, #6
 8004ea8:	d801      	bhi.n	8004eae <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8004eaa:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8004eae:	0080      	lsls	r0, r0, #2
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	3902      	subs	r1, #2
}
 8004eb4:	4088      	lsls	r0, r1
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8004eb8:	2b0b      	cmp	r3, #11
 8004eba:	d8cb      	bhi.n	8004e54 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8004ebc:	230c      	movs	r3, #12
 8004ebe:	e7c9      	b.n	8004e54 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8004ec0:	290c      	cmp	r1, #12
 8004ec2:	d003      	beq.n	8004ecc <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	e7cd      	b.n	8004e64 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8004ec8:	2601      	movs	r6, #1
 8004eca:	e7cb      	b.n	8004e64 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8004ecc:	2601      	movs	r6, #1
 8004ece:	e7c9      	b.n	8004e64 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	e7cd      	b.n	8004e70 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8004ed4:	f04f 0e14 	mov.w	lr, #20
 8004ed8:	e7d1      	b.n	8004e7e <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8004eda:	f04f 0c00 	mov.w	ip, #0
 8004ede:	e7d9      	b.n	8004e94 <RadioGetLoRaTimeOnAirNumerator+0x56>

08004ee0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	460e      	mov	r6, r1
 8004ee6:	4615      	mov	r5, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8004eee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8004ef2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8004ef6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8004efa:	b148      	cbz	r0, 8004f10 <RadioTimeOnAir+0x30>
 8004efc:	2801      	cmp	r0, #1
 8004efe:	d012      	beq.n	8004f26 <RadioTimeOnAir+0x46>
 8004f00:	2501      	movs	r5, #1
 8004f02:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8004f04:	442c      	add	r4, r5
 8004f06:	1e60      	subs	r0, r4, #1
}
 8004f08:	fbb0 f0f5 	udiv	r0, r0, r5
 8004f0c:	b005      	add	sp, #20
 8004f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8004f10:	f8cd c004 	str.w	ip, [sp, #4]
 8004f14:	9700      	str	r7, [sp, #0]
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7ff ff7e 	bl	8004e18 <RadioGetGfskTimeOnAirNumerator>
 8004f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f20:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8004f24:	e7ee      	b.n	8004f04 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8004f26:	f8cd c008 	str.w	ip, [sp, #8]
 8004f2a:	9701      	str	r7, [sp, #4]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	460a      	mov	r2, r1
 8004f32:	4629      	mov	r1, r5
 8004f34:	4630      	mov	r0, r6
 8004f36:	f7ff ff82 	bl	8004e3e <RadioGetLoRaTimeOnAirNumerator>
 8004f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f3e:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8004f42:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <RadioTimeOnAir+0x70>)
 8004f44:	5d98      	ldrb	r0, [r3, r6]
 8004f46:	f7ff ff39 	bl	8004dbc <RadioGetLoRaBandwidthInHz>
 8004f4a:	4605      	mov	r5, r0
        break;
 8004f4c:	e7da      	b.n	8004f04 <RadioTimeOnAir+0x24>
 8004f4e:	bf00      	nop
 8004f50:	08008150 	.word	0x08008150

08004f54 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8004f54:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <RadioOnTxTimeoutProcess+0x18>)
 8004f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004f5e:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <RadioOnTxTimeoutProcess+0x1c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	b113      	cbz	r3, 8004f6a <RadioOnTxTimeoutProcess+0x16>
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	b103      	cbz	r3, 8004f6a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8004f68:	4798      	blx	r3
    }
}
 8004f6a:	bd08      	pop	{r3, pc}
 8004f6c:	48000400 	.word	0x48000400
 8004f70:	20000520 	.word	0x20000520

08004f74 <RadioOnTxTimeoutIrq>:
{
 8004f74:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8004f76:	f7ff ffed 	bl	8004f54 <RadioOnTxTimeoutProcess>
}
 8004f7a:	bd08      	pop	{r3, pc}

08004f7c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8004f7c:	b508      	push	{r3, lr}
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <RadioOnRxTimeoutProcess+0x18>)
 8004f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f84:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004f86:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <RadioOnRxTimeoutProcess+0x1c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b113      	cbz	r3, 8004f92 <RadioOnRxTimeoutProcess+0x16>
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	b103      	cbz	r3, 8004f92 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8004f90:	4798      	blx	r3
    }
}
 8004f92:	bd08      	pop	{r3, pc}
 8004f94:	48000400 	.word	0x48000400
 8004f98:	20000520 	.word	0x20000520

08004f9c <RadioOnRxTimeoutIrq>:
{
 8004f9c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8004f9e:	f7ff ffed 	bl	8004f7c <RadioOnRxTimeoutProcess>
}
 8004fa2:	bd08      	pop	{r3, pc}

08004fa4 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8004fa4:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e005      	b.n	8004fb6 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8004faa:	5ccc      	ldrb	r4, [r1, r3]
 8004fac:	43e4      	mvns	r4, r4
 8004fae:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8004fb0:	2400      	movs	r4, #0
 8004fb2:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	dcf7      	bgt.n	8004faa <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8004fba:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8004fbc:	461c      	mov	r4, r3
 8004fbe:	e011      	b.n	8004fe4 <payload_integration+0x40>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8004fc0:	f103 0c07 	add.w	ip, r3, #7
 8004fc4:	e022      	b.n	800500c <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8004fc6:	b2ed      	uxtb	r5, r5
 8004fc8:	5d4d      	ldrb	r5, [r1, r5]
 8004fca:	fa45 f50e 	asr.w	r5, r5, lr
 8004fce:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8004fd2:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8004fd4:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 8004fd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8004fdc:	5d46      	ldrb	r6, [r0, r5]
 8004fde:	ea46 060c 	orr.w	r6, r6, ip
 8004fe2:	5546      	strb	r6, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 8004fe4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004fe8:	da26      	bge.n	8005038 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8004fea:	425d      	negs	r5, r3
 8004fec:	f003 0c07 	and.w	ip, r3, #7
 8004ff0:	f005 0507 	and.w	r5, r5, #7
 8004ff4:	bf58      	it	pl
 8004ff6:	f1c5 0c00 	rsbpl	ip, r5, #0
 8004ffa:	fa5f fe8c 	uxtb.w	lr, ip
 8004ffe:	f1ce 0e07 	rsb	lr, lr, #7
 8005002:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 8005006:	469c      	mov	ip, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	dbd9      	blt.n	8004fc0 <payload_integration+0x1c>
 800500c:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8005010:	3301      	adds	r3, #1
 8005012:	425e      	negs	r6, r3
 8005014:	f003 0c07 	and.w	ip, r3, #7
 8005018:	f006 0607 	and.w	r6, r6, #7
 800501c:	bf58      	it	pl
 800501e:	f1c6 0c00 	rsbpl	ip, r6, #0
 8005022:	fa5f fc8c 	uxtb.w	ip, ip
 8005026:	f1cc 0c07 	rsb	ip, ip, #7
 800502a:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 800502e:	461e      	mov	r6, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	dac8      	bge.n	8004fc6 <payload_integration+0x22>
 8005034:	1dde      	adds	r6, r3, #7
 8005036:	e7c6      	b.n	8004fc6 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8005038:	01a3      	lsls	r3, r4, #6
 800503a:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 800503e:	b25b      	sxtb	r3, r3
 8005040:	b91c      	cbnz	r4, 800504a <payload_integration+0xa6>
 8005042:	2120      	movs	r1, #32
 8005044:	430b      	orrs	r3, r1
 8005046:	5483      	strb	r3, [r0, r2]
}
 8005048:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800504a:	2100      	movs	r1, #0
 800504c:	e7fa      	b.n	8005044 <payload_integration+0xa0>

0800504e <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800504e:	2001      	movs	r0, #1
 8005050:	4770      	bx	lr

08005052 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8005052:	2001      	movs	r0, #1
 8005054:	4770      	bx	lr
	...

08005058 <RadioSetMaxPayloadLength>:
{
 8005058:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800505a:	2801      	cmp	r0, #1
 800505c:	d004      	beq.n	8005068 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <RadioSetMaxPayloadLength+0x30>)
 8005060:	7d5b      	ldrb	r3, [r3, #21]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d008      	beq.n	8005078 <RadioSetMaxPayloadLength+0x20>
}
 8005066:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <RadioSetMaxPayloadLength+0x34>)
 800506a:	7019      	strb	r1, [r3, #0]
 800506c:	4806      	ldr	r0, [pc, #24]	; (8005088 <RadioSetMaxPayloadLength+0x30>)
 800506e:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005070:	300e      	adds	r0, #14
 8005072:	f001 fe3b 	bl	8006cec <SUBGRF_SetPacketParams>
 8005076:	e7f6      	b.n	8005066 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <RadioSetMaxPayloadLength+0x34>)
 800507a:	7019      	strb	r1, [r3, #0]
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <RadioSetMaxPayloadLength+0x30>)
 800507e:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005080:	300e      	adds	r0, #14
 8005082:	f001 fe33 	bl	8006cec <SUBGRF_SetPacketParams>
}
 8005086:	e7ee      	b.n	8005066 <RadioSetMaxPayloadLength+0xe>
 8005088:	2000053c 	.word	0x2000053c
 800508c:	2000000c 	.word	0x2000000c

08005090 <RadioRead>:
{
 8005090:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8005092:	f001 f9c9 	bl	8006428 <SUBGRF_ReadRegister>
}
 8005096:	bd08      	pop	{r3, pc}

08005098 <RadioWrite>:
{
 8005098:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800509a:	f001 f9b5 	bl	8006408 <SUBGRF_WriteRegister>
}
 800509e:	bd08      	pop	{r3, pc}

080050a0 <RadioTxCw>:
{
 80050a0:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80050a2:	f001 ff4d 	bl	8006f40 <SUBGRF_SetRfTxPower>
 80050a6:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80050a8:	210e      	movs	r1, #14
 80050aa:	f640 101f 	movw	r0, #2335	; 0x91f
 80050ae:	f001 f9ab 	bl	8006408 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80050b2:	2101      	movs	r1, #1
 80050b4:	4620      	mov	r0, r4
 80050b6:	f001 ff2f 	bl	8006f18 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80050ba:	f001 fb75 	bl	80067a8 <SUBGRF_SetTxContinuousWave>
}
 80050be:	bd10      	pop	{r4, pc}

080050c0 <RadioTxPrbs>:
{
 80050c0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80050c2:	2101      	movs	r1, #1
 80050c4:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <RadioTxPrbs+0x24>)
 80050c6:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80050ca:	f001 ff25 	bl	8006f18 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80050ce:	212d      	movs	r1, #45	; 0x2d
 80050d0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80050d4:	f7ff ffe0 	bl	8005098 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80050d8:	f001 fb6d 	bl	80067b6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80050dc:	4802      	ldr	r0, [pc, #8]	; (80050e8 <RadioTxPrbs+0x28>)
 80050de:	f001 faa3 	bl	8006628 <SUBGRF_SetTx>
}
 80050e2:	bd08      	pop	{r3, pc}
 80050e4:	2000053c 	.word	0x2000053c
 80050e8:	000fffff 	.word	0x000fffff

080050ec <RadioSetRxDutyCycle>:
{
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4604      	mov	r4, r0
 80050f0:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80050f2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80050f6:	4e09      	ldr	r6, [pc, #36]	; (800511c <RadioSetRxDutyCycle+0x30>)
 80050f8:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80050fa:	2300      	movs	r3, #0
 80050fc:	461a      	mov	r2, r3
 80050fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005102:	4608      	mov	r0, r1
 8005104:	f001 fc23 	bl	800694e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005108:	2100      	movs	r1, #0
 800510a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800510e:	f001 ff03 	bl	8006f18 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8005112:	4629      	mov	r1, r5
 8005114:	4620      	mov	r0, r4
 8005116:	f001 fb17 	bl	8006748 <SUBGRF_SetRxDutyCycle>
}
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	2000053c 	.word	0x2000053c

08005120 <RadioRxBoosted>:
{
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8005124:	f001 ffea 	bl	80070fc <RFW_Is_Init>
 8005128:	2801      	cmp	r0, #1
 800512a:	d019      	beq.n	8005160 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800512c:	2300      	movs	r3, #0
 800512e:	461a      	mov	r2, r3
 8005130:	f240 2162 	movw	r1, #610	; 0x262
 8005134:	4608      	mov	r0, r1
 8005136:	f001 fc0a 	bl	800694e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800513a:	b9a4      	cbnz	r4, 8005166 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800513c:	4c11      	ldr	r4, [pc, #68]	; (8005184 <RadioRxBoosted+0x64>)
 800513e:	2100      	movs	r1, #0
 8005140:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <RadioRxBoosted+0x68>)
 8005144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005148:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800514a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800514e:	f001 fee3 	bl	8006f18 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8005152:	7863      	ldrb	r3, [r4, #1]
 8005154:	b183      	cbz	r3, 8005178 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005156:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800515a:	f001 fad7 	bl	800670c <SUBGRF_SetRxBoosted>
}
 800515e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8005160:	f001 ffd4 	bl	800710c <RFW_ReceiveInit>
 8005164:	e7e9      	b.n	800513a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005166:	4d09      	ldr	r5, [pc, #36]	; (800518c <RadioRxBoosted+0x6c>)
 8005168:	4621      	mov	r1, r4
 800516a:	4628      	mov	r0, r5
 800516c:	f002 fbfc 	bl	8007968 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005170:	4628      	mov	r0, r5
 8005172:	f002 fbb3 	bl	80078dc <UTIL_TIMER_Start>
 8005176:	e7e1      	b.n	800513c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <RadioRxBoosted+0x64>)
 800517a:	6898      	ldr	r0, [r3, #8]
 800517c:	0180      	lsls	r0, r0, #6
 800517e:	f001 fac5 	bl	800670c <SUBGRF_SetRxBoosted>
}
 8005182:	e7ec      	b.n	800515e <RadioRxBoosted+0x3e>
 8005184:	2000053c 	.word	0x2000053c
 8005188:	48000400 	.word	0x48000400
 800518c:	20000524 	.word	0x20000524

08005190 <RadioStandby>:
{
 8005190:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8005192:	2000      	movs	r0, #0
 8005194:	f001 fa2e 	bl	80065f4 <SUBGRF_SetStandby>
}
 8005198:	bd08      	pop	{r3, pc}

0800519a <RadioGetStatus>:
{
 800519a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800519c:	f001 f928 	bl	80063f0 <SUBGRF_GetOperatingMode>
 80051a0:	2805      	cmp	r0, #5
 80051a2:	d007      	beq.n	80051b4 <RadioGetStatus+0x1a>
 80051a4:	2807      	cmp	r0, #7
 80051a6:	d007      	beq.n	80051b8 <RadioGetStatus+0x1e>
 80051a8:	2804      	cmp	r0, #4
 80051aa:	d001      	beq.n	80051b0 <RadioGetStatus+0x16>
            return RF_IDLE;
 80051ac:	2000      	movs	r0, #0
}
 80051ae:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80051b0:	2002      	movs	r0, #2
 80051b2:	e7fc      	b.n	80051ae <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80051b4:	2001      	movs	r0, #1
 80051b6:	e7fa      	b.n	80051ae <RadioGetStatus+0x14>
            return RF_CAD;
 80051b8:	2003      	movs	r0, #3
 80051ba:	e7f8      	b.n	80051ae <RadioGetStatus+0x14>

080051bc <RadioIrqProcess>:
{
 80051bc:	b530      	push	{r4, r5, lr}
 80051be:	b083      	sub	sp, #12
    uint8_t size = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80051c6:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80051c8:	4ba5      	ldr	r3, [pc, #660]	; (8005460 <RadioIrqProcess+0x2a4>)
 80051ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d829      	bhi.n	8005226 <RadioIrqProcess+0x6a>
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	f000 8140 	beq.w	800545a <RadioIrqProcess+0x29e>
 80051da:	3b01      	subs	r3, #1
 80051dc:	2b1f      	cmp	r3, #31
 80051de:	f200 813c 	bhi.w	800545a <RadioIrqProcess+0x29e>
 80051e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80051e6:	0063      	.short	0x0063
 80051e8:	013a007f 	.word	0x013a007f
 80051ec:	013a00f7 	.word	0x013a00f7
 80051f0:	013a013a 	.word	0x013a013a
 80051f4:	013a0127 	.word	0x013a0127
 80051f8:	013a013a 	.word	0x013a013a
 80051fc:	013a013a 	.word	0x013a013a
 8005200:	013a013a 	.word	0x013a013a
 8005204:	013a0134 	.word	0x013a0134
 8005208:	013a013a 	.word	0x013a013a
 800520c:	013a013a 	.word	0x013a013a
 8005210:	013a013a 	.word	0x013a013a
 8005214:	013a013a 	.word	0x013a013a
 8005218:	013a013a 	.word	0x013a013a
 800521c:	013a013a 	.word	0x013a013a
 8005220:	013a013a 	.word	0x013a013a
 8005224:	0155      	.short	0x0155
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	f000 80b3 	beq.w	8005394 <RadioIrqProcess+0x1d8>
 800522e:	d928      	bls.n	8005282 <RadioIrqProcess+0xc6>
 8005230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005234:	f040 8111 	bne.w	800545a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8005238:	4b8a      	ldr	r3, [pc, #552]	; (8005464 <RadioIrqProcess+0x2a8>)
 800523a:	2201      	movs	r2, #1
 800523c:	2100      	movs	r1, #0
 800523e:	2002      	movs	r0, #2
 8005240:	f002 f842 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8005244:	f001 f8d4 	bl	80063f0 <SUBGRF_GetOperatingMode>
 8005248:	2804      	cmp	r0, #4
 800524a:	f000 80b0 	beq.w	80053ae <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800524e:	f001 f8cf 	bl	80063f0 <SUBGRF_GetOperatingMode>
 8005252:	2805      	cmp	r0, #5
 8005254:	f040 8101 	bne.w	800545a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8005258:	4b83      	ldr	r3, [pc, #524]	; (8005468 <RadioIrqProcess+0x2ac>)
 800525a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800525e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8005260:	4882      	ldr	r0, [pc, #520]	; (800546c <RadioIrqProcess+0x2b0>)
 8005262:	f002 fae1 	bl	8007828 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8005266:	2000      	movs	r0, #0
 8005268:	f001 f9c4 	bl	80065f4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800526c:	4b80      	ldr	r3, [pc, #512]	; (8005470 <RadioIrqProcess+0x2b4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80f2 	beq.w	800545a <RadioIrqProcess+0x29e>
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80ee 	beq.w	800545a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800527e:	4798      	blx	r3
 8005280:	e0eb      	b.n	800545a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	f000 811d 	beq.w	80054c2 <RadioIrqProcess+0x306>
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	f040 80e6 	bne.w	800545a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800528e:	2000      	movs	r0, #0
 8005290:	f001 f9b0 	bl	80065f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005294:	4b76      	ldr	r3, [pc, #472]	; (8005470 <RadioIrqProcess+0x2b4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80de 	beq.w	800545a <RadioIrqProcess+0x29e>
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80da 	beq.w	800545a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80052a6:	2000      	movs	r0, #0
 80052a8:	4798      	blx	r3
 80052aa:	e0d6      	b.n	800545a <RadioIrqProcess+0x29e>
 80052ac:	4b6e      	ldr	r3, [pc, #440]	; (8005468 <RadioIrqProcess+0x2ac>)
 80052ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80052b4:	486f      	ldr	r0, [pc, #444]	; (8005474 <RadioIrqProcess+0x2b8>)
 80052b6:	f002 fab7 	bl	8007828 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80052ba:	2000      	movs	r0, #0
 80052bc:	f001 f99a 	bl	80065f4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80052c0:	f001 ff1e 	bl	8007100 <RFW_Is_LongPacketModeEnabled>
 80052c4:	2801      	cmp	r0, #1
 80052c6:	d00a      	beq.n	80052de <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80052c8:	4b69      	ldr	r3, [pc, #420]	; (8005470 <RadioIrqProcess+0x2b4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80c4 	beq.w	800545a <RadioIrqProcess+0x29e>
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80c0 	beq.w	800545a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80052da:	4798      	blx	r3
 80052dc:	e0bd      	b.n	800545a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80052de:	f001 ff18 	bl	8007112 <RFW_DeInit_TxLongPacket>
 80052e2:	e7f1      	b.n	80052c8 <RadioIrqProcess+0x10c>
 80052e4:	4b60      	ldr	r3, [pc, #384]	; (8005468 <RadioIrqProcess+0x2ac>)
 80052e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80052ec:	485f      	ldr	r0, [pc, #380]	; (800546c <RadioIrqProcess+0x2b0>)
 80052ee:	f002 fa9b 	bl	8007828 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80052f2:	4b5b      	ldr	r3, [pc, #364]	; (8005460 <RadioIrqProcess+0x2a4>)
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	b303      	cbz	r3, 800533a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80052f8:	22ff      	movs	r2, #255	; 0xff
 80052fa:	f10d 0107 	add.w	r1, sp, #7
 80052fe:	485e      	ldr	r0, [pc, #376]	; (8005478 <RadioIrqProcess+0x2bc>)
 8005300:	f001 fdb4 	bl	8006e6c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8005304:	485d      	ldr	r0, [pc, #372]	; (800547c <RadioIrqProcess+0x2c0>)
 8005306:	f001 fdcb 	bl	8006ea0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800530a:	4b59      	ldr	r3, [pc, #356]	; (8005470 <RadioIrqProcess+0x2b4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 80a3 	beq.w	800545a <RadioIrqProcess+0x29e>
 8005314:	689c      	ldr	r4, [r3, #8]
 8005316:	2c00      	cmp	r4, #0
 8005318:	f000 809f 	beq.w	800545a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800531c:	4b50      	ldr	r3, [pc, #320]	; (8005460 <RadioIrqProcess+0x2a4>)
 800531e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005322:	2b01      	cmp	r3, #1
 8005324:	d11d      	bne.n	8005362 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8005326:	4a4e      	ldr	r2, [pc, #312]	; (8005460 <RadioIrqProcess+0x2a4>)
 8005328:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800532c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8005330:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005334:	4850      	ldr	r0, [pc, #320]	; (8005478 <RadioIrqProcess+0x2bc>)
 8005336:	47a0      	blx	r4
                break;
 8005338:	e08f      	b.n	800545a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800533a:	2000      	movs	r0, #0
 800533c:	f001 f95a 	bl	80065f4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8005340:	2100      	movs	r1, #0
 8005342:	f640 1002 	movw	r0, #2306	; 0x902
 8005346:	f001 f85f 	bl	8006408 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800534a:	f640 1044 	movw	r0, #2372	; 0x944
 800534e:	f001 f86b 	bl	8006428 <SUBGRF_ReadRegister>
 8005352:	f040 0102 	orr.w	r1, r0, #2
 8005356:	b2c9      	uxtb	r1, r1
 8005358:	f640 1044 	movw	r0, #2372	; 0x944
 800535c:	f001 f854 	bl	8006408 <SUBGRF_WriteRegister>
 8005360:	e7ca      	b.n	80052f8 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8005362:	4c3f      	ldr	r4, [pc, #252]	; (8005460 <RadioIrqProcess+0x2a4>)
 8005364:	4669      	mov	r1, sp
 8005366:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005368:	f001 fe7a 	bl	8007060 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800536c:	4b40      	ldr	r3, [pc, #256]	; (8005470 <RadioIrqProcess+0x2b4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689d      	ldr	r5, [r3, #8]
 8005372:	9b00      	ldr	r3, [sp, #0]
 8005374:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005378:	4a41      	ldr	r2, [pc, #260]	; (8005480 <RadioIrqProcess+0x2c4>)
 800537a:	fb82 1203 	smull	r1, r2, r2, r3
 800537e:	17db      	asrs	r3, r3, #31
 8005380:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005384:	b25b      	sxtb	r3, r3
 8005386:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800538a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800538e:	483a      	ldr	r0, [pc, #232]	; (8005478 <RadioIrqProcess+0x2bc>)
 8005390:	47a8      	blx	r5
                break;
 8005392:	e062      	b.n	800545a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8005394:	2000      	movs	r0, #0
 8005396:	f001 f92d 	bl	80065f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800539a:	4b35      	ldr	r3, [pc, #212]	; (8005470 <RadioIrqProcess+0x2b4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d05b      	beq.n	800545a <RadioIrqProcess+0x29e>
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d058      	beq.n	800545a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 80053a8:	2001      	movs	r0, #1
 80053aa:	4798      	blx	r3
 80053ac:	e055      	b.n	800545a <RadioIrqProcess+0x29e>
 80053ae:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <RadioIrqProcess+0x2ac>)
 80053b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80053b6:	482f      	ldr	r0, [pc, #188]	; (8005474 <RadioIrqProcess+0x2b8>)
 80053b8:	f002 fa36 	bl	8007828 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80053bc:	2000      	movs	r0, #0
 80053be:	f001 f919 	bl	80065f4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <RadioIrqProcess+0x2b4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d047      	beq.n	800545a <RadioIrqProcess+0x29e>
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d044      	beq.n	800545a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80053d0:	4798      	blx	r3
 80053d2:	e042      	b.n	800545a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80053d4:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <RadioIrqProcess+0x2c8>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	2100      	movs	r1, #0
 80053da:	2002      	movs	r0, #2
 80053dc:	f001 ff74 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80053e0:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <RadioIrqProcess+0x2a4>)
 80053e2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80053e4:	b3c9      	cbz	r1, 800545a <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80053e6:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80053ea:	f640 1003 	movw	r0, #2307	; 0x903
 80053ee:	f7ff fe53 	bl	8005098 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80053f2:	4c1b      	ldr	r4, [pc, #108]	; (8005460 <RadioIrqProcess+0x2a4>)
 80053f4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80053f8:	f640 1004 	movw	r0, #2308	; 0x904
 80053fc:	f7ff fe4c 	bl	8005098 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8005400:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8005404:	f640 1005 	movw	r0, #2309	; 0x905
 8005408:	f7ff fe46 	bl	8005098 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800540c:	f640 1002 	movw	r0, #2306	; 0x902
 8005410:	f7ff fe3e 	bl	8005090 <RadioRead>
 8005414:	f040 0101 	orr.w	r1, r0, #1
 8005418:	b2c9      	uxtb	r1, r1
 800541a:	f640 1002 	movw	r0, #2306	; 0x902
 800541e:	f7ff fe3b 	bl	8005098 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8005422:	2200      	movs	r2, #0
 8005424:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005426:	4613      	mov	r3, r2
 8005428:	f240 2162 	movw	r1, #610	; 0x262
 800542c:	4608      	mov	r0, r1
 800542e:	f001 fa8e 	bl	800694e <SUBGRF_SetDioIrqParams>
 8005432:	e012      	b.n	800545a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8005434:	4b14      	ldr	r3, [pc, #80]	; (8005488 <RadioIrqProcess+0x2cc>)
 8005436:	2201      	movs	r2, #1
 8005438:	2100      	movs	r1, #0
 800543a:	2002      	movs	r0, #2
 800543c:	f001 ff44 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8005440:	f001 fe5c 	bl	80070fc <RFW_Is_Init>
 8005444:	2801      	cmp	r0, #1
 8005446:	d108      	bne.n	800545a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8005448:	f001 fe64 	bl	8007114 <RFW_ReceivePayload>
 800544c:	e005      	b.n	800545a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <RadioIrqProcess+0x2d0>)
 8005450:	2201      	movs	r2, #1
 8005452:	2100      	movs	r1, #0
 8005454:	2002      	movs	r0, #2
 8005456:	f001 ff37 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
}
 800545a:	b003      	add	sp, #12
 800545c:	bd30      	pop	{r4, r5, pc}
 800545e:	bf00      	nop
 8005460:	2000053c 	.word	0x2000053c
 8005464:	080080e4 	.word	0x080080e4
 8005468:	48000400 	.word	0x48000400
 800546c:	20000524 	.word	0x20000524
 8005470:	20000520 	.word	0x20000520
 8005474:	20000598 	.word	0x20000598
 8005478:	20000420 	.word	0x20000420
 800547c:	20000560 	.word	0x20000560
 8005480:	10624dd3 	.word	0x10624dd3
 8005484:	080080f8 	.word	0x080080f8
 8005488:	08008104 	.word	0x08008104
 800548c:	08008110 	.word	0x08008110
        TimerStop( &RxTimeoutTimer );
 8005490:	4817      	ldr	r0, [pc, #92]	; (80054f0 <RadioIrqProcess+0x334>)
 8005492:	f002 f9c9 	bl	8007828 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005496:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <RadioIrqProcess+0x338>)
 8005498:	785b      	ldrb	r3, [r3, #1]
 800549a:	b173      	cbz	r3, 80054ba <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800549c:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <RadioIrqProcess+0x33c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0da      	beq.n	800545a <RadioIrqProcess+0x29e>
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0d7      	beq.n	800545a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 80054aa:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80054ac:	4b13      	ldr	r3, [pc, #76]	; (80054fc <RadioIrqProcess+0x340>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	2100      	movs	r1, #0
 80054b2:	2002      	movs	r0, #2
 80054b4:	f001 ff08 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
 80054b8:	e7cf      	b.n	800545a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80054ba:	2000      	movs	r0, #0
 80054bc:	f001 f89a 	bl	80065f4 <SUBGRF_SetStandby>
 80054c0:	e7ec      	b.n	800549c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80054c2:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <RadioIrqProcess+0x344>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	2100      	movs	r1, #0
 80054c8:	2002      	movs	r0, #2
 80054ca:	f001 fefd 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80054ce:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <RadioIrqProcess+0x338>)
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	b143      	cbz	r3, 80054e6 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80054d4:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <RadioIrqProcess+0x33c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0be      	beq.n	800545a <RadioIrqProcess+0x29e>
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0bb      	beq.n	800545a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80054e2:	4798      	blx	r3
}
 80054e4:	e7b9      	b.n	800545a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80054e6:	2000      	movs	r0, #0
 80054e8:	f001 f884 	bl	80065f4 <SUBGRF_SetStandby>
 80054ec:	e7f2      	b.n	80054d4 <RadioIrqProcess+0x318>
 80054ee:	bf00      	nop
 80054f0:	20000524 	.word	0x20000524
 80054f4:	2000053c 	.word	0x2000053c
 80054f8:	20000520 	.word	0x20000520
 80054fc:	0800811c 	.word	0x0800811c
 8005500:	08008128 	.word	0x08008128

08005504 <RadioOnDioIrq>:
{
 8005504:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8005506:	4b03      	ldr	r3, [pc, #12]	; (8005514 <RadioOnDioIrq+0x10>)
 8005508:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800550c:	f7ff fe56 	bl	80051bc <RadioIrqProcess>
}
 8005510:	bd08      	pop	{r3, pc}
 8005512:	bf00      	nop
 8005514:	2000053c 	.word	0x2000053c

08005518 <RadioGetWakeupTime>:
{
 8005518:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800551a:	f001 fd28 	bl	8006f6e <SUBGRF_GetRadioWakeUpTime>
}
 800551e:	3003      	adds	r0, #3
 8005520:	bd08      	pop	{r3, pc}

08005522 <RadioReadRegisters>:
{
 8005522:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005524:	f000 fffe 	bl	8006524 <SUBGRF_ReadRegisters>
}
 8005528:	bd08      	pop	{r3, pc}

0800552a <RadioWriteRegisters>:
{
 800552a:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800552c:	f000 ffb8 	bl	80064a0 <SUBGRF_WriteRegisters>
}
 8005530:	bd08      	pop	{r3, pc}

08005532 <RadioRssi>:
{
 8005532:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8005534:	f001 fc6a 	bl	8006e0c <SUBGRF_GetRssiInst>
}
 8005538:	b200      	sxth	r0, r0
 800553a:	bd08      	pop	{r3, pc}

0800553c <RadioSetTxContinuousWave>:
{
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8005540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005544:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8005548:	f001 fa74 	bl	8006a34 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800554c:	4628      	mov	r0, r5
 800554e:	f001 fcf7 	bl	8006f40 <SUBGRF_SetRfTxPower>
 8005552:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005554:	210e      	movs	r1, #14
 8005556:	f640 101f 	movw	r0, #2335	; 0x91f
 800555a:	f000 ff55 	bl	8006408 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800555e:	2101      	movs	r1, #1
 8005560:	4628      	mov	r0, r5
 8005562:	f001 fcd9 	bl	8006f18 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005566:	f001 f91f 	bl	80067a8 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800556a:	4d04      	ldr	r5, [pc, #16]	; (800557c <RadioSetTxContinuousWave+0x40>)
 800556c:	4621      	mov	r1, r4
 800556e:	4628      	mov	r0, r5
 8005570:	f002 f9fa 	bl	8007968 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005574:	4628      	mov	r0, r5
 8005576:	f002 f9b1 	bl	80078dc <UTIL_TIMER_Start>
}
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000598 	.word	0x20000598

08005580 <RadioSetChannel>:
{
 8005580:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8005582:	f001 fa57 	bl	8006a34 <SUBGRF_SetRfFrequency>
}
 8005586:	bd08      	pop	{r3, pc}

08005588 <RadioStartCad>:
{
 8005588:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800558a:	2100      	movs	r1, #0
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <RadioStartCad+0x24>)
 800558e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8005592:	f001 fcc1 	bl	8006f18 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005596:	2300      	movs	r3, #0
 8005598:	461a      	mov	r2, r3
 800559a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800559e:	4608      	mov	r0, r1
 80055a0:	f001 f9d5 	bl	800694e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80055a4:	f001 f8f4 	bl	8006790 <SUBGRF_SetCad>
}
 80055a8:	bd08      	pop	{r3, pc}
 80055aa:	bf00      	nop
 80055ac:	2000053c 	.word	0x2000053c

080055b0 <RadioRx>:
{
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80055b4:	f001 fda2 	bl	80070fc <RFW_Is_Init>
 80055b8:	2801      	cmp	r0, #1
 80055ba:	d019      	beq.n	80055f0 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80055bc:	2300      	movs	r3, #0
 80055be:	461a      	mov	r2, r3
 80055c0:	f240 2162 	movw	r1, #610	; 0x262
 80055c4:	4608      	mov	r0, r1
 80055c6:	f001 f9c2 	bl	800694e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80055ca:	b9a4      	cbnz	r4, 80055f6 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80055cc:	4c11      	ldr	r4, [pc, #68]	; (8005614 <RadioRx+0x64>)
 80055ce:	2100      	movs	r1, #0
 80055d0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80055d2:	4b11      	ldr	r3, [pc, #68]	; (8005618 <RadioRx+0x68>)
 80055d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055d8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80055da:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80055de:	f001 fc9b 	bl	8006f18 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80055e2:	7863      	ldrb	r3, [r4, #1]
 80055e4:	b183      	cbz	r3, 8005608 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80055e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80055ea:	f001 f83f 	bl	800666c <SUBGRF_SetRx>
}
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 80055f0:	f001 fd8c 	bl	800710c <RFW_ReceiveInit>
 80055f4:	e7e9      	b.n	80055ca <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80055f6:	4d09      	ldr	r5, [pc, #36]	; (800561c <RadioRx+0x6c>)
 80055f8:	4621      	mov	r1, r4
 80055fa:	4628      	mov	r0, r5
 80055fc:	f002 f9b4 	bl	8007968 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005600:	4628      	mov	r0, r5
 8005602:	f002 f96b 	bl	80078dc <UTIL_TIMER_Start>
 8005606:	e7e1      	b.n	80055cc <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005608:	4b02      	ldr	r3, [pc, #8]	; (8005614 <RadioRx+0x64>)
 800560a:	6898      	ldr	r0, [r3, #8]
 800560c:	0180      	lsls	r0, r0, #6
 800560e:	f001 f82d 	bl	800666c <SUBGRF_SetRx>
}
 8005612:	e7ec      	b.n	80055ee <RadioRx+0x3e>
 8005614:	2000053c 	.word	0x2000053c
 8005618:	48000400 	.word	0x48000400
 800561c:	20000524 	.word	0x20000524

08005620 <RadioSleep>:
{
 8005620:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8005622:	f04f 0004 	mov.w	r0, #4
 8005626:	f000 ffc5 	bl	80065b4 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800562a:	2002      	movs	r0, #2
 800562c:	f7fb f96e 	bl	800090c <HAL_Delay>
}
 8005630:	bd08      	pop	{r3, pc}
	...

08005634 <RadioSend>:
{
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	4605      	mov	r5, r0
 800563a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800563c:	2300      	movs	r3, #0
 800563e:	461a      	mov	r2, r3
 8005640:	f240 2101 	movw	r1, #513	; 0x201
 8005644:	4608      	mov	r0, r1
 8005646:	f001 f982 	bl	800694e <SUBGRF_SetDioIrqParams>
 800564a:	4b5e      	ldr	r3, [pc, #376]	; (80057c4 <RadioSend+0x190>)
 800564c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005650:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005652:	4e5d      	ldr	r6, [pc, #372]	; (80057c8 <RadioSend+0x194>)
 8005654:	2101      	movs	r1, #1
 8005656:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800565a:	f001 fc5d 	bl	8006f18 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800565e:	7833      	ldrb	r3, [r6, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d103      	bne.n	800566c <RadioSend+0x38>
 8005664:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8005668:	2b06      	cmp	r3, #6
 800566a:	d013      	beq.n	8005694 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800566c:	f640 0089 	movw	r0, #2185	; 0x889
 8005670:	f000 feda 	bl	8006428 <SUBGRF_ReadRegister>
 8005674:	f040 0104 	orr.w	r1, r0, #4
 8005678:	b2c9      	uxtb	r1, r1
 800567a:	f640 0089 	movw	r0, #2185	; 0x889
 800567e:	f000 fec3 	bl	8006408 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8005682:	4b51      	ldr	r3, [pc, #324]	; (80057c8 <RadioSend+0x194>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d819      	bhi.n	80056be <RadioSend+0x8a>
 800568a:	e8df f003 	tbb	[pc, r3]
 800568e:	0e24      	.short	0x0e24
 8005690:	5024      	.short	0x5024
 8005692:	5d          	.byte	0x5d
 8005693:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005694:	f640 0089 	movw	r0, #2185	; 0x889
 8005698:	f000 fec6 	bl	8006428 <SUBGRF_ReadRegister>
 800569c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80056a0:	f640 0089 	movw	r0, #2185	; 0x889
 80056a4:	f000 feb0 	bl	8006408 <SUBGRF_WriteRegister>
 80056a8:	e7eb      	b.n	8005682 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80056aa:	4847      	ldr	r0, [pc, #284]	; (80057c8 <RadioSend+0x194>)
 80056ac:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80056ae:	300e      	adds	r0, #14
 80056b0:	f001 fb1c 	bl	8006cec <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80056b4:	2200      	movs	r2, #0
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 ffcf 	bl	800665c <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80056be:	4c43      	ldr	r4, [pc, #268]	; (80057cc <RadioSend+0x198>)
 80056c0:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <RadioSend+0x194>)
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	4620      	mov	r0, r4
 80056c6:	f002 f94f 	bl	8007968 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80056ca:	4620      	mov	r0, r4
 80056cc:	f002 f906 	bl	80078dc <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80056d0:	2000      	movs	r0, #0
}
 80056d2:	b002      	add	sp, #8
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80056d6:	f001 fd11 	bl	80070fc <RFW_Is_Init>
 80056da:	2801      	cmp	r0, #1
 80056dc:	d00a      	beq.n	80056f4 <RadioSend+0xc0>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80056de:	483a      	ldr	r0, [pc, #232]	; (80057c8 <RadioSend+0x194>)
 80056e0:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80056e2:	300e      	adds	r0, #14
 80056e4:	f001 fb02 	bl	8006cec <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80056e8:	2200      	movs	r2, #0
 80056ea:	4621      	mov	r1, r4
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 ffb5 	bl	800665c <SUBGRF_SendPayload>
 80056f2:	e7e4      	b.n	80056be <RadioSend+0x8a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80056f4:	f10d 0207 	add.w	r2, sp, #7
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f001 fd03 	bl	8007106 <RFW_TransmitInit>
 8005700:	b968      	cbnz	r0, 800571e <RadioSend+0xea>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005702:	4831      	ldr	r0, [pc, #196]	; (80057c8 <RadioSend+0x194>)
 8005704:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005708:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800570a:	300e      	adds	r0, #14
 800570c:	f001 faee 	bl	8006cec <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8005710:	2200      	movs	r2, #0
 8005712:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005716:	4628      	mov	r0, r5
 8005718:	f000 ffa0 	bl	800665c <SUBGRF_SendPayload>
 800571c:	e7cf      	b.n	80056be <RadioSend+0x8a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800571e:	4b2c      	ldr	r3, [pc, #176]	; (80057d0 <RadioSend+0x19c>)
 8005720:	2201      	movs	r2, #1
 8005722:	2100      	movs	r1, #0
 8005724:	2002      	movs	r0, #2
 8005726:	f001 fdcf 	bl	80072c8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800572a:	2003      	movs	r0, #3
 800572c:	e7d1      	b.n	80056d2 <RadioSend+0x9e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800572e:	4826      	ldr	r0, [pc, #152]	; (80057c8 <RadioSend+0x194>)
 8005730:	2302      	movs	r3, #2
 8005732:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005734:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005736:	300e      	adds	r0, #14
 8005738:	f001 fad8 	bl	8006cec <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800573c:	2200      	movs	r2, #0
 800573e:	4621      	mov	r1, r4
 8005740:	4628      	mov	r0, r5
 8005742:	f000 ff8b 	bl	800665c <SUBGRF_SendPayload>
            break;
 8005746:	e7ba      	b.n	80056be <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 8005748:	4622      	mov	r2, r4
 800574a:	4629      	mov	r1, r5
 800574c:	4821      	ldr	r0, [pc, #132]	; (80057d4 <RadioSend+0x1a0>)
 800574e:	f7ff fc29 	bl	8004fa4 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005752:	4e1d      	ldr	r6, [pc, #116]	; (80057c8 <RadioSend+0x194>)
 8005754:	2302      	movs	r3, #2
 8005756:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005758:	1c65      	adds	r5, r4, #1
 800575a:	b2ed      	uxtb	r5, r5
 800575c:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800575e:	f106 000e 	add.w	r0, r6, #14
 8005762:	f001 fac3 	bl	8006cec <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8005766:	2100      	movs	r1, #0
 8005768:	20f1      	movs	r0, #241	; 0xf1
 800576a:	f7ff fc95 	bl	8005098 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800576e:	2100      	movs	r1, #0
 8005770:	20f0      	movs	r0, #240	; 0xf0
 8005772:	f7ff fc91 	bl	8005098 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005776:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8005778:	2b64      	cmp	r3, #100	; 0x64
 800577a:	d019      	beq.n	80057b0 <RadioSend+0x17c>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800577c:	21e1      	movs	r1, #225	; 0xe1
 800577e:	20f3      	movs	r0, #243	; 0xf3
 8005780:	f7ff fc8a 	bl	8005098 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8005784:	2104      	movs	r1, #4
 8005786:	20f2      	movs	r0, #242	; 0xf2
 8005788:	f7ff fc86 	bl	8005098 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800578c:	00e1      	lsls	r1, r4, #3
 800578e:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005790:	0a09      	lsrs	r1, r1, #8
 8005792:	20f4      	movs	r0, #244	; 0xf4
 8005794:	f7ff fc80 	bl	8005098 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8005798:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 800579c:	20f5      	movs	r0, #245	; 0xf5
 800579e:	f7ff fc7b 	bl	8005098 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80057a2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80057a6:	4629      	mov	r1, r5
 80057a8:	480a      	ldr	r0, [pc, #40]	; (80057d4 <RadioSend+0x1a0>)
 80057aa:	f000 ff57 	bl	800665c <SUBGRF_SendPayload>
            break;
 80057ae:	e786      	b.n	80056be <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80057b0:	2170      	movs	r1, #112	; 0x70
 80057b2:	20f3      	movs	r0, #243	; 0xf3
 80057b4:	f7ff fc70 	bl	8005098 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80057b8:	211d      	movs	r1, #29
 80057ba:	20f2      	movs	r0, #242	; 0xf2
 80057bc:	f7ff fc6c 	bl	8005098 <RadioWrite>
 80057c0:	e7e4      	b.n	800578c <RadioSend+0x158>
 80057c2:	bf00      	nop
 80057c4:	48000400 	.word	0x48000400
 80057c8:	2000053c 	.word	0x2000053c
 80057cc:	20000598 	.word	0x20000598
 80057d0:	08008138 	.word	0x08008138
 80057d4:	20000420 	.word	0x20000420

080057d8 <RadioRandom>:
{
 80057d8:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80057da:	2300      	movs	r3, #0
 80057dc:	461a      	mov	r2, r3
 80057de:	4619      	mov	r1, r3
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 f8b4 	bl	800694e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80057e6:	f000 ff5b 	bl	80066a0 <SUBGRF_GetRandom>
}
 80057ea:	bd08      	pop	{r3, pc}

080057ec <RadioSetModem>:
{
 80057ec:	b510      	push	{r4, lr}
 80057ee:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 80057f0:	4b1c      	ldr	r3, [pc, #112]	; (8005864 <RadioSetModem+0x78>)
 80057f2:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 80057f4:	f001 fc8f 	bl	8007116 <RFW_SetRadioModem>
    switch( modem )
 80057f8:	2c05      	cmp	r4, #5
 80057fa:	d804      	bhi.n	8005806 <RadioSetModem+0x1a>
 80057fc:	e8df f004 	tbb	[pc, r4]
 8005800:	1d03110a 	.word	0x1d03110a
 8005804:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8005806:	2003      	movs	r0, #3
 8005808:	f001 f940 	bl	8006a8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800580c:	4b15      	ldr	r3, [pc, #84]	; (8005864 <RadioSetModem+0x78>)
 800580e:	2200      	movs	r2, #0
 8005810:	735a      	strb	r2, [r3, #13]
}
 8005812:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005814:	2000      	movs	r0, #0
 8005816:	f001 f939 	bl	8006a8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <RadioSetModem+0x78>)
 800581c:	2200      	movs	r2, #0
 800581e:	735a      	strb	r2, [r3, #13]
        break;
 8005820:	e7f7      	b.n	8005812 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005822:	2001      	movs	r0, #1
 8005824:	f001 f932 	bl	8006a8c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <RadioSetModem+0x78>)
 800582a:	7b5a      	ldrb	r2, [r3, #13]
 800582c:	7b18      	ldrb	r0, [r3, #12]
 800582e:	4282      	cmp	r2, r0
 8005830:	d0ef      	beq.n	8005812 <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005832:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005834:	f000 fade 	bl	8005df4 <RadioSetPublicNetwork>
 8005838:	e7eb      	b.n	8005812 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800583a:	2002      	movs	r0, #2
 800583c:	f001 f926 	bl	8006a8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005840:	4b08      	ldr	r3, [pc, #32]	; (8005864 <RadioSetModem+0x78>)
 8005842:	2200      	movs	r2, #0
 8005844:	735a      	strb	r2, [r3, #13]
        break;
 8005846:	e7e4      	b.n	8005812 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005848:	2002      	movs	r0, #2
 800584a:	f001 f91f 	bl	8006a8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <RadioSetModem+0x78>)
 8005850:	2200      	movs	r2, #0
 8005852:	735a      	strb	r2, [r3, #13]
        break;
 8005854:	e7dd      	b.n	8005812 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005856:	2000      	movs	r0, #0
 8005858:	f001 f918 	bl	8006a8c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800585c:	4b01      	ldr	r3, [pc, #4]	; (8005864 <RadioSetModem+0x78>)
 800585e:	2200      	movs	r2, #0
 8005860:	735a      	strb	r2, [r3, #13]
}
 8005862:	e7d6      	b.n	8005812 <RadioSetModem+0x26>
 8005864:	2000053c 	.word	0x2000053c

08005868 <RadioSetTxGenericConfig>:
{
 8005868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586c:	b086      	sub	sp, #24
 800586e:	4605      	mov	r5, r0
 8005870:	460c      	mov	r4, r1
 8005872:	4617      	mov	r7, r2
 8005874:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8005876:	2100      	movs	r1, #0
 8005878:	9104      	str	r1, [sp, #16]
 800587a:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800587c:	f001 fc3d 	bl	80070fa <RFW_DeInit>
    switch( modem )
 8005880:	2d03      	cmp	r5, #3
 8005882:	f200 8156 	bhi.w	8005b32 <RadioSetTxGenericConfig+0x2ca>
 8005886:	e8df f015 	tbh	[pc, r5, lsl #1]
 800588a:	007a      	.short	0x007a
 800588c:	014000dd 	.word	0x014000dd
 8005890:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 8005892:	7ca2      	ldrb	r2, [r4, #18]
 8005894:	2a08      	cmp	r2, #8
 8005896:	f200 8159 	bhi.w	8005b4c <RadioSetTxGenericConfig+0x2e4>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800589a:	68a1      	ldr	r1, [r4, #8]
 800589c:	a804      	add	r0, sp, #16
 800589e:	f001 fe29 	bl	80074f4 <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8154 	beq.w	8005b52 <RadioSetTxGenericConfig+0x2ea>
        else if( config->msk.BitRate <= 10000 )
 80058aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d823      	bhi.n	80058fa <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80058b2:	4bae      	ldr	r3, [pc, #696]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 80058b4:	2203      	movs	r2, #3
 80058b6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80058b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80058c0:	7ce2      	ldrb	r2, [r4, #19]
 80058c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            radio_modem = MODEM_MSK;
 80058c6:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	00da      	lsls	r2, r3, #3
 80058cc:	4ba7      	ldr	r3, [pc, #668]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 80058ce:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80058d0:	2204      	movs	r2, #4
 80058d2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80058d4:	7ca2      	ldrb	r2, [r4, #18]
 80058d6:	00d2      	lsls	r2, r2, #3
 80058d8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80058da:	2200      	movs	r2, #0
 80058dc:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80058de:	7da3      	ldrb	r3, [r4, #22]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d018      	beq.n	8005916 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80058e4:	7d23      	ldrb	r3, [r4, #20]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d015      	beq.n	8005916 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80058ea:	7d62      	ldrb	r2, [r4, #21]
 80058ec:	4b9f      	ldr	r3, [pc, #636]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 80058ee:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80058f0:	7da2      	ldrb	r2, [r4, #22]
 80058f2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80058f4:	7d22      	ldrb	r2, [r4, #20]
 80058f6:	755a      	strb	r2, [r3, #21]
 80058f8:	e026      	b.n	8005948 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80058fa:	4b9c      	ldr	r3, [pc, #624]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 80058fc:	2500      	movs	r5, #0
 80058fe:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005900:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8005904:	6822      	ldr	r2, [r4, #0]
 8005906:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8005908:	7ce2      	ldrb	r2, [r4, #19]
 800590a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800590e:	6822      	ldr	r2, [r4, #0]
 8005910:	0892      	lsrs	r2, r2, #2
 8005912:	641a      	str	r2, [r3, #64]	; 0x40
 8005914:	e7d8      	b.n	80058c8 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8005916:	7d62      	ldrb	r2, [r4, #21]
 8005918:	f102 030f 	add.w	r3, r2, #15
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d901      	bls.n	8005926 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005922:	2a01      	cmp	r2, #1
 8005924:	d128      	bne.n	8005978 <RadioSetTxGenericConfig+0x110>
            ConfigGeneric.TxConfig = config;
 8005926:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8005928:	2301      	movs	r3, #1
 800592a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800592e:	4a90      	ldr	r2, [pc, #576]	; (8005b70 <RadioSetTxGenericConfig+0x308>)
 8005930:	4b90      	ldr	r3, [pc, #576]	; (8005b74 <RadioSetTxGenericConfig+0x30c>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	a801      	add	r0, sp, #4
 8005936:	f001 fbdd 	bl	80070f4 <RFW_Init>
 800593a:	b9e8      	cbnz	r0, 8005978 <RadioSetTxGenericConfig+0x110>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800593c:	4b8b      	ldr	r3, [pc, #556]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 800593e:	2200      	movs	r2, #0
 8005940:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8005942:	2101      	movs	r1, #1
 8005944:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005946:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8005948:	f7ff fc22 	bl	8005190 <RadioStandby>
        RadioSetModem( radio_modem );
 800594c:	4628      	mov	r0, r5
 800594e:	f7ff ff4d 	bl	80057ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005952:	4d86      	ldr	r5, [pc, #536]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005954:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8005958:	f001 f940 	bl	8006bdc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800595c:	f105 000e 	add.w	r0, r5, #14
 8005960:	f001 f9c4 	bl	8006cec <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005964:	a804      	add	r0, sp, #16
 8005966:	f000 fdab 	bl	80064c0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800596a:	8a20      	ldrh	r0, [r4, #16]
 800596c:	f000 fd7f 	bl	800646e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8005970:	89a0      	ldrh	r0, [r4, #12]
 8005972:	f000 fdc2 	bl	80064fa <SUBGRF_SetCrcPolynomial>
        break;
 8005976:	e0dc      	b.n	8005b32 <RadioSetTxGenericConfig+0x2ca>
                return -1;
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	e0e3      	b.n	8005b46 <RadioSetTxGenericConfig+0x2de>
        if( config->fsk.BitRate == 0 )
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80e9 	beq.w	8005b58 <RadioSetTxGenericConfig+0x2f0>
        if( config->fsk.SyncWordLength > 8 )
 8005986:	7ca2      	ldrb	r2, [r4, #18]
 8005988:	2a08      	cmp	r2, #8
 800598a:	f200 80e8 	bhi.w	8005b5e <RadioSetTxGenericConfig+0x2f6>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800598e:	68a1      	ldr	r1, [r4, #8]
 8005990:	a804      	add	r0, sp, #16
 8005992:	f001 fdaf 	bl	80074f4 <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005996:	4b75      	ldr	r3, [pc, #468]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800599e:	6821      	ldr	r1, [r4, #0]
 80059a0:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80059a2:	7ce1      	ldrb	r1, [r4, #19]
 80059a4:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80059a8:	69a1      	ldr	r1, [r4, #24]
 80059aa:	6419      	str	r1, [r3, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80059ac:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80059ae:	6861      	ldr	r1, [r4, #4]
 80059b0:	00c9      	lsls	r1, r1, #3
 80059b2:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80059b4:	2104      	movs	r1, #4
 80059b6:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80059b8:	7ca1      	ldrb	r1, [r4, #18]
 80059ba:	00c9      	lsls	r1, r1, #3
 80059bc:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80059be:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80059c0:	7da3      	ldrb	r3, [r4, #22]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d00a      	beq.n	80059dc <RadioSetTxGenericConfig+0x174>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80059c6:	7d23      	ldrb	r3, [r4, #20]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d007      	beq.n	80059dc <RadioSetTxGenericConfig+0x174>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80059cc:	7d62      	ldrb	r2, [r4, #21]
 80059ce:	4b67      	ldr	r3, [pc, #412]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 80059d0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80059d2:	7da2      	ldrb	r2, [r4, #22]
 80059d4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80059d6:	7d22      	ldrb	r2, [r4, #20]
 80059d8:	755a      	strb	r2, [r3, #21]
 80059da:	e018      	b.n	8005a0e <RadioSetTxGenericConfig+0x1a6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80059dc:	7d62      	ldrb	r2, [r4, #21]
 80059de:	f102 030f 	add.w	r3, r2, #15
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d901      	bls.n	80059ec <RadioSetTxGenericConfig+0x184>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80059e8:	2a01      	cmp	r2, #1
 80059ea:	d128      	bne.n	8005a3e <RadioSetTxGenericConfig+0x1d6>
            ConfigGeneric.rtx = CONFIG_TX;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 80059f2:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80059f4:	4a5e      	ldr	r2, [pc, #376]	; (8005b70 <RadioSetTxGenericConfig+0x308>)
 80059f6:	4b5f      	ldr	r3, [pc, #380]	; (8005b74 <RadioSetTxGenericConfig+0x30c>)
 80059f8:	6819      	ldr	r1, [r3, #0]
 80059fa:	a801      	add	r0, sp, #4
 80059fc:	f001 fb7a 	bl	80070f4 <RFW_Init>
 8005a00:	b9e8      	cbnz	r0, 8005a3e <RadioSetTxGenericConfig+0x1d6>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005a02:	4b5a      	ldr	r3, [pc, #360]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8005a08:	2101      	movs	r1, #1
 8005a0a:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005a0c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8005a0e:	f7ff fbbf 	bl	8005190 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8005a12:	2000      	movs	r0, #0
 8005a14:	f7ff feea 	bl	80057ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005a18:	4d54      	ldr	r5, [pc, #336]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005a1a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8005a1e:	f001 f8dd 	bl	8006bdc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a22:	f105 000e 	add.w	r0, r5, #14
 8005a26:	f001 f961 	bl	8006cec <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005a2a:	a804      	add	r0, sp, #16
 8005a2c:	f000 fd48 	bl	80064c0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8005a30:	8a20      	ldrh	r0, [r4, #16]
 8005a32:	f000 fd1c 	bl	800646e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8005a36:	89a0      	ldrh	r0, [r4, #12]
 8005a38:	f000 fd5f 	bl	80064fa <SUBGRF_SetCrcPolynomial>
        break;
 8005a3c:	e079      	b.n	8005b32 <RadioSetTxGenericConfig+0x2ca>
                return -1;
 8005a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a42:	e080      	b.n	8005b46 <RadioSetTxGenericConfig+0x2de>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005a44:	4b49      	ldr	r3, [pc, #292]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8005a4c:	7822      	ldrb	r2, [r4, #0]
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8005a52:	7862      	ldrb	r2, [r4, #1]
 8005a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8005a58:	78a2      	ldrb	r2, [r4, #2]
 8005a5a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8005a5e:	78e3      	ldrb	r3, [r4, #3]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d033      	beq.n	8005acc <RadioSetTxGenericConfig+0x264>
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d036      	beq.n	8005ad6 <RadioSetTxGenericConfig+0x26e>
 8005a68:	b35b      	cbz	r3, 8005ac2 <RadioSetTxGenericConfig+0x25a>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005a6a:	4d40      	ldr	r5, [pc, #256]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005a6c:	f04f 0801 	mov.w	r8, #1
 8005a70:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8005a74:	88a3      	ldrh	r3, [r4, #4]
 8005a76:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8005a78:	79a3      	ldrb	r3, [r4, #6]
 8005a7a:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8005a7c:	79e3      	ldrb	r3, [r4, #7]
 8005a7e:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8005a82:	7a23      	ldrb	r3, [r4, #8]
 8005a84:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8005a88:	f7ff fb82 	bl	8005190 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	f7ff fead 	bl	80057ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005a92:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8005a96:	f001 f8a1 	bl	8006bdc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a9a:	f105 000e 	add.w	r0, r5, #14
 8005a9e:	f001 f925 	bl	8006cec <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8005aa2:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d024      	beq.n	8005af4 <RadioSetTxGenericConfig+0x28c>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005aaa:	f640 0089 	movw	r0, #2185	; 0x889
 8005aae:	f000 fcbb 	bl	8006428 <SUBGRF_ReadRegister>
 8005ab2:	f040 0104 	orr.w	r1, r0, #4
 8005ab6:	b2c9      	uxtb	r1, r1
 8005ab8:	f640 0089 	movw	r0, #2185	; 0x889
 8005abc:	f000 fca4 	bl	8006408 <SUBGRF_WriteRegister>
 8005ac0:	e037      	b.n	8005b32 <RadioSetTxGenericConfig+0x2ca>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005aca:	e7ce      	b.n	8005a6a <RadioSetTxGenericConfig+0x202>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8005acc:	4b27      	ldr	r3, [pc, #156]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005ad4:	e7c9      	b.n	8005a6a <RadioSetTxGenericConfig+0x202>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8005ad6:	7823      	ldrb	r3, [r4, #0]
 8005ad8:	3b0b      	subs	r3, #11
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d904      	bls.n	8005aea <RadioSetTxGenericConfig+0x282>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005ae0:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005ae8:	e7bf      	b.n	8005a6a <RadioSetTxGenericConfig+0x202>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005af2:	e7ba      	b.n	8005a6a <RadioSetTxGenericConfig+0x202>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005af4:	f640 0089 	movw	r0, #2185	; 0x889
 8005af8:	f000 fc96 	bl	8006428 <SUBGRF_ReadRegister>
 8005afc:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8005b00:	f640 0089 	movw	r0, #2185	; 0x889
 8005b04:	f000 fc80 	bl	8006408 <SUBGRF_WriteRegister>
 8005b08:	e013      	b.n	8005b32 <RadioSetTxGenericConfig+0x2ca>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b12:	d227      	bcs.n	8005b64 <RadioSetTxGenericConfig+0x2fc>
        RadioSetModem( MODEM_BPSK );
 8005b14:	2003      	movs	r0, #3
 8005b16:	f7ff fe69 	bl	80057ec <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005b1a:	4814      	ldr	r0, [pc, #80]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005b26:	2316      	movs	r3, #22
 8005b28:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005b2c:	3038      	adds	r0, #56	; 0x38
 8005b2e:	f001 f855 	bl	8006bdc <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005b32:	4638      	mov	r0, r7
 8005b34:	f001 fa04 	bl	8006f40 <SUBGRF_SetRfTxPower>
 8005b38:	4c0c      	ldr	r4, [pc, #48]	; (8005b6c <RadioSetTxGenericConfig+0x304>)
 8005b3a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8005b3e:	f001 fae1 	bl	8007104 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8005b42:	6066      	str	r6, [r4, #4]
    return 0;
 8005b44:	2000      	movs	r0, #0
}
 8005b46:	b006      	add	sp, #24
 8005b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	e7f9      	b.n	8005b46 <RadioSetTxGenericConfig+0x2de>
            return -1;
 8005b52:	f04f 30ff 	mov.w	r0, #4294967295
 8005b56:	e7f6      	b.n	8005b46 <RadioSetTxGenericConfig+0x2de>
            return -1;
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	e7f3      	b.n	8005b46 <RadioSetTxGenericConfig+0x2de>
            return -1;
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b62:	e7f0      	b.n	8005b46 <RadioSetTxGenericConfig+0x2de>
            return -1;
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	e7ed      	b.n	8005b46 <RadioSetTxGenericConfig+0x2de>
 8005b6a:	bf00      	nop
 8005b6c:	2000053c 	.word	0x2000053c
 8005b70:	20000598 	.word	0x20000598
 8005b74:	20000520 	.word	0x20000520

08005b78 <RadioSetRxGenericConfig>:
{
 8005b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7c:	b086      	sub	sp, #24
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460c      	mov	r4, r1
 8005b82:	4615      	mov	r5, r2
 8005b84:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8005b86:	2300      	movs	r3, #0
 8005b88:	9304      	str	r3, [sp, #16]
 8005b8a:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8005b8c:	f001 fab5 	bl	80070fa <RFW_DeInit>
    if( rxContinuous != 0 )
 8005b90:	b105      	cbz	r5, 8005b94 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 8005b92:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8005b94:	3d00      	subs	r5, #0
 8005b96:	bf18      	it	ne
 8005b98:	2501      	movne	r5, #1
 8005b9a:	4b93      	ldr	r3, [pc, #588]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005b9c:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8005b9e:	b136      	cbz	r6, 8005bae <RadioSetRxGenericConfig+0x36>
 8005ba0:	2e01      	cmp	r6, #1
 8005ba2:	f000 808f 	beq.w	8005cc4 <RadioSetRxGenericConfig+0x14c>
 8005ba6:	2000      	movs	r0, #0
}
 8005ba8:	b006      	add	sp, #24
 8005baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 810d 	beq.w	8005dd0 <RadioSetRxGenericConfig+0x258>
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 810c 	beq.w	8005dd6 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 8005bbe:	7fa2      	ldrb	r2, [r4, #30]
 8005bc0:	2a08      	cmp	r2, #8
 8005bc2:	f200 810b 	bhi.w	8005ddc <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8005bc6:	6921      	ldr	r1, [r4, #16]
 8005bc8:	a804      	add	r0, sp, #16
 8005bca:	f001 fc93 	bl	80074f4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	3800      	subs	r0, #0
 8005bd2:	bf18      	it	ne
 8005bd4:	2001      	movne	r0, #1
 8005bd6:	f000 fdf5 	bl	80067c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005bda:	4d83      	ldr	r5, [pc, #524]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005bdc:	2600      	movs	r6, #0
 8005bde:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8005be6:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005bea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8005bee:	6860      	ldr	r0, [r4, #4]
 8005bf0:	f001 fa1e 	bl	8007030 <SUBGRF_GetFskBandwidthRegValue>
 8005bf4:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005bf8:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8005c00:	7fe3      	ldrb	r3, [r4, #31]
 8005c02:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8005c04:	7fa3      	ldrb	r3, [r4, #30]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8005c0a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8005c0e:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8005c10:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005c14:	b973      	cbnz	r3, 8005c34 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8005c16:	6961      	ldr	r1, [r4, #20]
 8005c18:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8005c1a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8005c1e:	2a02      	cmp	r2, #2
 8005c20:	d012      	beq.n	8005c48 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d010      	beq.n	8005c48 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8005c26:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8005c2a:	496f      	ldr	r1, [pc, #444]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005c2c:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8005c2e:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8005c30:	754b      	strb	r3, [r1, #21]
 8005c32:	e023      	b.n	8005c7c <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d003      	beq.n	8005c40 <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8005c38:	4a6b      	ldr	r2, [pc, #428]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005c3a:	21ff      	movs	r1, #255	; 0xff
 8005c3c:	7591      	strb	r1, [r2, #22]
 8005c3e:	e7ec      	b.n	8005c1a <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8005c40:	4a69      	ldr	r2, [pc, #420]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005c42:	21ff      	movs	r1, #255	; 0xff
 8005c44:	7591      	strb	r1, [r2, #22]
 8005c46:	e7e8      	b.n	8005c1a <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8005c48:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8005c4c:	f102 030f 	add.w	r3, r2, #15
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d901      	bls.n	8005c5a <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005c56:	2a01      	cmp	r2, #1
 8005c58:	d131      	bne.n	8005cbe <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 8005c60:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8005c62:	4a62      	ldr	r2, [pc, #392]	; (8005dec <RadioSetRxGenericConfig+0x274>)
 8005c64:	4b62      	ldr	r3, [pc, #392]	; (8005df0 <RadioSetRxGenericConfig+0x278>)
 8005c66:	6819      	ldr	r1, [r3, #0]
 8005c68:	a801      	add	r0, sp, #4
 8005c6a:	f001 fa43 	bl	80070f4 <RFW_Init>
 8005c6e:	bb30      	cbnz	r0, 8005cbe <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005c70:	4b5d      	ldr	r3, [pc, #372]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8005c76:	2101      	movs	r1, #1
 8005c78:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005c7a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8005c7c:	f7ff fa88 	bl	8005190 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8005c80:	2000      	movs	r0, #0
 8005c82:	f7ff fdb3 	bl	80057ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005c86:	4d58      	ldr	r5, [pc, #352]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005c88:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8005c8c:	f000 ffa6 	bl	8006bdc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c90:	f105 000e 	add.w	r0, r5, #14
 8005c94:	f001 f82a 	bl	8006cec <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005c98:	a804      	add	r0, sp, #16
 8005c9a:	f000 fc11 	bl	80064c0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8005c9e:	8ba0      	ldrh	r0, [r4, #28]
 8005ca0:	f000 fbe5 	bl	800646e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8005ca4:	8b20      	ldrh	r0, [r4, #24]
 8005ca6:	f000 fc28 	bl	80064fa <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8005caa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005cae:	fb07 f303 	mul.w	r3, r7, r3
 8005cb2:	68a2      	ldr	r2, [r4, #8]
 8005cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cb8:	60ab      	str	r3, [r5, #8]
    return status;
 8005cba:	2000      	movs	r0, #0
        break;
 8005cbc:	e774      	b.n	8005ba8 <RadioSetRxGenericConfig+0x30>
                return -1;
 8005cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc2:	e771      	b.n	8005ba8 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 8005cc4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 808b 	beq.w	8005de2 <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8005ccc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d055      	beq.n	8005d80 <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 8005cd4:	f04f 08ff 	mov.w	r8, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8005cd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005cda:	3800      	subs	r0, #0
 8005cdc:	bf18      	it	ne
 8005cde:	2001      	movne	r0, #1
 8005ce0:	f000 fd70 	bl	80067c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005ce4:	b2f8      	uxtb	r0, r7
 8005ce6:	f000 fd7a 	bl	80067de <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005cea:	4b3f      	ldr	r3, [pc, #252]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8005cf2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8005cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8005cfa:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8005d02:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8005d06:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8005d0a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d03e      	beq.n	8005d90 <RadioSetRxGenericConfig+0x218>
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d041      	beq.n	8005d9a <RadioSetRxGenericConfig+0x222>
 8005d16:	b3b3      	cbz	r3, 8005d86 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005d18:	4d33      	ldr	r5, [pc, #204]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005d1a:	2601      	movs	r6, #1
 8005d1c:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8005d1e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8005d20:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8005d22:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005d26:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005d28:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8005d2c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005d30:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8005d34:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005d38:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8005d3c:	f7ff fa28 	bl	8005190 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8005d40:	4630      	mov	r0, r6
 8005d42:	f7ff fd53 	bl	80057ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005d46:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8005d4a:	f000 ff47 	bl	8006bdc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d4e:	f105 000e 	add.w	r0, r5, #14
 8005d52:	f000 ffcb 	bl	8006cec <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005d56:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8005d5a:	42b3      	cmp	r3, r6
 8005d5c:	d02d      	beq.n	8005dba <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8005d5e:	f240 7036 	movw	r0, #1846	; 0x736
 8005d62:	f000 fb61 	bl	8006428 <SUBGRF_ReadRegister>
 8005d66:	f040 0104 	orr.w	r1, r0, #4
 8005d6a:	b2c9      	uxtb	r1, r1
 8005d6c:	f240 7036 	movw	r0, #1846	; 0x736
 8005d70:	f000 fb4a 	bl	8006408 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8005d74:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d7a:	609a      	str	r2, [r3, #8]
    return status;
 8005d7c:	2000      	movs	r0, #0
        break;
 8005d7e:	e713      	b.n	8005ba8 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8005d80:	f894 8014 	ldrb.w	r8, [r4, #20]
 8005d84:	e7a8      	b.n	8005cd8 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005d86:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005d8e:	e7c3      	b.n	8005d18 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8005d90:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005d98:	e7be      	b.n	8005d18 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8005d9a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005d9e:	3b0b      	subs	r3, #11
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d904      	bls.n	8005db0 <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005da6:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005dae:	e7b3      	b.n	8005d18 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8005db0:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <RadioSetRxGenericConfig+0x270>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005db8:	e7ae      	b.n	8005d18 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8005dba:	f240 7036 	movw	r0, #1846	; 0x736
 8005dbe:	f000 fb33 	bl	8006428 <SUBGRF_ReadRegister>
 8005dc2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8005dc6:	f240 7036 	movw	r0, #1846	; 0x736
 8005dca:	f000 fb1d 	bl	8006408 <SUBGRF_WriteRegister>
 8005dce:	e7d1      	b.n	8005d74 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	e6e8      	b.n	8005ba8 <RadioSetRxGenericConfig+0x30>
 8005dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dda:	e6e5      	b.n	8005ba8 <RadioSetRxGenericConfig+0x30>
            return -1;
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e6e2      	b.n	8005ba8 <RadioSetRxGenericConfig+0x30>
            return -1;
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295
 8005de6:	e6df      	b.n	8005ba8 <RadioSetRxGenericConfig+0x30>
 8005de8:	2000053c 	.word	0x2000053c
 8005dec:	20000524 	.word	0x20000524
 8005df0:	20000520 	.word	0x20000520

08005df4 <RadioSetPublicNetwork>:
{
 8005df4:	b510      	push	{r4, lr}
 8005df6:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8005df8:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <RadioSetPublicNetwork+0x40>)
 8005dfa:	7318      	strb	r0, [r3, #12]
 8005dfc:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8005dfe:	2001      	movs	r0, #1
 8005e00:	f7ff fcf4 	bl	80057ec <RadioSetModem>
    if( enable == true )
 8005e04:	b154      	cbz	r4, 8005e1c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8005e06:	2134      	movs	r1, #52	; 0x34
 8005e08:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005e0c:	f000 fafc 	bl	8006408 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8005e10:	2144      	movs	r1, #68	; 0x44
 8005e12:	f240 7041 	movw	r0, #1857	; 0x741
 8005e16:	f000 faf7 	bl	8006408 <SUBGRF_WriteRegister>
}
 8005e1a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8005e1c:	2114      	movs	r1, #20
 8005e1e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005e22:	f000 faf1 	bl	8006408 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8005e26:	2124      	movs	r1, #36	; 0x24
 8005e28:	f240 7041 	movw	r0, #1857	; 0x741
 8005e2c:	f000 faec 	bl	8006408 <SUBGRF_WriteRegister>
}
 8005e30:	e7f3      	b.n	8005e1a <RadioSetPublicNetwork+0x26>
 8005e32:	bf00      	nop
 8005e34:	2000053c 	.word	0x2000053c

08005e38 <RadioSetTxConfig>:
{
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	4604      	mov	r4, r0
 8005e40:	460d      	mov	r5, r1
 8005e42:	4691      	mov	r9, r2
 8005e44:	461f      	mov	r7, r3
 8005e46:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8005e4a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8005e4e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8005e52:	f001 f952 	bl	80070fa <RFW_DeInit>
    switch( modem )
 8005e56:	2c01      	cmp	r4, #1
 8005e58:	d05d      	beq.n	8005f16 <RadioSetTxConfig+0xde>
 8005e5a:	2c04      	cmp	r4, #4
 8005e5c:	f000 80aa 	beq.w	8005fb4 <RadioSetTxConfig+0x17c>
 8005e60:	b19c      	cbz	r4, 8005e8a <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005e62:	4628      	mov	r0, r5
 8005e64:	f001 f86c 	bl	8006f40 <SUBGRF_SetRfTxPower>
 8005e68:	4c5a      	ldr	r4, [pc, #360]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005e6a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005e6e:	210e      	movs	r1, #14
 8005e70:	f640 101f 	movw	r0, #2335	; 0x91f
 8005e74:	f000 fac8 	bl	8006408 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8005e78:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8005e7c:	f001 f942 	bl	8007104 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8005e80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e82:	6063      	str	r3, [r4, #4]
}
 8005e84:	b003      	add	sp, #12
 8005e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005e8a:	4c52      	ldr	r4, [pc, #328]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005e8c:	f04f 0b00 	mov.w	fp, #0
 8005e90:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005e94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e96:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005e98:	230b      	movs	r3, #11
 8005e9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	f001 f8c6 	bl	8007030 <SUBGRF_GetFskBandwidthRegValue>
 8005ea4:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005ea8:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005eac:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005eb0:	00f6      	lsls	r6, r6, #3
 8005eb2:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005eb8:	2318      	movs	r3, #24
 8005eba:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005ebc:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005ec0:	f088 0801 	eor.w	r8, r8, #1
 8005ec4:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8005ec8:	f1ba 0f00 	cmp.w	sl, #0
 8005ecc:	d01f      	beq.n	8005f0e <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005ece:	22f2      	movs	r2, #242	; 0xf2
 8005ed0:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005ed2:	4c40      	ldr	r4, [pc, #256]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8005ed8:	f7ff f95a 	bl	8005190 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8005edc:	2000      	movs	r0, #0
 8005ede:	f7ff fc85 	bl	80057ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005ee2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005ee6:	f000 fe79 	bl	8006bdc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005eea:	f104 000e 	add.w	r0, r4, #14
 8005eee:	f000 fefd 	bl	8006cec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005ef2:	4a39      	ldr	r2, [pc, #228]	; (8005fd8 <RadioSetTxConfig+0x1a0>)
 8005ef4:	466b      	mov	r3, sp
 8005ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005efa:	e883 0003 	stmia.w	r3, {r0, r1}
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fade 	bl	80064c0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005f04:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f08:	f000 fab1 	bl	800646e <SUBGRF_SetWhiteningSeed>
            break;
 8005f0c:	e7a9      	b.n	8005e62 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005f0e:	4b31      	ldr	r3, [pc, #196]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	75da      	strb	r2, [r3, #23]
 8005f14:	e7dd      	b.n	8005ed2 <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005f16:	4a2f      	ldr	r2, [pc, #188]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8005f26:	492d      	ldr	r1, [pc, #180]	; (8005fdc <RadioSetTxConfig+0x1a4>)
 8005f28:	5dc9      	ldrb	r1, [r1, r7]
 8005f2a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005f2e:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8005f32:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005f36:	b91f      	cbnz	r7, 8005f40 <RadioSetTxConfig+0x108>
 8005f38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f3a:	3a0b      	subs	r2, #11
 8005f3c:	2a01      	cmp	r2, #1
 8005f3e:	d92b      	bls.n	8005f98 <RadioSetTxConfig+0x160>
 8005f40:	2f01      	cmp	r7, #1
 8005f42:	d026      	beq.n	8005f92 <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005f44:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005f46:	2100      	movs	r1, #0
 8005f48:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005f4c:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005f4e:	2101      	movs	r1, #1
 8005f50:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005f52:	3b05      	subs	r3, #5
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	428b      	cmp	r3, r1
 8005f58:	d923      	bls.n	8005fa2 <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005f5a:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005f5c:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005f5e:	4c1d      	ldr	r4, [pc, #116]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005f60:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <RadioSetTxConfig+0x1a8>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005f6a:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005f6e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8005f72:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8005f76:	f7ff f90b 	bl	8005190 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7ff fc36 	bl	80057ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005f80:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005f84:	f000 fe2a 	bl	8006bdc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005f88:	f104 000e 	add.w	r0, r4, #14
 8005f8c:	f000 feae 	bl	8006cec <SUBGRF_SetPacketParams>
            break;
 8005f90:	e767      	b.n	8005e62 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f94:	2a0c      	cmp	r2, #12
 8005f96:	d1d5      	bne.n	8005f44 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005f98:	4a0e      	ldr	r2, [pc, #56]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8005fa0:	e7d4      	b.n	8005f4c <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 8005fa2:	2e0b      	cmp	r6, #11
 8005fa4:	d803      	bhi.n	8005fae <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	220c      	movs	r2, #12
 8005faa:	839a      	strh	r2, [r3, #28]
 8005fac:	e7d7      	b.n	8005f5e <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005fb0:	839e      	strh	r6, [r3, #28]
 8005fb2:	e7d4      	b.n	8005f5e <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 8005fb4:	2004      	movs	r0, #4
 8005fb6:	f7ff fc19 	bl	80057ec <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005fba:	4806      	ldr	r0, [pc, #24]	; (8005fd4 <RadioSetTxConfig+0x19c>)
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8005fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fc4:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005fc6:	2316      	movs	r3, #22
 8005fc8:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005fcc:	3038      	adds	r0, #56	; 0x38
 8005fce:	f000 fe05 	bl	8006bdc <SUBGRF_SetModulationParams>
            break;
 8005fd2:	e746      	b.n	8005e62 <RadioSetTxConfig+0x2a>
 8005fd4:	2000053c 	.word	0x2000053c
 8005fd8:	08007dbc 	.word	0x08007dbc
 8005fdc:	08008150 	.word	0x08008150
 8005fe0:	2000000c 	.word	0x2000000c

08005fe4 <RadioSetRxConfig>:
{
 8005fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	b087      	sub	sp, #28
 8005fea:	4604      	mov	r4, r0
 8005fec:	460e      	mov	r6, r1
 8005fee:	4615      	mov	r5, r2
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8005ff6:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8005ffa:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8005ffe:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8006002:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8006006:	4bb0      	ldr	r3, [pc, #704]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 8006008:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 800600c:	f001 f875 	bl	80070fa <RFW_DeInit>
    if( rxContinuous == true )
 8006010:	f1b8 0f00 	cmp.w	r8, #0
 8006014:	d001      	beq.n	800601a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8006016:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800601a:	b16f      	cbz	r7, 8006038 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 800601c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8006020:	4baa      	ldr	r3, [pc, #680]	; (80062cc <RadioSetRxConfig+0x2e8>)
 8006022:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8006024:	2c01      	cmp	r4, #1
 8006026:	f000 80d2 	beq.w	80061ce <RadioSetRxConfig+0x1ea>
 800602a:	2c05      	cmp	r4, #5
 800602c:	d008      	beq.n	8006040 <RadioSetRxConfig+0x5c>
 800602e:	2c00      	cmp	r4, #0
 8006030:	d07c      	beq.n	800612c <RadioSetRxConfig+0x148>
}
 8006032:	b007      	add	sp, #28
 8006034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8006038:	4ba4      	ldr	r3, [pc, #656]	; (80062cc <RadioSetRxConfig+0x2e8>)
 800603a:	22ff      	movs	r2, #255	; 0xff
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e7f1      	b.n	8006024 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006040:	2001      	movs	r0, #1
 8006042:	f000 fbbf 	bl	80067c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006046:	4ca0      	ldr	r4, [pc, #640]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 8006048:	2700      	movs	r7, #0
 800604a:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800604e:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006050:	2309      	movs	r3, #9
 8006052:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006056:	f44f 7348 	mov.w	r3, #800	; 0x320
 800605a:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800605c:	4630      	mov	r0, r6
 800605e:	f000 ffe7 	bl	8007030 <SUBGRF_GetFskBandwidthRegValue>
 8006062:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006066:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006068:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800606c:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006070:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006072:	2310      	movs	r3, #16
 8006074:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006076:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006078:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800607a:	4b94      	ldr	r3, [pc, #592]	; (80062cc <RadioSetRxConfig+0x2e8>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006080:	2301      	movs	r3, #1
 8006082:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006084:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8006086:	2005      	movs	r0, #5
 8006088:	f7ff fbb0 	bl	80057ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800608c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006090:	f000 fda4 	bl	8006bdc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006094:	f104 000e 	add.w	r0, r4, #14
 8006098:	f000 fe28 	bl	8006cec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800609c:	ab02      	add	r3, sp, #8
 800609e:	4a8c      	ldr	r2, [pc, #560]	; (80062d0 <RadioSetRxConfig+0x2ec>)
 80060a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fa09 	bl	80064c0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80060ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060b2:	f000 f9dc 	bl	800646e <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80060b6:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80060ba:	f7fe ffe9 	bl	8005090 <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80060be:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 80060c2:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80060c6:	f7fe ffe7 	bl	8005098 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80060ca:	2104      	movs	r1, #4
 80060cc:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80060d0:	f7fe ffe2 	bl	8005098 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80060d4:	f640 009b 	movw	r0, #2203	; 0x89b
 80060d8:	f7fe ffda 	bl	8005090 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80060dc:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80060e0:	f041 0108 	orr.w	r1, r1, #8
 80060e4:	f640 009b 	movw	r0, #2203	; 0x89b
 80060e8:	f7fe ffd6 	bl	8005098 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80060ec:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80060f0:	f7fe ffce 	bl	8005090 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80060f4:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80060f8:	f041 0118 	orr.w	r1, r1, #24
 80060fc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006100:	f7fe ffca 	bl	8005098 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8006104:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006108:	f7fe ffc2 	bl	8005090 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800610c:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8006110:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8006114:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006118:	f7fe ffbe 	bl	8005098 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800611c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006120:	fb03 f30a 	mul.w	r3, r3, sl
 8006124:	fbb3 f3f5 	udiv	r3, r3, r5
 8006128:	60a3      	str	r3, [r4, #8]
            break;
 800612a:	e782      	b.n	8006032 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800612c:	2000      	movs	r0, #0
 800612e:	f000 fb49 	bl	80067c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006132:	4c65      	ldr	r4, [pc, #404]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 8006134:	f04f 0800 	mov.w	r8, #0
 8006138:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800613c:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800613e:	230b      	movs	r3, #11
 8006140:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006144:	4630      	mov	r0, r6
 8006146:	f000 ff73 	bl	8007030 <SUBGRF_GetFskBandwidthRegValue>
 800614a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800614e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006152:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8006156:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800615a:	2304      	movs	r3, #4
 800615c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800615e:	2318      	movs	r3, #24
 8006160:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006162:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006166:	f087 0701 	eor.w	r7, r7, #1
 800616a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800616c:	4b57      	ldr	r3, [pc, #348]	; (80062cc <RadioSetRxConfig+0x2e8>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8006172:	f1bb 0f00 	cmp.w	fp, #0
 8006176:	d026      	beq.n	80061c6 <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006178:	22f2      	movs	r2, #242	; 0xf2
 800617a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800617c:	4c52      	ldr	r4, [pc, #328]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 800617e:	2301      	movs	r3, #1
 8006180:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8006182:	f7ff f805 	bl	8005190 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006186:	2000      	movs	r0, #0
 8006188:	f7ff fb30 	bl	80057ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800618c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006190:	f000 fd24 	bl	8006bdc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006194:	f104 000e 	add.w	r0, r4, #14
 8006198:	f000 fda8 	bl	8006cec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800619c:	4a4d      	ldr	r2, [pc, #308]	; (80062d4 <RadioSetRxConfig+0x2f0>)
 800619e:	ab04      	add	r3, sp, #16
 80061a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f989 	bl	80064c0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80061ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061b2:	f000 f95c 	bl	800646e <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80061b6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80061ba:	fb03 f30a 	mul.w	r3, r3, sl
 80061be:	fbb3 f3f5 	udiv	r3, r3, r5
 80061c2:	60a3      	str	r3, [r4, #8]
            break;
 80061c4:	e735      	b.n	8006032 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80061c6:	4b40      	ldr	r3, [pc, #256]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	75da      	strb	r2, [r3, #23]
 80061cc:	e7d6      	b.n	800617c <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80061ce:	2000      	movs	r0, #0
 80061d0:	f000 faf8 	bl	80067c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80061d4:	4a3c      	ldr	r2, [pc, #240]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 80061d6:	2301      	movs	r3, #1
 80061d8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80061dc:	b2eb      	uxtb	r3, r5
 80061de:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80061e2:	493d      	ldr	r1, [pc, #244]	; (80062d8 <RadioSetRxConfig+0x2f4>)
 80061e4:	5d89      	ldrb	r1, [r1, r6]
 80061e6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80061ea:	9901      	ldr	r1, [sp, #4]
 80061ec:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80061f0:	b91e      	cbnz	r6, 80061fa <RadioSetRxConfig+0x216>
 80061f2:	f1a5 020b 	sub.w	r2, r5, #11
 80061f6:	2a01      	cmp	r2, #1
 80061f8:	d94b      	bls.n	8006292 <RadioSetRxConfig+0x2ae>
 80061fa:	2e01      	cmp	r6, #1
 80061fc:	d047      	beq.n	800628e <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80061fe:	4a32      	ldr	r2, [pc, #200]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 8006200:	2100      	movs	r1, #0
 8006202:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006206:	4a30      	ldr	r2, [pc, #192]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 8006208:	2101      	movs	r1, #1
 800620a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800620c:	3b05      	subs	r3, #5
 800620e:	b2db      	uxtb	r3, r3
 8006210:	428b      	cmp	r3, r1
 8006212:	d943      	bls.n	800629c <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006214:	4b2c      	ldr	r3, [pc, #176]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 8006216:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800621a:	4c2b      	ldr	r4, [pc, #172]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 800621c:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800621e:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <RadioSetRxConfig+0x2e8>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006224:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006228:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800622c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8006230:	f7fe ffae 	bl	8005190 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006234:	2001      	movs	r0, #1
 8006236:	f7ff fad9 	bl	80057ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800623a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800623e:	f000 fccd 	bl	8006bdc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006242:	f104 000e 	add.w	r0, r4, #14
 8006246:	f000 fd51 	bl	8006cec <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800624a:	fa5f f08a 	uxtb.w	r0, sl
 800624e:	f000 fac6 	bl	80067de <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8006252:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006256:	f000 f8e7 	bl	8006428 <SUBGRF_ReadRegister>
 800625a:	f000 0101 	and.w	r1, r0, #1
 800625e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006262:	f000 f8d1 	bl	8006408 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006266:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800626a:	2b01      	cmp	r3, #1
 800626c:	d021      	beq.n	80062b2 <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800626e:	f240 7036 	movw	r0, #1846	; 0x736
 8006272:	f000 f8d9 	bl	8006428 <SUBGRF_ReadRegister>
 8006276:	f040 0104 	orr.w	r1, r0, #4
 800627a:	b2c9      	uxtb	r1, r1
 800627c:	f240 7036 	movw	r0, #1846	; 0x736
 8006280:	f000 f8c2 	bl	8006408 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006284:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 8006286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800628a:	609a      	str	r2, [r3, #8]
}
 800628c:	e6d1      	b.n	8006032 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800628e:	2d0c      	cmp	r5, #12
 8006290:	d1b5      	bne.n	80061fe <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006292:	4a0d      	ldr	r2, [pc, #52]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 8006294:	2101      	movs	r1, #1
 8006296:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800629a:	e7b4      	b.n	8006206 <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 800629c:	f1b9 0f0b 	cmp.w	r9, #11
 80062a0:	d803      	bhi.n	80062aa <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80062a2:	4613      	mov	r3, r2
 80062a4:	220c      	movs	r2, #12
 80062a6:	839a      	strh	r2, [r3, #28]
 80062a8:	e7b7      	b.n	800621a <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80062aa:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <RadioSetRxConfig+0x2e4>)
 80062ac:	f8a3 901c 	strh.w	r9, [r3, #28]
 80062b0:	e7b3      	b.n	800621a <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80062b2:	f240 7036 	movw	r0, #1846	; 0x736
 80062b6:	f000 f8b7 	bl	8006428 <SUBGRF_ReadRegister>
 80062ba:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80062be:	f240 7036 	movw	r0, #1846	; 0x736
 80062c2:	f000 f8a1 	bl	8006408 <SUBGRF_WriteRegister>
 80062c6:	e7dd      	b.n	8006284 <RadioSetRxConfig+0x2a0>
 80062c8:	2000053c 	.word	0x2000053c
 80062cc:	2000000c 	.word	0x2000000c
 80062d0:	08007dc4 	.word	0x08007dc4
 80062d4:	08007dbc 	.word	0x08007dbc
 80062d8:	08008150 	.word	0x08008150

080062dc <RadioIsChannelFree>:
{
 80062dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062de:	b08b      	sub	sp, #44	; 0x2c
 80062e0:	4604      	mov	r4, r0
 80062e2:	460f      	mov	r7, r1
 80062e4:	4616      	mov	r6, r2
 80062e6:	461d      	mov	r5, r3
    RadioStandby( );
 80062e8:	f7fe ff52 	bl	8005190 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80062ec:	2000      	movs	r0, #0
 80062ee:	f7ff fa7d 	bl	80057ec <RadioSetModem>
    RadioSetChannel( freq );
 80062f2:	4620      	mov	r0, r4
 80062f4:	f7ff f944 	bl	8005580 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80062f8:	2301      	movs	r3, #1
 80062fa:	9309      	str	r3, [sp, #36]	; 0x24
 80062fc:	2400      	movs	r4, #0
 80062fe:	9408      	str	r4, [sp, #32]
 8006300:	9407      	str	r4, [sp, #28]
 8006302:	9406      	str	r4, [sp, #24]
 8006304:	9405      	str	r4, [sp, #20]
 8006306:	9404      	str	r4, [sp, #16]
 8006308:	9403      	str	r4, [sp, #12]
 800630a:	9402      	str	r4, [sp, #8]
 800630c:	2303      	movs	r3, #3
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	9700      	str	r7, [sp, #0]
 8006312:	4623      	mov	r3, r4
 8006314:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006318:	4639      	mov	r1, r7
 800631a:	4620      	mov	r0, r4
 800631c:	f7ff fe62 	bl	8005fe4 <RadioSetRxConfig>
    RadioRx( 0 );
 8006320:	4620      	mov	r0, r4
 8006322:	f7ff f945 	bl	80055b0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006326:	f7ff f8f7 	bl	8005518 <RadioGetWakeupTime>
 800632a:	f7fa faef 	bl	800090c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800632e:	f001 fa3b 	bl	80077a8 <UTIL_TIMER_GetCurrentTime>
 8006332:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006334:	4620      	mov	r0, r4
 8006336:	f001 fa41 	bl	80077bc <UTIL_TIMER_GetElapsedTime>
 800633a:	42a8      	cmp	r0, r5
 800633c:	d206      	bcs.n	800634c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800633e:	2000      	movs	r0, #0
 8006340:	f7ff f8f7 	bl	8005532 <RadioRssi>
        if( rssi > rssiThresh )
 8006344:	42b0      	cmp	r0, r6
 8006346:	ddf5      	ble.n	8006334 <RadioIsChannelFree+0x58>
            status = false;
 8006348:	2400      	movs	r4, #0
 800634a:	e000      	b.n	800634e <RadioIsChannelFree+0x72>
    bool status = true;
 800634c:	2401      	movs	r4, #1
    RadioStandby( );
 800634e:	f7fe ff1f 	bl	8005190 <RadioStandby>
}
 8006352:	4620      	mov	r0, r4
 8006354:	b00b      	add	sp, #44	; 0x2c
 8006356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006358 <RadioInit>:
{
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	b082      	sub	sp, #8
    RadioEvents = events;
 800635c:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <RadioInit+0x7c>)
 800635e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8006360:	4d1d      	ldr	r5, [pc, #116]	; (80063d8 <RadioInit+0x80>)
 8006362:	2400      	movs	r4, #0
 8006364:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8006366:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8006368:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800636a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800636c:	481b      	ldr	r0, [pc, #108]	; (80063dc <RadioInit+0x84>)
 800636e:	f000 fb27 	bl	80069c0 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8006372:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8006374:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8006376:	f000 fa53 	bl	8006820 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800637a:	4621      	mov	r1, r4
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fd27 	bl	8006dd0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006382:	2204      	movs	r2, #4
 8006384:	4621      	mov	r1, r4
 8006386:	2001      	movs	r0, #1
 8006388:	f000 fb9a 	bl	8006ac0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800638c:	4623      	mov	r3, r4
 800638e:	4622      	mov	r2, r4
 8006390:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006394:	4608      	mov	r0, r1
 8006396:	f000 fada 	bl	800694e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800639a:	f7ff f941 	bl	8005620 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800639e:	4e10      	ldr	r6, [pc, #64]	; (80063e0 <RadioInit+0x88>)
 80063a0:	9400      	str	r4, [sp, #0]
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <RadioInit+0x8c>)
 80063a4:	4622      	mov	r2, r4
 80063a6:	f04f 31ff 	mov.w	r1, #4294967295
 80063aa:	4630      	mov	r0, r6
 80063ac:	f001 f9de 	bl	800776c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80063b0:	4d0d      	ldr	r5, [pc, #52]	; (80063e8 <RadioInit+0x90>)
 80063b2:	9400      	str	r4, [sp, #0]
 80063b4:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <RadioInit+0x94>)
 80063b6:	4622      	mov	r2, r4
 80063b8:	f04f 31ff 	mov.w	r1, #4294967295
 80063bc:	4628      	mov	r0, r5
 80063be:	f001 f9d5 	bl	800776c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80063c2:	4630      	mov	r0, r6
 80063c4:	f001 fa30 	bl	8007828 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80063c8:	4628      	mov	r0, r5
 80063ca:	f001 fa2d 	bl	8007828 <UTIL_TIMER_Stop>
}
 80063ce:	b002      	add	sp, #8
 80063d0:	bd70      	pop	{r4, r5, r6, pc}
 80063d2:	bf00      	nop
 80063d4:	20000520 	.word	0x20000520
 80063d8:	2000053c 	.word	0x2000053c
 80063dc:	08005505 	.word	0x08005505
 80063e0:	20000598 	.word	0x20000598
 80063e4:	08004f75 	.word	0x08004f75
 80063e8:	20000524 	.word	0x20000524
 80063ec:	08004f9d 	.word	0x08004f9d

080063f0 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 80063f0:	4b01      	ldr	r3, [pc, #4]	; (80063f8 <SUBGRF_GetOperatingMode+0x8>)
 80063f2:	7818      	ldrb	r0, [r3, #0]
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	200005b6 	.word	0x200005b6

080063fc <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 80063fc:	4b01      	ldr	r3, [pc, #4]	; (8006404 <SUBGRF_GetPacketType+0x8>)
 80063fe:	7818      	ldrb	r0, [r3, #0]
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	200005b7 	.word	0x200005b7

08006408 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8006408:	b500      	push	{lr}
 800640a:	b083      	sub	sp, #12
 800640c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006410:	2301      	movs	r3, #1
 8006412:	f10d 0207 	add.w	r2, sp, #7
 8006416:	4601      	mov	r1, r0
 8006418:	4802      	ldr	r0, [pc, #8]	; (8006424 <SUBGRF_WriteRegister+0x1c>)
 800641a:	f7fd f8c3 	bl	80035a4 <HAL_SUBGHZ_WriteRegisters>
}
 800641e:	b003      	add	sp, #12
 8006420:	f85d fb04 	ldr.w	pc, [sp], #4
 8006424:	2000006c 	.word	0x2000006c

08006428 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8006428:	b500      	push	{lr}
 800642a:	b083      	sub	sp, #12
 800642c:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800642e:	2301      	movs	r3, #1
 8006430:	f10d 0207 	add.w	r2, sp, #7
 8006434:	4803      	ldr	r0, [pc, #12]	; (8006444 <SUBGRF_ReadRegister+0x1c>)
 8006436:	f7fd f905 	bl	8003644 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 800643a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800643e:	b003      	add	sp, #12
 8006440:	f85d fb04 	ldr.w	pc, [sp], #4
 8006444:	2000006c 	.word	0x2000006c

08006448 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8006448:	b510      	push	{r4, lr}
 800644a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800644c:	f7fb f870 	bl	8001530 <RBI_IsDCDC>
 8006450:	2801      	cmp	r0, #1
 8006452:	d000      	beq.n	8006456 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8006454:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8006456:	f640 1023 	movw	r0, #2339	; 0x923
 800645a:	f7ff ffe5 	bl	8006428 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800645e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8006462:	4321      	orrs	r1, r4
 8006464:	f640 1023 	movw	r0, #2339	; 0x923
 8006468:	f7ff ffce 	bl	8006408 <SUBGRF_WriteRegister>
}
 800646c:	e7f2      	b.n	8006454 <Radio_SMPS_Set+0xc>

0800646e <SUBGRF_SetWhiteningSeed>:
{
 800646e:	b510      	push	{r4, lr}
 8006470:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8006472:	f7ff ffc3 	bl	80063fc <SUBGRF_GetPacketType>
 8006476:	b100      	cbz	r0, 800647a <SUBGRF_SetWhiteningSeed+0xc>
}
 8006478:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800647a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800647e:	f7ff ffd3 	bl	8006428 <SUBGRF_ReadRegister>
 8006482:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006486:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800648a:	4301      	orrs	r1, r0
 800648c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006490:	f7ff ffba 	bl	8006408 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8006494:	b2e1      	uxtb	r1, r4
 8006496:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800649a:	f7ff ffb5 	bl	8006408 <SUBGRF_WriteRegister>
}
 800649e:	e7eb      	b.n	8006478 <SUBGRF_SetWhiteningSeed+0xa>

080064a0 <SUBGRF_WriteRegisters>:
{
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80064a8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80064aa:	460a      	mov	r2, r1
 80064ac:	4601      	mov	r1, r0
 80064ae:	4803      	ldr	r0, [pc, #12]	; (80064bc <SUBGRF_WriteRegisters+0x1c>)
 80064b0:	f7fd f878 	bl	80035a4 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b4:	f384 8810 	msr	PRIMASK, r4
}
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	bf00      	nop
 80064bc:	2000006c 	.word	0x2000006c

080064c0 <SUBGRF_SetSyncWord>:
{
 80064c0:	b508      	push	{r3, lr}
 80064c2:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80064c4:	2208      	movs	r2, #8
 80064c6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80064ca:	f7ff ffe9 	bl	80064a0 <SUBGRF_WriteRegisters>
}
 80064ce:	2000      	movs	r0, #0
 80064d0:	bd08      	pop	{r3, pc}

080064d2 <SUBGRF_SetCrcSeed>:
{
 80064d2:	b500      	push	{lr}
 80064d4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80064d6:	0a03      	lsrs	r3, r0, #8
 80064d8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80064dc:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80064e0:	f7ff ff8c 	bl	80063fc <SUBGRF_GetPacketType>
 80064e4:	b110      	cbz	r0, 80064ec <SUBGRF_SetCrcSeed+0x1a>
}
 80064e6:	b003      	add	sp, #12
 80064e8:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80064ec:	2202      	movs	r2, #2
 80064ee:	a901      	add	r1, sp, #4
 80064f0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80064f4:	f7ff ffd4 	bl	80064a0 <SUBGRF_WriteRegisters>
}
 80064f8:	e7f5      	b.n	80064e6 <SUBGRF_SetCrcSeed+0x14>

080064fa <SUBGRF_SetCrcPolynomial>:
{
 80064fa:	b500      	push	{lr}
 80064fc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80064fe:	0a03      	lsrs	r3, r0, #8
 8006500:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006504:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8006508:	f7ff ff78 	bl	80063fc <SUBGRF_GetPacketType>
 800650c:	b110      	cbz	r0, 8006514 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800650e:	b003      	add	sp, #12
 8006510:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006514:	2202      	movs	r2, #2
 8006516:	a901      	add	r1, sp, #4
 8006518:	f240 60be 	movw	r0, #1726	; 0x6be
 800651c:	f7ff ffc0 	bl	80064a0 <SUBGRF_WriteRegisters>
}
 8006520:	e7f5      	b.n	800650e <SUBGRF_SetCrcPolynomial+0x14>
	...

08006524 <SUBGRF_ReadRegisters>:
{
 8006524:	b510      	push	{r4, lr}
 8006526:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006528:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800652c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800652e:	460a      	mov	r2, r1
 8006530:	4601      	mov	r1, r0
 8006532:	4803      	ldr	r0, [pc, #12]	; (8006540 <SUBGRF_ReadRegisters+0x1c>)
 8006534:	f7fd f886 	bl	8003644 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006538:	f384 8810 	msr	PRIMASK, r4
}
 800653c:	bd10      	pop	{r4, pc}
 800653e:	bf00      	nop
 8006540:	2000006c 	.word	0x2000006c

08006544 <SUBGRF_WriteBuffer>:
{
 8006544:	b510      	push	{r4, lr}
 8006546:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006548:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800654c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800654e:	460a      	mov	r2, r1
 8006550:	4601      	mov	r1, r0
 8006552:	4803      	ldr	r0, [pc, #12]	; (8006560 <SUBGRF_WriteBuffer+0x1c>)
 8006554:	f7fd f9d4 	bl	8003900 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	f384 8810 	msr	PRIMASK, r4
}
 800655c:	bd10      	pop	{r4, pc}
 800655e:	bf00      	nop
 8006560:	2000006c 	.word	0x2000006c

08006564 <SUBGRF_SetPayload>:
{
 8006564:	b508      	push	{r3, lr}
 8006566:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006568:	4601      	mov	r1, r0
 800656a:	2000      	movs	r0, #0
 800656c:	f7ff ffea 	bl	8006544 <SUBGRF_WriteBuffer>
}
 8006570:	bd08      	pop	{r3, pc}
	...

08006574 <SUBGRF_ReadBuffer>:
{
 8006574:	b510      	push	{r4, lr}
 8006576:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006578:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800657c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800657e:	460a      	mov	r2, r1
 8006580:	4601      	mov	r1, r0
 8006582:	4803      	ldr	r0, [pc, #12]	; (8006590 <SUBGRF_ReadBuffer+0x1c>)
 8006584:	f7fd fa06 	bl	8003994 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006588:	f384 8810 	msr	PRIMASK, r4
}
 800658c:	bd10      	pop	{r4, pc}
 800658e:	bf00      	nop
 8006590:	2000006c 	.word	0x2000006c

08006594 <SUBGRF_WriteCommand>:
{
 8006594:	b510      	push	{r4, lr}
 8006596:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006598:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800659c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800659e:	460a      	mov	r2, r1
 80065a0:	4601      	mov	r1, r0
 80065a2:	4803      	ldr	r0, [pc, #12]	; (80065b0 <SUBGRF_WriteCommand+0x1c>)
 80065a4:	f7fd f8a2 	bl	80036ec <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a8:	f384 8810 	msr	PRIMASK, r4
}
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	bf00      	nop
 80065b0:	2000006c 	.word	0x2000006c

080065b4 <SUBGRF_SetSleep>:
{
 80065b4:	b510      	push	{r4, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80065ba:	2000      	movs	r0, #0
 80065bc:	f7fa ffac 	bl	8001518 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80065c0:	2002      	movs	r0, #2
 80065c2:	f7ff ff41 	bl	8006448 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80065c6:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80065ca:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80065ce:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80065d0:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80065d4:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80065d6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80065da:	2201      	movs	r2, #1
 80065dc:	f10d 0107 	add.w	r1, sp, #7
 80065e0:	2084      	movs	r0, #132	; 0x84
 80065e2:	f7ff ffd7 	bl	8006594 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80065e6:	4b02      	ldr	r3, [pc, #8]	; (80065f0 <SUBGRF_SetSleep+0x3c>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
}
 80065ec:	b002      	add	sp, #8
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	200005b6 	.word	0x200005b6

080065f4 <SUBGRF_SetStandby>:
{
 80065f4:	b500      	push	{lr}
 80065f6:	b083      	sub	sp, #12
 80065f8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80065fc:	2201      	movs	r2, #1
 80065fe:	f10d 0107 	add.w	r1, sp, #7
 8006602:	2080      	movs	r0, #128	; 0x80
 8006604:	f7ff ffc6 	bl	8006594 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006608:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800660c:	b92b      	cbnz	r3, 800661a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <SUBGRF_SetStandby+0x30>)
 8006610:	2201      	movs	r2, #1
 8006612:	701a      	strb	r2, [r3, #0]
}
 8006614:	b003      	add	sp, #12
 8006616:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800661a:	4b02      	ldr	r3, [pc, #8]	; (8006624 <SUBGRF_SetStandby+0x30>)
 800661c:	2202      	movs	r2, #2
 800661e:	701a      	strb	r2, [r3, #0]
}
 8006620:	e7f8      	b.n	8006614 <SUBGRF_SetStandby+0x20>
 8006622:	bf00      	nop
 8006624:	200005b6 	.word	0x200005b6

08006628 <SUBGRF_SetTx>:
{
 8006628:	b500      	push	{lr}
 800662a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800662c:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <SUBGRF_SetTx+0x30>)
 800662e:	2204      	movs	r2, #4
 8006630:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006632:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006636:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800663a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800663e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006642:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006646:	2203      	movs	r2, #3
 8006648:	a901      	add	r1, sp, #4
 800664a:	2083      	movs	r0, #131	; 0x83
 800664c:	f7ff ffa2 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006650:	b003      	add	sp, #12
 8006652:	f85d fb04 	ldr.w	pc, [sp], #4
 8006656:	bf00      	nop
 8006658:	200005b6 	.word	0x200005b6

0800665c <SUBGRF_SendPayload>:
{
 800665c:	b510      	push	{r4, lr}
 800665e:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8006660:	f7ff ff80 	bl	8006564 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff ffdf 	bl	8006628 <SUBGRF_SetTx>
}
 800666a:	bd10      	pop	{r4, pc}

0800666c <SUBGRF_SetRx>:
{
 800666c:	b500      	push	{lr}
 800666e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <SUBGRF_SetRx+0x30>)
 8006672:	2205      	movs	r2, #5
 8006674:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006676:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800667a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800667e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006682:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006686:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800668a:	2203      	movs	r2, #3
 800668c:	a901      	add	r1, sp, #4
 800668e:	2082      	movs	r0, #130	; 0x82
 8006690:	f7ff ff80 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006694:	b003      	add	sp, #12
 8006696:	f85d fb04 	ldr.w	pc, [sp], #4
 800669a:	bf00      	nop
 800669c:	200005b6 	.word	0x200005b6

080066a0 <SUBGRF_GetRandom>:
{
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	b082      	sub	sp, #8
    uint32_t number = 0;
 80066a4:	2600      	movs	r6, #0
 80066a6:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80066a8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80066ac:	f7ff febc 	bl	8006428 <SUBGRF_ReadRegister>
 80066b0:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80066b2:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80066b6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80066ba:	f7ff fea5 	bl	8006408 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80066be:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80066c2:	f7ff feb1 	bl	8006428 <SUBGRF_ReadRegister>
 80066c6:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80066c8:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80066cc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80066d0:	f7ff fe9a 	bl	8006408 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80066d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80066d8:	f7ff ffc8 	bl	800666c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80066dc:	2204      	movs	r2, #4
 80066de:	eb0d 0102 	add.w	r1, sp, r2
 80066e2:	f640 0019 	movw	r0, #2073	; 0x819
 80066e6:	f7ff ff1d 	bl	8006524 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80066ea:	4630      	mov	r0, r6
 80066ec:	f7ff ff82 	bl	80065f4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80066f0:	4629      	mov	r1, r5
 80066f2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80066f6:	f7ff fe87 	bl	8006408 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80066fa:	4621      	mov	r1, r4
 80066fc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006700:	f7ff fe82 	bl	8006408 <SUBGRF_WriteRegister>
}
 8006704:	9801      	ldr	r0, [sp, #4]
 8006706:	b002      	add	sp, #8
 8006708:	bd70      	pop	{r4, r5, r6, pc}
	...

0800670c <SUBGRF_SetRxBoosted>:
{
 800670c:	b510      	push	{r4, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <SUBGRF_SetRxBoosted+0x38>)
 8006714:	2205      	movs	r2, #5
 8006716:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006718:	2197      	movs	r1, #151	; 0x97
 800671a:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800671e:	f7ff fe73 	bl	8006408 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006722:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8006726:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800672a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800672e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006732:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006736:	2203      	movs	r2, #3
 8006738:	a901      	add	r1, sp, #4
 800673a:	2082      	movs	r0, #130	; 0x82
 800673c:	f7ff ff2a 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006740:	b002      	add	sp, #8
 8006742:	bd10      	pop	{r4, pc}
 8006744:	200005b6 	.word	0x200005b6

08006748 <SUBGRF_SetRxDutyCycle>:
{
 8006748:	b500      	push	{lr}
 800674a:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800674c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006750:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006754:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006758:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800675c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8006760:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006764:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8006768:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800676c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8006770:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8006774:	2206      	movs	r2, #6
 8006776:	4669      	mov	r1, sp
 8006778:	2094      	movs	r0, #148	; 0x94
 800677a:	f7ff ff0b 	bl	8006594 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800677e:	4b03      	ldr	r3, [pc, #12]	; (800678c <SUBGRF_SetRxDutyCycle+0x44>)
 8006780:	2206      	movs	r2, #6
 8006782:	701a      	strb	r2, [r3, #0]
}
 8006784:	b003      	add	sp, #12
 8006786:	f85d fb04 	ldr.w	pc, [sp], #4
 800678a:	bf00      	nop
 800678c:	200005b6 	.word	0x200005b6

08006790 <SUBGRF_SetCad>:
{
 8006790:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8006792:	2200      	movs	r2, #0
 8006794:	4611      	mov	r1, r2
 8006796:	20c5      	movs	r0, #197	; 0xc5
 8006798:	f7ff fefc 	bl	8006594 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800679c:	4b01      	ldr	r3, [pc, #4]	; (80067a4 <SUBGRF_SetCad+0x14>)
 800679e:	2207      	movs	r2, #7
 80067a0:	701a      	strb	r2, [r3, #0]
}
 80067a2:	bd08      	pop	{r3, pc}
 80067a4:	200005b6 	.word	0x200005b6

080067a8 <SUBGRF_SetTxContinuousWave>:
{
 80067a8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80067aa:	2200      	movs	r2, #0
 80067ac:	4611      	mov	r1, r2
 80067ae:	20d1      	movs	r0, #209	; 0xd1
 80067b0:	f7ff fef0 	bl	8006594 <SUBGRF_WriteCommand>
}
 80067b4:	bd08      	pop	{r3, pc}

080067b6 <SUBGRF_SetTxInfinitePreamble>:
{
 80067b6:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80067b8:	2200      	movs	r2, #0
 80067ba:	4611      	mov	r1, r2
 80067bc:	20d2      	movs	r0, #210	; 0xd2
 80067be:	f7ff fee9 	bl	8006594 <SUBGRF_WriteCommand>
}
 80067c2:	bd08      	pop	{r3, pc}

080067c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80067c4:	b500      	push	{lr}
 80067c6:	b083      	sub	sp, #12
 80067c8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80067cc:	2201      	movs	r2, #1
 80067ce:	f10d 0107 	add.w	r1, sp, #7
 80067d2:	209f      	movs	r0, #159	; 0x9f
 80067d4:	f7ff fede 	bl	8006594 <SUBGRF_WriteCommand>
}
 80067d8:	b003      	add	sp, #12
 80067da:	f85d fb04 	ldr.w	pc, [sp], #4

080067de <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80067de:	b500      	push	{lr}
 80067e0:	b083      	sub	sp, #12
 80067e2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80067e6:	2201      	movs	r2, #1
 80067e8:	f10d 0107 	add.w	r1, sp, #7
 80067ec:	20a0      	movs	r0, #160	; 0xa0
 80067ee:	f7ff fed1 	bl	8006594 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80067f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067f6:	2b3f      	cmp	r3, #63	; 0x3f
 80067f8:	d90f      	bls.n	800681a <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80067fa:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80067fc:	2200      	movs	r2, #0
        while( mant > 31 )
 80067fe:	e002      	b.n	8006806 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8006800:	089b      	lsrs	r3, r3, #2
            exp++;
 8006802:	3201      	adds	r2, #1
 8006804:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8006806:	2b1f      	cmp	r3, #31
 8006808:	d8fa      	bhi.n	8006800 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800680a:	00d9      	lsls	r1, r3, #3
 800680c:	b2c9      	uxtb	r1, r1
 800680e:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8006810:	b2c9      	uxtb	r1, r1
 8006812:	f240 7006 	movw	r0, #1798	; 0x706
 8006816:	f7ff fdf7 	bl	8006408 <SUBGRF_WriteRegister>
}
 800681a:	b003      	add	sp, #12
 800681c:	f85d fb04 	ldr.w	pc, [sp], #4

08006820 <SUBGRF_SetRegulatorMode>:
{
 8006820:	b500      	push	{lr}
 8006822:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8006824:	f7fa fe84 	bl	8001530 <RBI_IsDCDC>
 8006828:	2801      	cmp	r0, #1
 800682a:	d00b      	beq.n	8006844 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800682c:	2300      	movs	r3, #0
 800682e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8006832:	2201      	movs	r2, #1
 8006834:	f10d 0107 	add.w	r1, sp, #7
 8006838:	2096      	movs	r0, #150	; 0x96
 800683a:	f7ff feab 	bl	8006594 <SUBGRF_WriteCommand>
}
 800683e:	b003      	add	sp, #12
 8006840:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8006844:	2301      	movs	r3, #1
 8006846:	f88d 3007 	strb.w	r3, [sp, #7]
 800684a:	e7f2      	b.n	8006832 <SUBGRF_SetRegulatorMode+0x12>

0800684c <SUBGRF_Calibrate>:
{
 800684c:	b500      	push	{lr}
 800684e:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006850:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006854:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006858:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800685a:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800685e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006860:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006864:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006866:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800686a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800686c:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006870:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006872:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006876:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006878:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800687c:	2201      	movs	r2, #1
 800687e:	f10d 0107 	add.w	r1, sp, #7
 8006882:	2089      	movs	r0, #137	; 0x89
 8006884:	f7ff fe86 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006888:	b003      	add	sp, #12
 800688a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006890 <SUBGRF_CalibrateImage>:
{
 8006890:	b500      	push	{lr}
 8006892:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8006894:	4b1f      	ldr	r3, [pc, #124]	; (8006914 <SUBGRF_CalibrateImage+0x84>)
 8006896:	4298      	cmp	r0, r3
 8006898:	d90d      	bls.n	80068b6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800689a:	23e1      	movs	r3, #225	; 0xe1
 800689c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80068a0:	23e9      	movs	r3, #233	; 0xe9
 80068a2:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80068a6:	2202      	movs	r2, #2
 80068a8:	a901      	add	r1, sp, #4
 80068aa:	2098      	movs	r0, #152	; 0x98
 80068ac:	f7ff fe72 	bl	8006594 <SUBGRF_WriteCommand>
}
 80068b0:	b003      	add	sp, #12
 80068b2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80068b6:	4b18      	ldr	r3, [pc, #96]	; (8006918 <SUBGRF_CalibrateImage+0x88>)
 80068b8:	4298      	cmp	r0, r3
 80068ba:	d906      	bls.n	80068ca <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80068bc:	23d7      	movs	r3, #215	; 0xd7
 80068be:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80068c2:	23db      	movs	r3, #219	; 0xdb
 80068c4:	f88d 3005 	strb.w	r3, [sp, #5]
 80068c8:	e7ed      	b.n	80068a6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <SUBGRF_CalibrateImage+0x8c>)
 80068cc:	4298      	cmp	r0, r3
 80068ce:	d906      	bls.n	80068de <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80068d0:	23c1      	movs	r3, #193	; 0xc1
 80068d2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80068d6:	23c5      	movs	r3, #197	; 0xc5
 80068d8:	f88d 3005 	strb.w	r3, [sp, #5]
 80068dc:	e7e3      	b.n	80068a6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <SUBGRF_CalibrateImage+0x90>)
 80068e0:	4298      	cmp	r0, r3
 80068e2:	d906      	bls.n	80068f2 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80068e4:	2375      	movs	r3, #117	; 0x75
 80068e6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80068ea:	2381      	movs	r3, #129	; 0x81
 80068ec:	f88d 3005 	strb.w	r3, [sp, #5]
 80068f0:	e7d9      	b.n	80068a6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80068f2:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <SUBGRF_CalibrateImage+0x94>)
 80068f4:	4298      	cmp	r0, r3
 80068f6:	d906      	bls.n	8006906 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 80068f8:	236b      	movs	r3, #107	; 0x6b
 80068fa:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80068fe:	236f      	movs	r3, #111	; 0x6f
 8006900:	f88d 3005 	strb.w	r3, [sp, #5]
 8006904:	e7cf      	b.n	80068a6 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8006906:	2329      	movs	r3, #41	; 0x29
 8006908:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 800690c:	232b      	movs	r3, #43	; 0x2b
 800690e:	f88d 3005 	strb.w	r3, [sp, #5]
 8006912:	e7c8      	b.n	80068a6 <SUBGRF_CalibrateImage+0x16>
 8006914:	35a4e900 	.word	0x35a4e900
 8006918:	32a9f880 	.word	0x32a9f880
 800691c:	2de54480 	.word	0x2de54480
 8006920:	1b6b0b00 	.word	0x1b6b0b00
 8006924:	1954fc40 	.word	0x1954fc40

08006928 <SUBGRF_SetPaConfig>:
{
 8006928:	b500      	push	{lr}
 800692a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800692c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8006930:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8006934:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8006938:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800693c:	2204      	movs	r2, #4
 800693e:	eb0d 0102 	add.w	r1, sp, r2
 8006942:	2095      	movs	r0, #149	; 0x95
 8006944:	f7ff fe26 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006948:	b003      	add	sp, #12
 800694a:	f85d fb04 	ldr.w	pc, [sp], #4

0800694e <SUBGRF_SetDioIrqParams>:
{
 800694e:	b500      	push	{lr}
 8006950:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8006952:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8006956:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800695a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800695e:	0a08      	lsrs	r0, r1, #8
 8006960:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006964:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8006968:	0a11      	lsrs	r1, r2, #8
 800696a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800696e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8006972:	0a1a      	lsrs	r2, r3, #8
 8006974:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8006978:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800697c:	2208      	movs	r2, #8
 800697e:	4669      	mov	r1, sp
 8006980:	4610      	mov	r0, r2
 8006982:	f7ff fe07 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006986:	b003      	add	sp, #12
 8006988:	f85d fb04 	ldr.w	pc, [sp], #4

0800698c <SUBGRF_SetTcxoMode>:
{
 800698c:	b500      	push	{lr}
 800698e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8006990:	f000 0007 	and.w	r0, r0, #7
 8006994:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006998:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800699c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80069a0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80069a4:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80069a8:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80069ac:	2204      	movs	r2, #4
 80069ae:	eb0d 0102 	add.w	r1, sp, r2
 80069b2:	2097      	movs	r0, #151	; 0x97
 80069b4:	f7ff fdee 	bl	8006594 <SUBGRF_WriteCommand>
}
 80069b8:	b003      	add	sp, #12
 80069ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080069c0 <SUBGRF_Init>:
{
 80069c0:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80069c2:	b108      	cbz	r0, 80069c8 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80069c4:	4a18      	ldr	r2, [pc, #96]	; (8006a28 <SUBGRF_Init+0x68>)
 80069c6:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80069c8:	f7f9 ff14 	bl	80007f4 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80069cc:	2002      	movs	r0, #2
 80069ce:	f7ff fd3b 	bl	8006448 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80069d2:	2000      	movs	r0, #0
 80069d4:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <SUBGRF_Init+0x6c>)
 80069d6:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80069d8:	f7ff fe0c 	bl	80065f4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80069dc:	f7fa fda4 	bl	8001528 <RBI_IsTCXO>
 80069e0:	2801      	cmp	r0, #1
 80069e2:	d014      	beq.n	8006a0e <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80069e4:	2120      	movs	r1, #32
 80069e6:	f640 1011 	movw	r0, #2321	; 0x911
 80069ea:	f7ff fd0d 	bl	8006408 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80069ee:	2120      	movs	r1, #32
 80069f0:	f640 1012 	movw	r0, #2322	; 0x912
 80069f4:	f7ff fd08 	bl	8006408 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80069f8:	210e      	movs	r1, #14
 80069fa:	f640 101f 	movw	r0, #2335	; 0x91f
 80069fe:	f7ff fd03 	bl	8006408 <SUBGRF_WriteRegister>
    RBI_Init();
 8006a02:	f7fa fd85 	bl	8001510 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <SUBGRF_Init+0x70>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	701a      	strb	r2, [r3, #0]
}
 8006a0c:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006a0e:	2140      	movs	r1, #64	; 0x40
 8006a10:	f7ff ffbc 	bl	800698c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006a14:	2100      	movs	r1, #0
 8006a16:	f640 1011 	movw	r0, #2321	; 0x911
 8006a1a:	f7ff fcf5 	bl	8006408 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8006a1e:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8006a22:	f7ff ff13 	bl	800684c <SUBGRF_Calibrate>
 8006a26:	e7e7      	b.n	80069f8 <SUBGRF_Init+0x38>
 8006a28:	200005b8 	.word	0x200005b8
 8006a2c:	200005b4 	.word	0x200005b4
 8006a30:	200005b6 	.word	0x200005b6

08006a34 <SUBGRF_SetRfFrequency>:
{
 8006a34:	b510      	push	{r4, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <SUBGRF_SetRfFrequency+0x50>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	b1d3      	cbz	r3, 8006a76 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8006a40:	4a11      	ldr	r2, [pc, #68]	; (8006a88 <SUBGRF_SetRfFrequency+0x54>)
 8006a42:	2300      	movs	r3, #0
 8006a44:	0660      	lsls	r0, r4, #25
 8006a46:	09e1      	lsrs	r1, r4, #7
 8006a48:	f7f9 fb9e 	bl	8000188 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8006a4c:	0e03      	lsrs	r3, r0, #24
 8006a4e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8006a52:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006a56:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8006a5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006a5e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8006a62:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006a66:	2204      	movs	r2, #4
 8006a68:	eb0d 0102 	add.w	r1, sp, r2
 8006a6c:	2086      	movs	r0, #134	; 0x86
 8006a6e:	f7ff fd91 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006a72:	b002      	add	sp, #8
 8006a74:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8006a76:	f7ff ff0b 	bl	8006890 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8006a7a:	4b02      	ldr	r3, [pc, #8]	; (8006a84 <SUBGRF_SetRfFrequency+0x50>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e7de      	b.n	8006a40 <SUBGRF_SetRfFrequency+0xc>
 8006a82:	bf00      	nop
 8006a84:	200005b4 	.word	0x200005b4
 8006a88:	01e84800 	.word	0x01e84800

08006a8c <SUBGRF_SetPacketType>:
{
 8006a8c:	b500      	push	{lr}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8006a94:	b2c3      	uxtb	r3, r0
 8006a96:	4a09      	ldr	r2, [pc, #36]	; (8006abc <SUBGRF_SetPacketType+0x30>)
 8006a98:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8006a9a:	b143      	cbz	r3, 8006aae <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f10d 0107 	add.w	r1, sp, #7
 8006aa2:	208a      	movs	r0, #138	; 0x8a
 8006aa4:	f7ff fd76 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006aa8:	b003      	add	sp, #12
 8006aaa:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8006aae:	2100      	movs	r1, #0
 8006ab0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006ab4:	f7ff fca8 	bl	8006408 <SUBGRF_WriteRegister>
 8006ab8:	e7f0      	b.n	8006a9c <SUBGRF_SetPacketType+0x10>
 8006aba:	bf00      	nop
 8006abc:	200005b7 	.word	0x200005b7

08006ac0 <SUBGRF_SetTxParams>:
{
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8006ac8:	2801      	cmp	r0, #1
 8006aca:	d035      	beq.n	8006b38 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8006acc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8006ad0:	f7ff fcaa 	bl	8006428 <SUBGRF_ReadRegister>
 8006ad4:	f040 011e 	orr.w	r1, r0, #30
 8006ad8:	b2c9      	uxtb	r1, r1
 8006ada:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8006ade:	f7ff fc93 	bl	8006408 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	f7fa fd28 	bl	8001538 <RBI_GetRFOMaxPowerConfig>
 8006ae8:	4605      	mov	r5, r0
        if (power > max_power)
 8006aea:	4284      	cmp	r4, r0
 8006aec:	dd00      	ble.n	8006af0 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8006aee:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8006af0:	2d14      	cmp	r5, #20
 8006af2:	d054      	beq.n	8006b9e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8006af4:	2d11      	cmp	r5, #17
 8006af6:	d05c      	beq.n	8006bb2 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8006af8:	2d0e      	cmp	r5, #14
 8006afa:	d064      	beq.n	8006bc6 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8006afc:	2301      	movs	r3, #1
 8006afe:	2200      	movs	r2, #0
 8006b00:	2107      	movs	r1, #7
 8006b02:	2004      	movs	r0, #4
 8006b04:	f7ff ff10 	bl	8006928 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006b08:	1b64      	subs	r4, r4, r5
 8006b0a:	3416      	adds	r4, #22
 8006b0c:	b265      	sxtb	r5, r4
        if (power < -9)
 8006b0e:	f115 0f09 	cmn.w	r5, #9
 8006b12:	da01      	bge.n	8006b18 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8006b14:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8006b18:	2138      	movs	r1, #56	; 0x38
 8006b1a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8006b1e:	f7ff fc73 	bl	8006408 <SUBGRF_WriteRegister>
    buf[0] = power;
 8006b22:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8006b26:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	a901      	add	r1, sp, #4
 8006b2e:	208e      	movs	r0, #142	; 0x8e
 8006b30:	f7ff fd30 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006b34:	b002      	add	sp, #8
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f7fa fcfd 	bl	8001538 <RBI_GetRFOMaxPowerConfig>
 8006b3e:	4605      	mov	r5, r0
        if (power >  max_power)
 8006b40:	4284      	cmp	r4, r0
 8006b42:	dd00      	ble.n	8006b46 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8006b44:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8006b46:	2d0e      	cmp	r5, #14
 8006b48:	d015      	beq.n	8006b76 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8006b4a:	2d0a      	cmp	r5, #10
 8006b4c:	d01d      	beq.n	8006b8a <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8006b4e:	2301      	movs	r3, #1
 8006b50:	461a      	mov	r2, r3
 8006b52:	2100      	movs	r1, #0
 8006b54:	2007      	movs	r0, #7
 8006b56:	f7ff fee7 	bl	8006928 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006b5a:	1b65      	subs	r5, r4, r5
 8006b5c:	350e      	adds	r5, #14
 8006b5e:	b26d      	sxtb	r5, r5
        if (power < -17)
 8006b60:	f115 0f11 	cmn.w	r5, #17
 8006b64:	da01      	bge.n	8006b6a <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8006b66:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8006b6a:	2118      	movs	r1, #24
 8006b6c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8006b70:	f7ff fc4a 	bl	8006408 <SUBGRF_WriteRegister>
 8006b74:	e7d5      	b.n	8006b22 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8006b76:	2301      	movs	r3, #1
 8006b78:	461a      	mov	r2, r3
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	2004      	movs	r0, #4
 8006b7e:	f7ff fed3 	bl	8006928 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006b82:	1b65      	subs	r5, r4, r5
 8006b84:	350e      	adds	r5, #14
 8006b86:	b26d      	sxtb	r5, r5
 8006b88:	e7ea      	b.n	8006b60 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fec9 	bl	8006928 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8006b96:	1b65      	subs	r5, r4, r5
 8006b98:	350d      	adds	r5, #13
 8006b9a:	b26d      	sxtb	r5, r5
 8006b9c:	e7e0      	b.n	8006b60 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2105      	movs	r1, #5
 8006ba4:	2003      	movs	r0, #3
 8006ba6:	f7ff febf 	bl	8006928 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006baa:	1b65      	subs	r5, r4, r5
 8006bac:	3516      	adds	r5, #22
 8006bae:	b26d      	sxtb	r5, r5
 8006bb0:	e7ad      	b.n	8006b0e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2103      	movs	r1, #3
 8006bb8:	2002      	movs	r0, #2
 8006bba:	f7ff feb5 	bl	8006928 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006bbe:	1b65      	subs	r5, r4, r5
 8006bc0:	3516      	adds	r5, #22
 8006bc2:	b26d      	sxtb	r5, r5
 8006bc4:	e7a3      	b.n	8006b0e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2102      	movs	r1, #2
 8006bcc:	4608      	mov	r0, r1
 8006bce:	f7ff feab 	bl	8006928 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006bd2:	1b65      	subs	r5, r4, r5
 8006bd4:	350e      	adds	r5, #14
 8006bd6:	b26d      	sxtb	r5, r5
 8006bd8:	e799      	b.n	8006b0e <SUBGRF_SetTxParams+0x4e>
	...

08006bdc <SUBGRF_SetModulationParams>:
{
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006be2:	4b3e      	ldr	r3, [pc, #248]	; (8006cdc <SUBGRF_SetModulationParams+0x100>)
 8006be4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006be8:	ab02      	add	r3, sp, #8
 8006bea:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8006bee:	7820      	ldrb	r0, [r4, #0]
 8006bf0:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <SUBGRF_SetModulationParams+0x104>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	4298      	cmp	r0, r3
 8006bf6:	d106      	bne.n	8006c06 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8006bf8:	7823      	ldrb	r3, [r4, #0]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d82c      	bhi.n	8006c58 <SUBGRF_SetModulationParams+0x7c>
 8006bfe:	e8df f003 	tbb	[pc, r3]
 8006c02:	4205      	.short	0x4205
 8006c04:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006c06:	f7ff ff41 	bl	8006a8c <SUBGRF_SetPacketType>
 8006c0a:	e7f5      	b.n	8006bf8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8006c0c:	6862      	ldr	r2, [r4, #4]
 8006c0e:	4b35      	ldr	r3, [pc, #212]	; (8006ce4 <SUBGRF_SetModulationParams+0x108>)
 8006c10:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006c14:	0c1a      	lsrs	r2, r3, #16
 8006c16:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006c1a:	0a1a      	lsrs	r2, r3, #8
 8006c1c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006c20:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006c24:	7b23      	ldrb	r3, [r4, #12]
 8006c26:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006c2a:	7b63      	ldrb	r3, [r4, #13]
 8006c2c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8006c30:	68a1      	ldr	r1, [r4, #8]
 8006c32:	4a2d      	ldr	r2, [pc, #180]	; (8006ce8 <SUBGRF_SetModulationParams+0x10c>)
 8006c34:	2300      	movs	r3, #0
 8006c36:	0648      	lsls	r0, r1, #25
 8006c38:	09c9      	lsrs	r1, r1, #7
 8006c3a:	f7f9 faa5 	bl	8000188 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006c3e:	0c03      	lsrs	r3, r0, #16
 8006c40:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006c44:	0a03      	lsrs	r3, r0, #8
 8006c46:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8006c4a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006c4e:	2208      	movs	r2, #8
 8006c50:	4669      	mov	r1, sp
 8006c52:	208b      	movs	r0, #139	; 0x8b
 8006c54:	f7ff fc9e 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006c58:	b002      	add	sp, #8
 8006c5a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8006c5c:	6922      	ldr	r2, [r4, #16]
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <SUBGRF_SetModulationParams+0x108>)
 8006c60:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006c64:	0c1a      	lsrs	r2, r3, #16
 8006c66:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006c6a:	0a1a      	lsrs	r2, r3, #8
 8006c6c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006c70:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006c74:	7d23      	ldrb	r3, [r4, #20]
 8006c76:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	4669      	mov	r1, sp
 8006c7e:	208b      	movs	r0, #139	; 0x8b
 8006c80:	f7ff fc88 	bl	8006594 <SUBGRF_WriteCommand>
        break;
 8006c84:	e7e8      	b.n	8006c58 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006c86:	7e23      	ldrb	r3, [r4, #24]
 8006c88:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006c8c:	7e63      	ldrb	r3, [r4, #25]
 8006c8e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8006c92:	7ea3      	ldrb	r3, [r4, #26]
 8006c94:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006c98:	7ee3      	ldrb	r3, [r4, #27]
 8006c9a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	4669      	mov	r1, sp
 8006ca2:	208b      	movs	r0, #139	; 0x8b
 8006ca4:	f7ff fc76 	bl	8006594 <SUBGRF_WriteCommand>
        break;
 8006ca8:	e7d6      	b.n	8006c58 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8006caa:	6862      	ldr	r2, [r4, #4]
 8006cac:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <SUBGRF_SetModulationParams+0x108>)
 8006cae:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006cb2:	0c1a      	lsrs	r2, r3, #16
 8006cb4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006cb8:	0a1a      	lsrs	r2, r3, #8
 8006cba:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006cbe:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006cc2:	7b23      	ldrb	r3, [r4, #12]
 8006cc4:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006cc8:	7b63      	ldrb	r3, [r4, #13]
 8006cca:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006cce:	2205      	movs	r2, #5
 8006cd0:	4669      	mov	r1, sp
 8006cd2:	208b      	movs	r0, #139	; 0x8b
 8006cd4:	f7ff fc5e 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006cd8:	e7be      	b.n	8006c58 <SUBGRF_SetModulationParams+0x7c>
 8006cda:	bf00      	nop
 8006cdc:	08007dcc 	.word	0x08007dcc
 8006ce0:	200005b7 	.word	0x200005b7
 8006ce4:	3d090000 	.word	0x3d090000
 8006ce8:	01e84800 	.word	0x01e84800

08006cec <SUBGRF_SetPacketParams>:
{
 8006cec:	b510      	push	{r4, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006cf2:	ab01      	add	r3, sp, #4
 8006cf4:	4a33      	ldr	r2, [pc, #204]	; (8006dc4 <SUBGRF_SetPacketParams+0xd8>)
 8006cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cf8:	c303      	stmia	r3!, {r0, r1}
 8006cfa:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8006cfc:	7820      	ldrb	r0, [r4, #0]
 8006cfe:	4b32      	ldr	r3, [pc, #200]	; (8006dc8 <SUBGRF_SetPacketParams+0xdc>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	4298      	cmp	r0, r3
 8006d04:	d106      	bne.n	8006d14 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8006d06:	7823      	ldrb	r3, [r4, #0]
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d82a      	bhi.n	8006d62 <SUBGRF_SetPacketParams+0x76>
 8006d0c:	e8df f003 	tbb	[pc, r3]
 8006d10:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8006d14:	f7ff feba 	bl	8006a8c <SUBGRF_SetPacketType>
 8006d18:	e7f5      	b.n	8006d06 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006d1a:	7a63      	ldrb	r3, [r4, #9]
 8006d1c:	2bf1      	cmp	r3, #241	; 0xf1
 8006d1e:	d022      	beq.n	8006d66 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006d20:	2bf2      	cmp	r3, #242	; 0xf2
 8006d22:	d02a      	beq.n	8006d7a <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006d24:	8862      	ldrh	r2, [r4, #2]
 8006d26:	0a11      	lsrs	r1, r2, #8
 8006d28:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006d2c:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006d30:	7922      	ldrb	r2, [r4, #4]
 8006d32:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8006d36:	7962      	ldrb	r2, [r4, #5]
 8006d38:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006d3c:	79a2      	ldrb	r2, [r4, #6]
 8006d3e:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8006d42:	79e2      	ldrb	r2, [r4, #7]
 8006d44:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006d48:	7a22      	ldrb	r2, [r4, #8]
 8006d4a:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8006d4e:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006d52:	7aa3      	ldrb	r3, [r4, #10]
 8006d54:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8006d58:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006d5a:	a901      	add	r1, sp, #4
 8006d5c:	208c      	movs	r0, #140	; 0x8c
 8006d5e:	f7ff fc19 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006d62:	b004      	add	sp, #16
 8006d64:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8006d66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006d6a:	f7ff fbb2 	bl	80064d2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006d6e:	f248 0005 	movw	r0, #32773	; 0x8005
 8006d72:	f7ff fbc2 	bl	80064fa <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8006d76:	2302      	movs	r3, #2
 8006d78:	e7d4      	b.n	8006d24 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8006d7a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8006d7e:	f7ff fba8 	bl	80064d2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8006d82:	f241 0021 	movw	r0, #4129	; 0x1021
 8006d86:	f7ff fbb8 	bl	80064fa <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8006d8a:	2306      	movs	r3, #6
 8006d8c:	e7ca      	b.n	8006d24 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8006d8e:	7b23      	ldrb	r3, [r4, #12]
 8006d90:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8006d94:	2201      	movs	r2, #1
        break;
 8006d96:	e7e0      	b.n	8006d5a <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006d98:	89e3      	ldrh	r3, [r4, #14]
 8006d9a:	0a1a      	lsrs	r2, r3, #8
 8006d9c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006da0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8006da4:	7c23      	ldrb	r3, [r4, #16]
 8006da6:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <SUBGRF_SetPacketParams+0xe0>)
 8006da8:	7013      	strb	r3, [r2, #0]
 8006daa:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8006dae:	7c63      	ldrb	r3, [r4, #17]
 8006db0:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006db4:	7ca3      	ldrb	r3, [r4, #18]
 8006db6:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8006dba:	7ce3      	ldrb	r3, [r4, #19]
 8006dbc:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8006dc0:	2206      	movs	r2, #6
        break;
 8006dc2:	e7ca      	b.n	8006d5a <SUBGRF_SetPacketParams+0x6e>
 8006dc4:	08007dd4 	.word	0x08007dd4
 8006dc8:	200005b7 	.word	0x200005b7
 8006dcc:	200005b5 	.word	0x200005b5

08006dd0 <SUBGRF_SetBufferBaseAddress>:
{
 8006dd0:	b500      	push	{lr}
 8006dd2:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8006dd4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8006dd8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8006ddc:	2202      	movs	r2, #2
 8006dde:	a901      	add	r1, sp, #4
 8006de0:	208f      	movs	r0, #143	; 0x8f
 8006de2:	f7ff fbd7 	bl	8006594 <SUBGRF_WriteCommand>
}
 8006de6:	b003      	add	sp, #12
 8006de8:	f85d fb04 	ldr.w	pc, [sp], #4

08006dec <SUBGRF_ReadCommand>:
{
 8006dec:	b510      	push	{r4, lr}
 8006dee:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006df4:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8006df6:	460a      	mov	r2, r1
 8006df8:	4601      	mov	r1, r0
 8006dfa:	4803      	ldr	r0, [pc, #12]	; (8006e08 <SUBGRF_ReadCommand+0x1c>)
 8006dfc:	f7fc fccc 	bl	8003798 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e00:	f384 8810 	msr	PRIMASK, r4
}
 8006e04:	bd10      	pop	{r4, pc}
 8006e06:	bf00      	nop
 8006e08:	2000006c 	.word	0x2000006c

08006e0c <SUBGRF_GetRssiInst>:
{
 8006e0c:	b500      	push	{lr}
 8006e0e:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8006e10:	2201      	movs	r2, #1
 8006e12:	a901      	add	r1, sp, #4
 8006e14:	2015      	movs	r0, #21
 8006e16:	f7ff ffe9 	bl	8006dec <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8006e1a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006e1e:	4240      	negs	r0, r0
}
 8006e20:	1040      	asrs	r0, r0, #1
 8006e22:	b003      	add	sp, #12
 8006e24:	f85d fb04 	ldr.w	pc, [sp], #4

08006e28 <SUBGRF_GetRxBufferStatus>:
{
 8006e28:	b530      	push	{r4, r5, lr}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8006e30:	2202      	movs	r2, #2
 8006e32:	a901      	add	r1, sp, #4
 8006e34:	2013      	movs	r0, #19
 8006e36:	f7ff ffd9 	bl	8006dec <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8006e3a:	f7ff fadf 	bl	80063fc <SUBGRF_GetPacketType>
 8006e3e:	2801      	cmp	r0, #1
 8006e40:	d007      	beq.n	8006e52 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8006e42:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006e46:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8006e48:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006e4c:	7023      	strb	r3, [r4, #0]
}
 8006e4e:	b003      	add	sp, #12
 8006e50:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <SUBGRF_GetRxBufferStatus+0x40>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d1f2      	bne.n	8006e42 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8006e5c:	f240 7002 	movw	r0, #1794	; 0x702
 8006e60:	f7ff fae2 	bl	8006428 <SUBGRF_ReadRegister>
 8006e64:	7028      	strb	r0, [r5, #0]
 8006e66:	e7ef      	b.n	8006e48 <SUBGRF_GetRxBufferStatus+0x20>
 8006e68:	200005b5 	.word	0x200005b5

08006e6c <SUBGRF_GetPayload>:
{
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	4606      	mov	r6, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8006e7c:	f10d 0107 	add.w	r1, sp, #7
 8006e80:	4620      	mov	r0, r4
 8006e82:	f7ff ffd1 	bl	8006e28 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006e86:	7822      	ldrb	r2, [r4, #0]
 8006e88:	42aa      	cmp	r2, r5
 8006e8a:	d902      	bls.n	8006e92 <SUBGRF_GetPayload+0x26>
        return 1;
 8006e8c:	2001      	movs	r0, #1
}
 8006e8e:	b002      	add	sp, #8
 8006e90:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8006e92:	4631      	mov	r1, r6
 8006e94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006e98:	f7ff fb6c 	bl	8006574 <SUBGRF_ReadBuffer>
    return 0;
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	e7f6      	b.n	8006e8e <SUBGRF_GetPayload+0x22>

08006ea0 <SUBGRF_GetPacketStatus>:
{
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	a901      	add	r1, sp, #4
 8006eaa:	2014      	movs	r0, #20
 8006eac:	f7ff ff9e 	bl	8006dec <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8006eb0:	f7ff faa4 	bl	80063fc <SUBGRF_GetPacketType>
 8006eb4:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8006eb6:	b148      	cbz	r0, 8006ecc <SUBGRF_GetPacketStatus+0x2c>
 8006eb8:	2801      	cmp	r0, #1
 8006eba:	d018      	beq.n	8006eee <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8006ebc:	2214      	movs	r2, #20
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 fb22 	bl	800750a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006ec6:	230f      	movs	r3, #15
 8006ec8:	7023      	strb	r3, [r4, #0]
}
 8006eca:	e00e      	b.n	8006eea <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8006ecc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006ed0:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006ed2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006ed6:	425b      	negs	r3, r3
 8006ed8:	105b      	asrs	r3, r3, #1
 8006eda:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8006edc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006ee0:	425b      	negs	r3, r3
 8006ee2:	105b      	asrs	r3, r3, #1
 8006ee4:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60a3      	str	r3, [r4, #8]
}
 8006eea:	b002      	add	sp, #8
 8006eec:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8006eee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006ef2:	425b      	negs	r3, r3
 8006ef4:	105b      	asrs	r3, r3, #1
 8006ef6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8006ef8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8006efc:	3302      	adds	r3, #2
 8006efe:	109b      	asrs	r3, r3, #2
 8006f00:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006f02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006f06:	425b      	negs	r3, r3
 8006f08:	105b      	asrs	r3, r3, #1
 8006f0a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8006f0c:	4b01      	ldr	r3, [pc, #4]	; (8006f14 <SUBGRF_GetPacketStatus+0x74>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6123      	str	r3, [r4, #16]
            break;
 8006f12:	e7ea      	b.n	8006eea <SUBGRF_GetPacketStatus+0x4a>
 8006f14:	200005b0 	.word	0x200005b0

08006f18 <SUBGRF_SetSwitch>:
{
 8006f18:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8006f1a:	2901      	cmp	r1, #1
 8006f1c:	d003      	beq.n	8006f26 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8006f1e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8006f20:	f7fa fafa 	bl	8001518 <RBI_ConfigRFSwitch>
}
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8006f2a:	2c01      	cmp	r4, #1
 8006f2c:	d003      	beq.n	8006f36 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8006f2e:	2c02      	cmp	r4, #2
 8006f30:	d1f6      	bne.n	8006f20 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8006f32:	2003      	movs	r0, #3
 8006f34:	e7f4      	b.n	8006f20 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8006f36:	2004      	movs	r0, #4
 8006f38:	f7ff fa86 	bl	8006448 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8006f3c:	2002      	movs	r0, #2
 8006f3e:	e7f6      	b.n	8006f2e <SUBGRF_SetSwitch+0x16>

08006f40 <SUBGRF_SetRfTxPower>:
{
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8006f44:	f7fa faec 	bl	8001520 <RBI_GetTxConfig>
    switch (TxConfig)
 8006f48:	b148      	cbz	r0, 8006f5e <SUBGRF_SetRfTxPower+0x1e>
 8006f4a:	2802      	cmp	r0, #2
 8006f4c:	d10d      	bne.n	8006f6a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8006f4e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8006f50:	2202      	movs	r2, #2
 8006f52:	4621      	mov	r1, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	f7ff fdb3 	bl	8006ac0 <SUBGRF_SetTxParams>
}
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8006f5e:	2c0f      	cmp	r4, #15
 8006f60:	dc01      	bgt.n	8006f66 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8006f62:	2501      	movs	r5, #1
 8006f64:	e7f4      	b.n	8006f50 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8006f66:	2502      	movs	r5, #2
 8006f68:	e7f2      	b.n	8006f50 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8006f6a:	2501      	movs	r5, #1
 8006f6c:	e7f0      	b.n	8006f50 <SUBGRF_SetRfTxPower+0x10>

08006f6e <SUBGRF_GetRadioWakeUpTime>:
}
 8006f6e:	2001      	movs	r0, #1
 8006f70:	4770      	bx	lr
	...

08006f74 <HAL_SUBGHZ_TxCpltCallback>:
{
 8006f74:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8006f76:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	4798      	blx	r3
}
 8006f7e:	bd08      	pop	{r3, pc}
 8006f80:	200005b8 	.word	0x200005b8

08006f84 <HAL_SUBGHZ_RxCpltCallback>:
{
 8006f84:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8006f86:	4b02      	ldr	r3, [pc, #8]	; (8006f90 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2002      	movs	r0, #2
 8006f8c:	4798      	blx	r3
}
 8006f8e:	bd08      	pop	{r3, pc}
 8006f90:	200005b8 	.word	0x200005b8

08006f94 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8006f94:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8006f96:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2040      	movs	r0, #64	; 0x40
 8006f9c:	4798      	blx	r3
}
 8006f9e:	bd08      	pop	{r3, pc}
 8006fa0:	200005b8 	.word	0x200005b8

08006fa4 <HAL_SUBGHZ_CADStatusCallback>:
{
 8006fa4:	b508      	push	{r3, lr}
    switch (cadstatus)
 8006fa6:	b111      	cbz	r1, 8006fae <HAL_SUBGHZ_CADStatusCallback+0xa>
 8006fa8:	2901      	cmp	r1, #1
 8006faa:	d005      	beq.n	8006fb8 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8006fac:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2080      	movs	r0, #128	; 0x80
 8006fb4:	4798      	blx	r3
            break;
 8006fb6:	e7f9      	b.n	8006fac <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8006fb8:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006fc0:	4798      	blx	r3
}
 8006fc2:	e7f3      	b.n	8006fac <HAL_SUBGHZ_CADStatusCallback+0x8>
 8006fc4:	200005b8 	.word	0x200005b8

08006fc8 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8006fc8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8006fca:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006fd2:	4798      	blx	r3
}
 8006fd4:	bd08      	pop	{r3, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200005b8 	.word	0x200005b8

08006fdc <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8006fdc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8006fde:	4b02      	ldr	r3, [pc, #8]	; (8006fe8 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2020      	movs	r0, #32
 8006fe4:	4798      	blx	r3
}
 8006fe6:	bd08      	pop	{r3, pc}
 8006fe8:	200005b8 	.word	0x200005b8

08006fec <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8006fec:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8006fee:	4b02      	ldr	r3, [pc, #8]	; (8006ff8 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2004      	movs	r0, #4
 8006ff4:	4798      	blx	r3
}
 8006ff6:	bd08      	pop	{r3, pc}
 8006ff8:	200005b8 	.word	0x200005b8

08006ffc <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8006ffc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8006ffe:	4b02      	ldr	r3, [pc, #8]	; (8007008 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2008      	movs	r0, #8
 8007004:	4798      	blx	r3
}
 8007006:	bd08      	pop	{r3, pc}
 8007008:	200005b8 	.word	0x200005b8

0800700c <HAL_SUBGHZ_HeaderValidCallback>:
{
 800700c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800700e:	4b02      	ldr	r3, [pc, #8]	; (8007018 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2010      	movs	r0, #16
 8007014:	4798      	blx	r3
}
 8007016:	bd08      	pop	{r3, pc}
 8007018:	200005b8 	.word	0x200005b8

0800701c <HAL_SUBGHZ_LrFhssHopCallback>:
{
 800701c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007026:	4798      	blx	r3
}
 8007028:	bd08      	pop	{r3, pc}
 800702a:	bf00      	nop
 800702c:	200005b8 	.word	0x200005b8

08007030 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8007030:	4601      	mov	r1, r0
 8007032:	b188      	cbz	r0, 8007058 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007034:	2300      	movs	r3, #0
 8007036:	2b15      	cmp	r3, #21
 8007038:	d80d      	bhi.n	8007056 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800703a:	4618      	mov	r0, r3
 800703c:	4a07      	ldr	r2, [pc, #28]	; (800705c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800703e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007042:	428a      	cmp	r2, r1
 8007044:	d802      	bhi.n	800704c <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007046:	3301      	adds	r3, #1
 8007048:	b2db      	uxtb	r3, r3
 800704a:	e7f4      	b.n	8007036 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 800704c:	4b03      	ldr	r3, [pc, #12]	; (800705c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800704e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007052:	7918      	ldrb	r0, [r3, #4]
 8007054:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8007056:	e7fe      	b.n	8007056 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8007058:	201f      	movs	r0, #31
}
 800705a:	4770      	bx	lr
 800705c:	080081e0 	.word	0x080081e0

08007060 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	4605      	mov	r5, r0
 8007066:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8007068:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <SUBGRF_GetCFO+0x80>)
 800706a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800706c:	f640 0007 	movw	r0, #2055	; 0x807
 8007070:	f7ff f9da 	bl	8006428 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007074:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8007078:	3308      	adds	r3, #8
 800707a:	446b      	add	r3, sp
 800707c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8007080:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8007084:	3301      	adds	r3, #1
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	4a16      	ldr	r2, [pc, #88]	; (80070e4 <SUBGRF_GetCFO+0x84>)
 800708c:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8007090:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007094:	2807      	cmp	r0, #7
 8007096:	d921      	bls.n	80070dc <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8007098:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800709a:	fb03 f000 	mul.w	r0, r3, r0
 800709e:	2803      	cmp	r0, #3
 80070a0:	d800      	bhi.n	80070a4 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80070a2:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80070a4:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80070a8:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80070ac:	f7ff f9bc 	bl	8006428 <SUBGRF_ReadRegister>
 80070b0:	0206      	lsls	r6, r0, #8
 80070b2:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80070b6:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80070ba:	f7ff f9b5 	bl	8006428 <SUBGRF_ReadRegister>
 80070be:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80070c0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80070c4:	d003      	beq.n	80070ce <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80070c6:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80070ca:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80070ce:	096b      	lsrs	r3, r5, #5
 80070d0:	fb03 f000 	mul.w	r0, r3, r0
 80070d4:	11c0      	asrs	r0, r0, #7
 80070d6:	6020      	str	r0, [r4, #0]
}
 80070d8:	b002      	add	sp, #8
 80070da:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80070dc:	2302      	movs	r3, #2
 80070de:	e7dc      	b.n	800709a <SUBGRF_GetCFO+0x3a>
 80070e0:	0c0a0804 	.word	0x0c0a0804
 80070e4:	01e84800 	.word	0x01e84800

080070e8 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	4770      	bx	lr

080070ee <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80070ee:	f04f 30ff 	mov.w	r0, #4294967295
 80070f2:	4770      	bx	lr

080070f4 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	4770      	bx	lr

080070fa <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80070fa:	4770      	bx	lr

080070fc <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr

08007100 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8007100:	2000      	movs	r0, #0
 8007102:	4770      	bx	lr

08007104 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8007104:	4770      	bx	lr

08007106 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	4770      	bx	lr

0800710c <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	4770      	bx	lr

08007112 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8007112:	4770      	bx	lr

08007114 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8007114:	4770      	bx	lr

08007116 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8007116:	4770      	bx	lr

08007118 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8007118:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800711a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800711e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <TRACE_AllocateBufer+0x84>)
 8007122:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8007126:	8a1a      	ldrh	r2, [r3, #16]
 8007128:	4596      	cmp	lr, r2
 800712a:	d011      	beq.n	8007150 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800712c:	4596      	cmp	lr, r2
 800712e:	d921      	bls.n	8007174 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8007130:	f5ce 7300 	rsb	r3, lr, #512	; 0x200
 8007134:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8007136:	4283      	cmp	r3, r0
 8007138:	d81f      	bhi.n	800717a <TRACE_AllocateBufer+0x62>
 800713a:	4282      	cmp	r2, r0
 800713c:	d91d      	bls.n	800717a <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800713e:	4b17      	ldr	r3, [pc, #92]	; (800719c <TRACE_AllocateBufer+0x84>)
 8007140:	2401      	movs	r4, #1
 8007142:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8007144:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8007148:	2400      	movs	r4, #0
 800714a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800714c:	4613      	mov	r3, r2
 800714e:	e014      	b.n	800717a <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8007150:	f5ce 7300 	rsb	r3, lr, #512	; 0x200
 8007154:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8007156:	4298      	cmp	r0, r3
 8007158:	d30f      	bcc.n	800717a <TRACE_AllocateBufer+0x62>
 800715a:	4282      	cmp	r2, r0
 800715c:	d90d      	bls.n	800717a <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <TRACE_AllocateBufer+0x84>)
 8007160:	2401      	movs	r4, #1
 8007162:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8007164:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8007168:	f04f 0e00 	mov.w	lr, #0
 800716c:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8007170:	4613      	mov	r3, r2
 8007172:	e002      	b.n	800717a <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8007174:	eba2 020e 	sub.w	r2, r2, lr
 8007178:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800717a:	4283      	cmp	r3, r0
 800717c:	d90a      	bls.n	8007194 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800717e:	4a07      	ldr	r2, [pc, #28]	; (800719c <TRACE_AllocateBufer+0x84>)
 8007180:	8a53      	ldrh	r3, [r2, #18]
 8007182:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007184:	4403      	add	r3, r0
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 800718c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718e:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8007192:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	e7f9      	b.n	800718e <TRACE_AllocateBufer+0x76>
 800719a:	bf00      	nop
 800719c:	200007bc 	.word	0x200007bc

080071a0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80071a4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80071a6:	4a03      	ldr	r2, [pc, #12]	; (80071b4 <TRACE_Lock+0x14>)
 80071a8:	8ad3      	ldrh	r3, [r2, #22]
 80071aa:	3301      	adds	r3, #1
 80071ac:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ae:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80071b2:	4770      	bx	lr
 80071b4:	200007bc 	.word	0x200007bc

080071b8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80071bc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80071be:	4a03      	ldr	r2, [pc, #12]	; (80071cc <TRACE_UnLock+0x14>)
 80071c0:	8ad3      	ldrh	r3, [r2, #22]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80071ca:	4770      	bx	lr
 80071cc:	200007bc 	.word	0x200007bc

080071d0 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80071d0:	4b02      	ldr	r3, [pc, #8]	; (80071dc <TRACE_IsLocked+0xc>)
 80071d2:	8ad8      	ldrh	r0, [r3, #22]
}
 80071d4:	3800      	subs	r0, #0
 80071d6:	bf18      	it	ne
 80071d8:	2001      	movne	r0, #1
 80071da:	4770      	bx	lr
 80071dc:	200007bc 	.word	0x200007bc

080071e0 <UTIL_ADV_TRACE_Init>:
{
 80071e0:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80071e2:	2218      	movs	r2, #24
 80071e4:	2100      	movs	r1, #0
 80071e6:	4807      	ldr	r0, [pc, #28]	; (8007204 <UTIL_ADV_TRACE_Init+0x24>)
 80071e8:	f000 f98f 	bl	800750a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80071ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071f0:	2100      	movs	r1, #0
 80071f2:	4805      	ldr	r0, [pc, #20]	; (8007208 <UTIL_ADV_TRACE_Init+0x28>)
 80071f4:	f000 f989 	bl	800750a <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <UTIL_ADV_TRACE_Init+0x2c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4804      	ldr	r0, [pc, #16]	; (8007210 <UTIL_ADV_TRACE_Init+0x30>)
 80071fe:	4798      	blx	r3
}
 8007200:	bd08      	pop	{r3, pc}
 8007202:	bf00      	nop
 8007204:	200007bc 	.word	0x200007bc
 8007208:	200005bc 	.word	0x200005bc
 800720c:	08007e44 	.word	0x08007e44
 8007210:	08007391 	.word	0x08007391

08007214 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8007214:	4b01      	ldr	r3, [pc, #4]	; (800721c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8007216:	6058      	str	r0, [r3, #4]
}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	200007bc 	.word	0x200007bc

08007220 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8007220:	4b01      	ldr	r3, [pc, #4]	; (8007228 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8007222:	7218      	strb	r0, [r3, #8]
}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	200007bc 	.word	0x200007bc

0800722c <TRACE_Send>:
{
 800722c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800722e:	f3ef 8310 	mrs	r3, PRIMASK
 8007232:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8007234:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8007236:	f7ff ffcb 	bl	80071d0 <TRACE_IsLocked>
 800723a:	b118      	cbz	r0, 8007244 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8007240:	2000      	movs	r0, #0
}
 8007242:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8007244:	f7ff ffac 	bl	80071a0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8007248:	4b1c      	ldr	r3, [pc, #112]	; (80072bc <TRACE_Send+0x90>)
 800724a:	8a1a      	ldrh	r2, [r3, #16]
 800724c:	8a5b      	ldrh	r3, [r3, #18]
 800724e:	429a      	cmp	r2, r3
 8007250:	d02e      	beq.n	80072b0 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8007252:	491a      	ldr	r1, [pc, #104]	; (80072bc <TRACE_Send+0x90>)
 8007254:	7889      	ldrb	r1, [r1, #2]
 8007256:	2901      	cmp	r1, #1
 8007258:	d017      	beq.n	800728a <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800725a:	4a18      	ldr	r2, [pc, #96]	; (80072bc <TRACE_Send+0x90>)
 800725c:	7892      	ldrb	r2, [r2, #2]
 800725e:	b932      	cbnz	r2, 800726e <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8007260:	4a16      	ldr	r2, [pc, #88]	; (80072bc <TRACE_Send+0x90>)
 8007262:	8a12      	ldrh	r2, [r2, #16]
 8007264:	4293      	cmp	r3, r2
 8007266:	d91e      	bls.n	80072a6 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	4a14      	ldr	r2, [pc, #80]	; (80072bc <TRACE_Send+0x90>)
 800726c:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800726e:	4e13      	ldr	r6, [pc, #76]	; (80072bc <TRACE_Send+0x90>)
 8007270:	8a33      	ldrh	r3, [r6, #16]
 8007272:	4d13      	ldr	r5, [pc, #76]	; (80072c0 <TRACE_Send+0x94>)
 8007274:	441d      	add	r5, r3
 8007276:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 800727a:	f7f9 fb2d 	bl	80008d8 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800727e:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <TRACE_Send+0x98>)
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	8ab1      	ldrh	r1, [r6, #20]
 8007284:	4628      	mov	r0, r5
 8007286:	4798      	blx	r3
 8007288:	e7db      	b.n	8007242 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800728a:	480c      	ldr	r0, [pc, #48]	; (80072bc <TRACE_Send+0x90>)
 800728c:	8801      	ldrh	r1, [r0, #0]
 800728e:	1a8a      	subs	r2, r1, r2
 8007290:	b292      	uxth	r2, r2
 8007292:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007294:	2102      	movs	r1, #2
 8007296:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007298:	2100      	movs	r1, #0
 800729a:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800729c:	2a00      	cmp	r2, #0
 800729e:	d1dc      	bne.n	800725a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80072a0:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80072a2:	8201      	strh	r1, [r0, #16]
 80072a4:	e7d9      	b.n	800725a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80072a6:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80072aa:	4b04      	ldr	r3, [pc, #16]	; (80072bc <TRACE_Send+0x90>)
 80072ac:	829a      	strh	r2, [r3, #20]
 80072ae:	e7de      	b.n	800726e <TRACE_Send+0x42>
      TRACE_UnLock();
 80072b0:	f7ff ff82 	bl	80071b8 <TRACE_UnLock>
 80072b4:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80072b8:	2000      	movs	r0, #0
}
 80072ba:	e7c2      	b.n	8007242 <TRACE_Send+0x16>
 80072bc:	200007bc 	.word	0x200007bc
 80072c0:	200005bc 	.word	0x200005bc
 80072c4:	08007e44 	.word	0x08007e44

080072c8 <UTIL_ADV_TRACE_COND_FSend>:
{
 80072c8:	b408      	push	{r3}
 80072ca:	b530      	push	{r4, r5, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80072d6:	4b2b      	ldr	r3, [pc, #172]	; (8007384 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80072d8:	7a1b      	ldrb	r3, [r3, #8]
 80072da:	4283      	cmp	r3, r0
 80072dc:	d34c      	bcc.n	8007378 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80072de:	4b29      	ldr	r3, [pc, #164]	; (8007384 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	4399      	bics	r1, r3
 80072e4:	d14b      	bne.n	800737e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80072e6:	4b27      	ldr	r3, [pc, #156]	; (8007384 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	b123      	cbz	r3, 80072f6 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 80072ec:	b11a      	cbz	r2, 80072f6 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80072ee:	f10d 0102 	add.w	r1, sp, #2
 80072f2:	a801      	add	r0, sp, #4
 80072f4:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80072f6:	ab0a      	add	r3, sp, #40	; 0x28
 80072f8:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80072fa:	4622      	mov	r2, r4
 80072fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007300:	4821      	ldr	r0, [pc, #132]	; (8007388 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8007302:	f000 fc2f 	bl	8007b64 <tiny_vsnprintf_like>
 8007306:	b285      	uxth	r5, r0
  TRACE_Lock();
 8007308:	f7ff ff4a 	bl	80071a0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800730c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007310:	18e8      	adds	r0, r5, r3
 8007312:	4669      	mov	r1, sp
 8007314:	b280      	uxth	r0, r0
 8007316:	f7ff feff 	bl	8007118 <TRACE_AllocateBufer>
 800731a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800731e:	d026      	beq.n	800736e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8007320:	2300      	movs	r3, #0
 8007322:	e00d      	b.n	8007340 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8007324:	f8bd 2000 	ldrh.w	r2, [sp]
 8007328:	f103 0118 	add.w	r1, r3, #24
 800732c:	4469      	add	r1, sp
 800732e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8007332:	4916      	ldr	r1, [pc, #88]	; (800738c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8007334:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8007336:	3201      	adds	r2, #1
 8007338:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 800733c:	3301      	adds	r3, #1
 800733e:	b29b      	uxth	r3, r3
 8007340:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8007344:	429a      	cmp	r2, r3
 8007346:	d8ed      	bhi.n	8007324 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007348:	f8bd 0000 	ldrh.w	r0, [sp]
 800734c:	9b05      	ldr	r3, [sp, #20]
 800734e:	4622      	mov	r2, r4
 8007350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007354:	4c0d      	ldr	r4, [pc, #52]	; (800738c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8007356:	4420      	add	r0, r4
 8007358:	f000 fc04 	bl	8007b64 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800735c:	f7ff ff2c 	bl	80071b8 <TRACE_UnLock>
    return TRACE_Send();
 8007360:	f7ff ff64 	bl	800722c <TRACE_Send>
}
 8007364:	b006      	add	sp, #24
 8007366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800736a:	b001      	add	sp, #4
 800736c:	4770      	bx	lr
  TRACE_UnLock();
 800736e:	f7ff ff23 	bl	80071b8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8007372:	f06f 0002 	mvn.w	r0, #2
 8007376:	e7f5      	b.n	8007364 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8007378:	f06f 0004 	mvn.w	r0, #4
 800737c:	e7f2      	b.n	8007364 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800737e:	f06f 0005 	mvn.w	r0, #5
 8007382:	e7ef      	b.n	8007364 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8007384:	200007bc 	.word	0x200007bc
 8007388:	200007d4 	.word	0x200007d4
 800738c:	200005bc 	.word	0x200005bc

08007390 <TRACE_TxCpltCallback>:
{
 8007390:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007392:	f3ef 8310 	mrs	r3, PRIMASK
 8007396:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8007398:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800739a:	4b26      	ldr	r3, [pc, #152]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 800739c:	789b      	ldrb	r3, [r3, #2]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d016      	beq.n	80073d0 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80073a2:	4a24      	ldr	r2, [pc, #144]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073a4:	8a13      	ldrh	r3, [r2, #16]
 80073a6:	8a90      	ldrh	r0, [r2, #20]
 80073a8:	4403      	add	r3, r0
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80073b0:	4b20      	ldr	r3, [pc, #128]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073b2:	8a1a      	ldrh	r2, [r3, #16]
 80073b4:	8a5b      	ldrh	r3, [r3, #18]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d003      	beq.n	80073c2 <TRACE_TxCpltCallback+0x32>
 80073ba:	481e      	ldr	r0, [pc, #120]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073bc:	8ac0      	ldrh	r0, [r0, #22]
 80073be:	2801      	cmp	r0, #1
 80073c0:	d00b      	beq.n	80073da <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c2:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80073c6:	f7f9 fa8d 	bl	80008e4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80073ca:	f7ff fef5 	bl	80071b8 <TRACE_UnLock>
}
 80073ce:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80073d0:	4b18      	ldr	r3, [pc, #96]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80073d6:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80073d8:	e7ea      	b.n	80073b0 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80073da:	4816      	ldr	r0, [pc, #88]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073dc:	7880      	ldrb	r0, [r0, #2]
 80073de:	2801      	cmp	r0, #1
 80073e0:	d014      	beq.n	800740c <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80073e2:	4a14      	ldr	r2, [pc, #80]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073e4:	7892      	ldrb	r2, [r2, #2]
 80073e6:	b932      	cbnz	r2, 80073f6 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80073e8:	4a12      	ldr	r2, [pc, #72]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073ea:	8a12      	ldrh	r2, [r2, #16]
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d91b      	bls.n	8007428 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80073f0:	1a9b      	subs	r3, r3, r2
 80073f2:	4a10      	ldr	r2, [pc, #64]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073f4:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80073f6:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 80073f8:	8a1a      	ldrh	r2, [r3, #16]
 80073fa:	480f      	ldr	r0, [pc, #60]	; (8007438 <TRACE_TxCpltCallback+0xa8>)
 80073fc:	4410      	add	r0, r2
 80073fe:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8007402:	4a0e      	ldr	r2, [pc, #56]	; (800743c <TRACE_TxCpltCallback+0xac>)
 8007404:	68d2      	ldr	r2, [r2, #12]
 8007406:	8a99      	ldrh	r1, [r3, #20]
 8007408:	4790      	blx	r2
 800740a:	e7e0      	b.n	80073ce <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800740c:	4c09      	ldr	r4, [pc, #36]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 800740e:	8820      	ldrh	r0, [r4, #0]
 8007410:	1a82      	subs	r2, r0, r2
 8007412:	b292      	uxth	r2, r2
 8007414:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007416:	2002      	movs	r0, #2
 8007418:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800741a:	2000      	movs	r0, #0
 800741c:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800741e:	2a00      	cmp	r2, #0
 8007420:	d1df      	bne.n	80073e2 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007422:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007424:	8220      	strh	r0, [r4, #16]
 8007426:	e7dc      	b.n	80073e2 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007428:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 800742c:	4b01      	ldr	r3, [pc, #4]	; (8007434 <TRACE_TxCpltCallback+0xa4>)
 800742e:	829a      	strh	r2, [r3, #20]
 8007430:	e7e1      	b.n	80073f6 <TRACE_TxCpltCallback+0x66>
 8007432:	bf00      	nop
 8007434:	200007bc 	.word	0x200007bc
 8007438:	200005bc 	.word	0x200005bc
 800743c:	08007e44 	.word	0x08007e44

08007440 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007440:	2300      	movs	r3, #0
 8007442:	4a02      	ldr	r2, [pc, #8]	; (800744c <UTIL_LPM_Init+0xc>)
 8007444:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007446:	4a02      	ldr	r2, [pc, #8]	; (8007450 <UTIL_LPM_Init+0x10>)
 8007448:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800744a:	4770      	bx	lr
 800744c:	200008d8 	.word	0x200008d8
 8007450:	200008d4 	.word	0x200008d4

08007454 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007454:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007458:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800745a:	b141      	cbz	r1, 800746e <UTIL_LPM_SetStopMode+0x1a>
 800745c:	2901      	cmp	r1, #1
 800745e:	d103      	bne.n	8007468 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8007460:	4906      	ldr	r1, [pc, #24]	; (800747c <UTIL_LPM_SetStopMode+0x28>)
 8007462:	680a      	ldr	r2, [r1, #0]
 8007464:	4302      	orrs	r2, r0
 8007466:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007468:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800746c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800746e:	4903      	ldr	r1, [pc, #12]	; (800747c <UTIL_LPM_SetStopMode+0x28>)
 8007470:	680a      	ldr	r2, [r1, #0]
 8007472:	ea22 0200 	bic.w	r2, r2, r0
 8007476:	600a      	str	r2, [r1, #0]
      break;
 8007478:	e7f6      	b.n	8007468 <UTIL_LPM_SetStopMode+0x14>
 800747a:	bf00      	nop
 800747c:	200008d8 	.word	0x200008d8

08007480 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007480:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007484:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8007486:	b141      	cbz	r1, 800749a <UTIL_LPM_SetOffMode+0x1a>
 8007488:	2901      	cmp	r1, #1
 800748a:	d103      	bne.n	8007494 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800748c:	4906      	ldr	r1, [pc, #24]	; (80074a8 <UTIL_LPM_SetOffMode+0x28>)
 800748e:	680a      	ldr	r2, [r1, #0]
 8007490:	4302      	orrs	r2, r0
 8007492:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007494:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007498:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800749a:	4903      	ldr	r1, [pc, #12]	; (80074a8 <UTIL_LPM_SetOffMode+0x28>)
 800749c:	680a      	ldr	r2, [r1, #0]
 800749e:	ea22 0200 	bic.w	r2, r2, r0
 80074a2:	600a      	str	r2, [r1, #0]
      break;
 80074a4:	e7f6      	b.n	8007494 <UTIL_LPM_SetOffMode+0x14>
 80074a6:	bf00      	nop
 80074a8:	200008d4 	.word	0x200008d4

080074ac <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80074ac:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80074b2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80074b4:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <UTIL_LPM_EnterLowPower+0x3c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	b13b      	cbz	r3, 80074ca <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80074ba:	4d0c      	ldr	r5, [pc, #48]	; (80074ec <UTIL_LPM_EnterLowPower+0x40>)
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80074c0:	686b      	ldr	r3, [r5, #4]
 80074c2:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c4:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80074c8:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80074ca:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <UTIL_LPM_EnterLowPower+0x44>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	b12b      	cbz	r3, 80074dc <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80074d0:	4d06      	ldr	r5, [pc, #24]	; (80074ec <UTIL_LPM_EnterLowPower+0x40>)
 80074d2:	68ab      	ldr	r3, [r5, #8]
 80074d4:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80074d6:	68eb      	ldr	r3, [r5, #12]
 80074d8:	4798      	blx	r3
 80074da:	e7f3      	b.n	80074c4 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80074dc:	4d03      	ldr	r5, [pc, #12]	; (80074ec <UTIL_LPM_EnterLowPower+0x40>)
 80074de:	692b      	ldr	r3, [r5, #16]
 80074e0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80074e2:	696b      	ldr	r3, [r5, #20]
 80074e4:	4798      	blx	r3
 80074e6:	e7ed      	b.n	80074c4 <UTIL_LPM_EnterLowPower+0x18>
 80074e8:	200008d8 	.word	0x200008d8
 80074ec:	08007de0 	.word	0x08007de0
 80074f0:	200008d4 	.word	0x200008d4

080074f4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80074f4:	e004      	b.n	8007500 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80074f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074fa:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80074fe:	461a      	mov	r2, r3
 8007500:	1e53      	subs	r3, r2, #1
 8007502:	b29b      	uxth	r3, r3
 8007504:	2a00      	cmp	r2, #0
 8007506:	d1f6      	bne.n	80074f6 <UTIL_MEM_cpy_8+0x2>
    }
}
 8007508:	4770      	bx	lr

0800750a <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800750a:	e002      	b.n	8007512 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 800750c:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8007510:	461a      	mov	r2, r3
 8007512:	1e53      	subs	r3, r2, #1
 8007514:	b29b      	uxth	r3, r3
 8007516:	2a00      	cmp	r2, #0
 8007518:	d1f8      	bne.n	800750c <UTIL_MEM_set_8+0x2>
  }
}
 800751a:	4770      	bx	lr

0800751c <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007520:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8007522:	4a06      	ldr	r2, [pc, #24]	; (800753c <UTIL_SEQ_SetTask+0x20>)
 8007524:	6813      	ldr	r3, [r2, #0]
 8007526:	4303      	orrs	r3, r0
 8007528:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800752a:	4a05      	ldr	r2, [pc, #20]	; (8007540 <UTIL_SEQ_SetTask+0x24>)
 800752c:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8007530:	4303      	orrs	r3, r0
 8007532:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007536:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800753a:	4770      	bx	lr
 800753c:	200008f4 	.word	0x200008f4
 8007540:	200008ec 	.word	0x200008ec

08007544 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8007544:	4770      	bx	lr

08007546 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8007546:	4770      	bx	lr

08007548 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007548:	0c03      	lsrs	r3, r0, #16
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	b9b3      	cbnz	r3, 800757c <SEQ_BitPosition+0x34>
 800754e:	0400      	lsls	r0, r0, #16
 8007550:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007556:	d102      	bne.n	800755e <SEQ_BitPosition+0x16>
 8007558:	3308      	adds	r3, #8
 800755a:	b2db      	uxtb	r3, r3
 800755c:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800755e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007562:	d102      	bne.n	800756a <SEQ_BitPosition+0x22>
 8007564:	3304      	adds	r3, #4
 8007566:	b2db      	uxtb	r3, r3
 8007568:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800756a:	0f00      	lsrs	r0, r0, #28
 800756c:	4a04      	ldr	r2, [pc, #16]	; (8007580 <SEQ_BitPosition+0x38>)
 800756e:	5c10      	ldrb	r0, [r2, r0]
 8007570:	4418      	add	r0, r3
 8007572:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8007574:	f1c0 001f 	rsb	r0, r0, #31
}
 8007578:	b2c0      	uxtb	r0, r0
 800757a:	4770      	bx	lr
uint8_t n = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	e7e8      	b.n	8007552 <SEQ_BitPosition+0xa>
 8007580:	08008290 	.word	0x08008290

08007584 <UTIL_SEQ_Run>:
{
 8007584:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8007586:	4b42      	ldr	r3, [pc, #264]	; (8007690 <UTIL_SEQ_Run+0x10c>)
 8007588:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800758a:	4020      	ands	r0, r4
 800758c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 800758e:	4b41      	ldr	r3, [pc, #260]	; (8007694 <UTIL_SEQ_Run+0x110>)
 8007590:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8007592:	4b41      	ldr	r3, [pc, #260]	; (8007698 <UTIL_SEQ_Run+0x114>)
 8007594:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8007596:	4941      	ldr	r1, [pc, #260]	; (800769c <UTIL_SEQ_Run+0x118>)
 8007598:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 800759a:	4941      	ldr	r1, [pc, #260]	; (80076a0 <UTIL_SEQ_Run+0x11c>)
 800759c:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800759e:	e02f      	b.n	8007600 <UTIL_SEQ_Run+0x7c>
      counter++;
 80075a0:	3301      	adds	r3, #1
 80075a2:	e034      	b.n	800760e <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80075a4:	4d3f      	ldr	r5, [pc, #252]	; (80076a4 <UTIL_SEQ_Run+0x120>)
 80075a6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80075aa:	6868      	ldr	r0, [r5, #4]
 80075ac:	4010      	ands	r0, r2
 80075ae:	f7ff ffcb 	bl	8007548 <SEQ_BitPosition>
 80075b2:	4e3d      	ldr	r6, [pc, #244]	; (80076a8 <UTIL_SEQ_Run+0x124>)
 80075b4:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80075b6:	686a      	ldr	r2, [r5, #4]
 80075b8:	2301      	movs	r3, #1
 80075ba:	fa03 f000 	lsl.w	r0, r3, r0
 80075be:	ea22 0200 	bic.w	r2, r2, r0
 80075c2:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80075c8:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80075ca:	6832      	ldr	r2, [r6, #0]
 80075cc:	fa03 f202 	lsl.w	r2, r3, r2
 80075d0:	43d6      	mvns	r6, r2
 80075d2:	4d30      	ldr	r5, [pc, #192]	; (8007694 <UTIL_SEQ_Run+0x110>)
 80075d4:	6828      	ldr	r0, [r5, #0]
 80075d6:	ea20 0202 	bic.w	r2, r0, r2
 80075da:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d12d      	bne.n	800763c <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e0:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 80075e4:	4b30      	ldr	r3, [pc, #192]	; (80076a8 <UTIL_SEQ_Run+0x124>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	4b30      	ldr	r3, [pc, #192]	; (80076ac <UTIL_SEQ_Run+0x128>)
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	4798      	blx	r3
    local_taskset = TaskSet;
 80075f0:	4b28      	ldr	r3, [pc, #160]	; (8007694 <UTIL_SEQ_Run+0x110>)
 80075f2:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 80075f4:	4b28      	ldr	r3, [pc, #160]	; (8007698 <UTIL_SEQ_Run+0x114>)
 80075f6:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80075f8:	4928      	ldr	r1, [pc, #160]	; (800769c <UTIL_SEQ_Run+0x118>)
 80075fa:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 80075fc:	4928      	ldr	r1, [pc, #160]	; (80076a0 <UTIL_SEQ_Run+0x11c>)
 80075fe:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007600:	4002      	ands	r2, r0
 8007602:	4d23      	ldr	r5, [pc, #140]	; (8007690 <UTIL_SEQ_Run+0x10c>)
 8007604:	682d      	ldr	r5, [r5, #0]
 8007606:	422a      	tst	r2, r5
 8007608:	d020      	beq.n	800764c <UTIL_SEQ_Run+0xc8>
 800760a:	400b      	ands	r3, r1
 800760c:	d11e      	bne.n	800764c <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800760e:	4a25      	ldr	r2, [pc, #148]	; (80076a4 <UTIL_SEQ_Run+0x120>)
 8007610:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007614:	4002      	ands	r2, r0
 8007616:	422a      	tst	r2, r5
 8007618:	d0c2      	beq.n	80075a0 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800761a:	4922      	ldr	r1, [pc, #136]	; (80076a4 <UTIL_SEQ_Run+0x120>)
 800761c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8007620:	4002      	ands	r2, r0
 8007622:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007624:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007628:	6849      	ldr	r1, [r1, #4]
 800762a:	4211      	tst	r1, r2
 800762c:	d1ba      	bne.n	80075a4 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800762e:	491d      	ldr	r1, [pc, #116]	; (80076a4 <UTIL_SEQ_Run+0x120>)
 8007630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	6048      	str	r0, [r1, #4]
 800763a:	e7b3      	b.n	80075a4 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800763c:	3b01      	subs	r3, #1
 800763e:	4819      	ldr	r0, [pc, #100]	; (80076a4 <UTIL_SEQ_Run+0x120>)
 8007640:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8007644:	4032      	ands	r2, r6
 8007646:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800764a:	e7c7      	b.n	80075dc <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800764c:	4b16      	ldr	r3, [pc, #88]	; (80076a8 <UTIL_SEQ_Run+0x124>)
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8007654:	f7ff ff76 	bl	8007544 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007658:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800765c:	b672      	cpsid	i
  local_taskset = TaskSet;
 800765e:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <UTIL_SEQ_Run+0x110>)
 8007660:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8007662:	4a0d      	ldr	r2, [pc, #52]	; (8007698 <UTIL_SEQ_Run+0x114>)
 8007664:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8007666:	4a0d      	ldr	r2, [pc, #52]	; (800769c <UTIL_SEQ_Run+0x118>)
 8007668:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800766a:	4013      	ands	r3, r2
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <UTIL_SEQ_Run+0x10c>)
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	4213      	tst	r3, r2
 8007672:	d103      	bne.n	800767c <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <UTIL_SEQ_Run+0x11c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	420b      	tst	r3, r1
 800767a:	d006      	beq.n	800768a <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8007680:	f7ff ff61 	bl	8007546 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8007684:	4b02      	ldr	r3, [pc, #8]	; (8007690 <UTIL_SEQ_Run+0x10c>)
 8007686:	601c      	str	r4, [r3, #0]
}
 8007688:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 800768a:	f7f9 f921 	bl	80008d0 <UTIL_SEQ_Idle>
 800768e:	e7f5      	b.n	800767c <UTIL_SEQ_Run+0xf8>
 8007690:	20000010 	.word	0x20000010
 8007694:	200008f4 	.word	0x200008f4
 8007698:	200008e0 	.word	0x200008e0
 800769c:	20000014 	.word	0x20000014
 80076a0:	200008e4 	.word	0x200008e4
 80076a4:	200008ec 	.word	0x200008ec
 80076a8:	200008dc 	.word	0x200008dc
 80076ac:	200008e8 	.word	0x200008e8

080076b0 <UTIL_SEQ_RegTask>:
{
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076b4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80076b8:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80076ba:	f7ff ff45 	bl	8007548 <SEQ_BitPosition>
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <UTIL_SEQ_RegTask+0x1c>)
 80076c0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c4:	f385 8810 	msr	PRIMASK, r5
}
 80076c8:	bd38      	pop	{r3, r4, r5, pc}
 80076ca:	bf00      	nop
 80076cc:	200008e8 	.word	0x200008e8

080076d0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80076d0:	b082      	sub	sp, #8
 80076d2:	b082      	sub	sp, #8
 80076d4:	f10d 0c08 	add.w	ip, sp, #8
 80076d8:	e90c 0006 	stmdb	ip, {r1, r2}
 80076dc:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80076de:	2200      	movs	r2, #0
 80076e0:	6002      	str	r2, [r0, #0]
 80076e2:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 80076e4:	440b      	add	r3, r1
 80076e6:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80076e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80076ec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80076f0:	440a      	add	r2, r1
 80076f2:	b291      	uxth	r1, r2
 80076f4:	b212      	sxth	r2, r2
 80076f6:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80076f8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80076fc:	db04      	blt.n	8007708 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80076fe:	3301      	adds	r3, #1
 8007700:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8007702:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8007706:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8007708:	b002      	add	sp, #8
 800770a:	b002      	add	sp, #8
 800770c:	4770      	bx	lr
	...

08007710 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8007710:	b530      	push	{r4, r5, lr}
 8007712:	b087      	sub	sp, #28
 8007714:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8007716:	2300      	movs	r3, #0
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800771e:	6003      	str	r3, [r0, #0]
 8007720:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8007722:	4d0b      	ldr	r5, [pc, #44]	; (8007750 <SysTimeGet+0x40>)
 8007724:	692b      	ldr	r3, [r5, #16]
 8007726:	a805      	add	r0, sp, #20
 8007728:	4798      	blx	r3
 800772a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800772c:	68eb      	ldr	r3, [r5, #12]
 800772e:	4798      	blx	r3
 8007730:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8007734:	686b      	ldr	r3, [r5, #4]
 8007736:	4798      	blx	r3
 8007738:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	9b04      	ldr	r3, [sp, #16]
 8007740:	aa02      	add	r2, sp, #8
 8007742:	ca06      	ldmia	r2, {r1, r2}
 8007744:	4620      	mov	r0, r4
 8007746:	f7ff ffc3 	bl	80076d0 <SysTimeAdd>

  return sysTime;
}
 800774a:	4620      	mov	r0, r4
 800774c:	b007      	add	sp, #28
 800774e:	bd30      	pop	{r4, r5, pc}
 8007750:	08007e04 	.word	0x08007e04

08007754 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8007754:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8007756:	4b03      	ldr	r3, [pc, #12]	; (8007764 <UTIL_TIMER_Init+0x10>)
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <UTIL_TIMER_Init+0x14>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4798      	blx	r3
}
 8007762:	bd08      	pop	{r3, pc}
 8007764:	200008f8 	.word	0x200008f8
 8007768:	08007e18 	.word	0x08007e18

0800776c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 800776c:	b1a8      	cbz	r0, 800779a <UTIL_TIMER_Create+0x2e>
{
 800776e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007770:	4617      	mov	r7, r2
 8007772:	461e      	mov	r6, r3
 8007774:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8007776:	b193      	cbz	r3, 800779e <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8007778:	2500      	movs	r5, #0
 800777a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <UTIL_TIMER_Create+0x38>)
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	4608      	mov	r0, r1
 8007782:	4798      	blx	r3
 8007784:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8007786:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8007788:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800778a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800778c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800778e:	9b06      	ldr	r3, [sp, #24]
 8007790:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8007792:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8007794:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8007796:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8007798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800779a:	2001      	movs	r0, #1
}
 800779c:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800779e:	2001      	movs	r0, #1
 80077a0:	e7fa      	b.n	8007798 <UTIL_TIMER_Create+0x2c>
 80077a2:	bf00      	nop
 80077a4:	08007e18 	.word	0x08007e18

080077a8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80077a8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80077aa:	4c03      	ldr	r4, [pc, #12]	; (80077b8 <UTIL_TIMER_GetCurrentTime+0x10>)
 80077ac:	69e3      	ldr	r3, [r4, #28]
 80077ae:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80077b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077b2:	4798      	blx	r3
}
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	bf00      	nop
 80077b8:	08007e18 	.word	0x08007e18

080077bc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80077c0:	4d05      	ldr	r5, [pc, #20]	; (80077d8 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80077c2:	69eb      	ldr	r3, [r5, #28]
 80077c4:	4798      	blx	r3
 80077c6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80077c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077ca:	4630      	mov	r0, r6
 80077cc:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80077ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80077d0:	1a20      	subs	r0, r4, r0
 80077d2:	4798      	blx	r3
}
 80077d4:	bd70      	pop	{r4, r5, r6, pc}
 80077d6:	bf00      	nop
 80077d8:	08007e18 	.word	0x08007e18

080077dc <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80077dc:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <TimerExists+0x18>)
 80077de:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80077e0:	e000      	b.n	80077e4 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80077e2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80077e4:	b11b      	cbz	r3, 80077ee <TimerExists+0x12>
    if( cur == TimerObject )
 80077e6:	4283      	cmp	r3, r0
 80077e8:	d1fb      	bne.n	80077e2 <TimerExists+0x6>
      return true;
 80077ea:	2001      	movs	r0, #1
  }
  return false;
}
 80077ec:	4770      	bx	lr
  return false;
 80077ee:	2000      	movs	r0, #0
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	200008f8 	.word	0x200008f8

080077f8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80077fc:	4e09      	ldr	r6, [pc, #36]	; (8007824 <TimerSetTimeout+0x2c>)
 80077fe:	6a33      	ldr	r3, [r6, #32]
 8007800:	4798      	blx	r3
 8007802:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8007804:	2301      	movs	r3, #1
 8007806:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8007808:	6827      	ldr	r7, [r4, #0]
 800780a:	69b6      	ldr	r6, [r6, #24]
 800780c:	47b0      	blx	r6
 800780e:	4428      	add	r0, r5
 8007810:	4287      	cmp	r7, r0
 8007812:	d202      	bcs.n	800781a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8007814:	47b0      	blx	r6
 8007816:	4428      	add	r0, r5
 8007818:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800781a:	4b02      	ldr	r3, [pc, #8]	; (8007824 <TimerSetTimeout+0x2c>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	4798      	blx	r3
}
 8007822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007824:	08007e18 	.word	0x08007e18

08007828 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8007828:	b368      	cbz	r0, 8007886 <UTIL_TIMER_Stop+0x5e>
{
 800782a:	b510      	push	{r4, lr}
 800782c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800782e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007832:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8007834:	4b15      	ldr	r3, [pc, #84]	; (800788c <UTIL_TIMER_Stop+0x64>)
 8007836:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8007838:	2301      	movs	r3, #1
 800783a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 800783c:	b1e1      	cbz	r1, 8007878 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8007842:	4288      	cmp	r0, r1
 8007844:	d006      	beq.n	8007854 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8007846:	460b      	mov	r3, r1
        while( cur != NULL )
 8007848:	b1b3      	cbz	r3, 8007878 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 800784a:	4293      	cmp	r3, r2
 800784c:	d011      	beq.n	8007872 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 800784e:	4619      	mov	r1, r3
            cur = cur->Next;
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	e7f9      	b.n	8007848 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8007854:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8007856:	6948      	ldr	r0, [r1, #20]
 8007858:	b120      	cbz	r0, 8007864 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <UTIL_TIMER_Stop+0x64>)
 800785c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 800785e:	f7ff ffcb 	bl	80077f8 <TimerSetTimeout>
 8007862:	e009      	b.n	8007878 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8007864:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <UTIL_TIMER_Stop+0x68>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	4798      	blx	r3
            TimerListHead = NULL;
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <UTIL_TIMER_Stop+0x64>)
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e002      	b.n	8007878 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	b123      	cbz	r3, 8007880 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8007876:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007878:	f384 8810 	msr	PRIMASK, r4
}
 800787c:	2000      	movs	r0, #0
}
 800787e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8007880:	2300      	movs	r3, #0
 8007882:	614b      	str	r3, [r1, #20]
 8007884:	e7f8      	b.n	8007878 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8007886:	2001      	movs	r0, #1
}
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200008f8 	.word	0x200008f8
 8007890:	08007e18 	.word	0x08007e18

08007894 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <TimerInsertTimer+0x28>)
 8007896:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8007898:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800789a:	e001      	b.n	80078a0 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 800789c:	461a      	mov	r2, r3
        next = next->Next;
 800789e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80078a0:	6951      	ldr	r1, [r2, #20]
 80078a2:	b139      	cbz	r1, 80078b4 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 80078a4:	6819      	ldr	r1, [r3, #0]
 80078a6:	f8d0 c000 	ldr.w	ip, [r0]
 80078aa:	458c      	cmp	ip, r1
 80078ac:	d8f6      	bhi.n	800789c <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 80078ae:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80078b0:	6143      	str	r3, [r0, #20]
        return;
 80078b2:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 80078b4:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	6143      	str	r3, [r0, #20]
}
 80078ba:	4770      	bx	lr
 80078bc:	200008f8 	.word	0x200008f8

080078c0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80078c0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <TimerInsertNewHeadTimer+0x18>)
 80078c4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80078c6:	b10b      	cbz	r3, 80078cc <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80078c8:	2200      	movs	r2, #0
 80078ca:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80078cc:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80078ce:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <TimerInsertNewHeadTimer+0x18>)
 80078d0:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80078d2:	f7ff ff91 	bl	80077f8 <TimerSetTimeout>
}
 80078d6:	bd08      	pop	{r3, pc}
 80078d8:	200008f8 	.word	0x200008f8

080078dc <UTIL_TIMER_Start>:
{
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80078de:	2800      	cmp	r0, #0
 80078e0:	d036      	beq.n	8007950 <UTIL_TIMER_Start+0x74>
 80078e2:	4604      	mov	r4, r0
 80078e4:	f7ff ff7a 	bl	80077dc <TimerExists>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d134      	bne.n	8007956 <UTIL_TIMER_Start+0x7a>
 80078ec:	7a65      	ldrb	r5, [r4, #9]
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	d133      	bne.n	800795a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80078f6:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80078f8:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80078fa:	4b19      	ldr	r3, [pc, #100]	; (8007960 <UTIL_TIMER_Start+0x84>)
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	4798      	blx	r3
    if( ticks < minValue )
 8007900:	4287      	cmp	r7, r0
 8007902:	d300      	bcc.n	8007906 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8007904:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8007906:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 800790c:	2201      	movs	r2, #1
 800790e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8007910:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <UTIL_TIMER_Start+0x88>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	b183      	cbz	r3, 800793a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8007918:	4b11      	ldr	r3, [pc, #68]	; (8007960 <UTIL_TIMER_Start+0x84>)
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	4418      	add	r0, r3
 8007922:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8007924:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <UTIL_TIMER_Start+0x88>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4298      	cmp	r0, r3
 800792c:	d20c      	bcs.n	8007948 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff ffc6 	bl	80078c0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007934:	f386 8810 	msr	PRIMASK, r6
}
 8007938:	e00b      	b.n	8007952 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <UTIL_TIMER_Start+0x84>)
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8007940:	4620      	mov	r0, r4
 8007942:	f7ff ffbd 	bl	80078c0 <TimerInsertNewHeadTimer>
 8007946:	e7f5      	b.n	8007934 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8007948:	4620      	mov	r0, r4
 800794a:	f7ff ffa3 	bl	8007894 <TimerInsertTimer>
 800794e:	e7f1      	b.n	8007934 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8007950:	2501      	movs	r5, #1
}
 8007952:	4628      	mov	r0, r5
 8007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8007956:	2501      	movs	r5, #1
 8007958:	e7fb      	b.n	8007952 <UTIL_TIMER_Start+0x76>
 800795a:	2501      	movs	r5, #1
 800795c:	e7f9      	b.n	8007952 <UTIL_TIMER_Start+0x76>
 800795e:	bf00      	nop
 8007960:	08007e18 	.word	0x08007e18
 8007964:	200008f8 	.word	0x200008f8

08007968 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8007968:	b198      	cbz	r0, 8007992 <UTIL_TIMER_SetPeriod+0x2a>
{
 800796a:	b510      	push	{r4, lr}
 800796c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800796e:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <UTIL_TIMER_SetPeriod+0x30>)
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	4608      	mov	r0, r1
 8007974:	4798      	blx	r3
 8007976:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff ff2f 	bl	80077dc <TimerExists>
 800797e:	b908      	cbnz	r0, 8007984 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8007980:	2000      	movs	r0, #0
}
 8007982:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8007984:	4620      	mov	r0, r4
 8007986:	f7ff ff4f 	bl	8007828 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800798a:	4620      	mov	r0, r4
 800798c:	f7ff ffa6 	bl	80078dc <UTIL_TIMER_Start>
 8007990:	e7f7      	b.n	8007982 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8007992:	2001      	movs	r0, #1
}
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	08007e18 	.word	0x08007e18

0800799c <UTIL_TIMER_IRQ_Handler>:
{
 800799c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800799e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80079a2:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80079a4:	4c1e      	ldr	r4, [pc, #120]	; (8007a20 <UTIL_TIMER_IRQ_Handler+0x84>)
 80079a6:	6963      	ldr	r3, [r4, #20]
 80079a8:	4798      	blx	r3
 80079aa:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 80079b0:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 80079b2:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <UTIL_TIMER_IRQ_Handler+0x88>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	b923      	cbnz	r3, 80079c2 <UTIL_TIMER_IRQ_Handler+0x26>
 80079b8:	e018      	b.n	80079ec <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80079be:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80079c0:	b1a3      	cbz	r3, 80079ec <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	42a2      	cmp	r2, r4
 80079c6:	d9f8      	bls.n	80079ba <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80079c8:	1a31      	subs	r1, r6, r0
 80079ca:	440a      	add	r2, r1
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e7f6      	b.n	80079be <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80079d0:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <UTIL_TIMER_IRQ_Handler+0x88>)
 80079d2:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80079d4:	6962      	ldr	r2, [r4, #20]
 80079d6:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80079dc:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80079de:	68e3      	ldr	r3, [r4, #12]
 80079e0:	6920      	ldr	r0, [r4, #16]
 80079e2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80079e4:	8963      	ldrh	r3, [r4, #10]
 80079e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ea:	d012      	beq.n	8007a12 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <UTIL_TIMER_IRQ_Handler+0x88>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	b13b      	cbz	r3, 8007a02 <UTIL_TIMER_IRQ_Handler+0x66>
 80079f2:	681c      	ldr	r4, [r3, #0]
 80079f4:	2c00      	cmp	r4, #0
 80079f6:	d0eb      	beq.n	80079d0 <UTIL_TIMER_IRQ_Handler+0x34>
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <UTIL_TIMER_IRQ_Handler+0x84>)
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	4798      	blx	r3
 80079fe:	4284      	cmp	r4, r0
 8007a00:	d3e6      	bcc.n	80079d0 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <UTIL_TIMER_IRQ_Handler+0x88>)
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	b108      	cbz	r0, 8007a0c <UTIL_TIMER_IRQ_Handler+0x70>
 8007a08:	7a03      	ldrb	r3, [r0, #8]
 8007a0a:	b133      	cbz	r3, 8007a1a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0c:	f385 8810 	msr	PRIMASK, r5
}
 8007a10:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8007a12:	4620      	mov	r0, r4
 8007a14:	f7ff ff62 	bl	80078dc <UTIL_TIMER_Start>
 8007a18:	e7e8      	b.n	80079ec <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8007a1a:	f7ff feed 	bl	80077f8 <TimerSetTimeout>
 8007a1e:	e7f5      	b.n	8007a0c <UTIL_TIMER_IRQ_Handler+0x70>
 8007a20:	08007e18 	.word	0x08007e18
 8007a24:	200008f8 	.word	0x200008f8

08007a28 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8007a28:	4601      	mov	r1, r0
  int i = 0;
 8007a2a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8007a2c:	e008      	b.n	8007a40 <ee_skip_atoi+0x18>
 8007a2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007a32:	1c53      	adds	r3, r2, #1
 8007a34:	600b      	str	r3, [r1, #0]
 8007a36:	7813      	ldrb	r3, [r2, #0]
 8007a38:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007a3c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8007a40:	680a      	ldr	r2, [r1, #0]
 8007a42:	7813      	ldrb	r3, [r2, #0]
 8007a44:	3b30      	subs	r3, #48	; 0x30
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b09      	cmp	r3, #9
 8007a4a:	d9f0      	bls.n	8007a2e <ee_skip_atoi+0x6>
  return i;
}
 8007a4c:	4770      	bx	lr
	...

08007a50 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8007a50:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8007a54:	b093      	sub	sp, #76	; 0x4c
 8007a56:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007a58:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8007a5a:	f016 0f40 	tst.w	r6, #64	; 0x40
 8007a5e:	d110      	bne.n	8007a82 <ee_number+0x32>
  char *dig = lower_digits;
 8007a60:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8007b5c <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8007a64:	1e9f      	subs	r7, r3, #2
 8007a66:	2f22      	cmp	r7, #34	; 0x22
 8007a68:	d875      	bhi.n	8007b56 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8007a6a:	f016 0401 	ands.w	r4, r6, #1
 8007a6e:	d00b      	beq.n	8007a88 <ee_number+0x38>
 8007a70:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8007a74:	f016 0f02 	tst.w	r6, #2
 8007a78:	d00f      	beq.n	8007a9a <ee_number+0x4a>
  {
    if (num < 0)
 8007a7a:	2a00      	cmp	r2, #0
 8007a7c:	db07      	blt.n	8007a8e <ee_number+0x3e>
  sign = 0;
 8007a7e:	2700      	movs	r7, #0
 8007a80:	e00c      	b.n	8007a9c <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8007a82:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8007b60 <ee_number+0x110>
 8007a86:	e7ed      	b.n	8007a64 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8007a88:	f04f 0e20 	mov.w	lr, #32
 8007a8c:	e7f2      	b.n	8007a74 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8007a8e:	4252      	negs	r2, r2
      size--;
 8007a90:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007a92:	3e01      	subs	r6, #1
 8007a94:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8007a96:	272d      	movs	r7, #45	; 0x2d
 8007a98:	e000      	b.n	8007a9c <ee_number+0x4c>
  sign = 0;
 8007a9a:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8007a9c:	bb5a      	cbnz	r2, 8007af6 <ee_number+0xa6>
    tmp[i++] = '0';
 8007a9e:	2330      	movs	r3, #48	; 0x30
 8007aa0:	f88d 3004 	strb.w	r3, [sp, #4]
 8007aa4:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8007aa8:	45ac      	cmp	ip, r5
 8007aaa:	dd00      	ble.n	8007aae <ee_number+0x5e>
 8007aac:	4665      	mov	r5, ip
  size -= precision;
 8007aae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007ab0:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007ab2:	b31c      	cbz	r4, 8007afc <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8007ab4:	b11f      	cbz	r7, 8007abe <ee_number+0x6e>
 8007ab6:	f800 7b01 	strb.w	r7, [r0], #1
 8007aba:	3901      	subs	r1, #1
 8007abc:	d007      	beq.n	8007ace <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ac4:	dd24      	ble.n	8007b10 <ee_number+0xc0>
 8007ac6:	f800 eb01 	strb.w	lr, [r0], #1
 8007aca:	3901      	subs	r1, #1
 8007acc:	d1f7      	bne.n	8007abe <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8007ace:	b013      	add	sp, #76	; 0x4c
 8007ad0:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8007ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ad8:	fb03 2216 	mls	r2, r3, r6, r2
 8007adc:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8007ae0:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8007ae4:	446a      	add	r2, sp
 8007ae6:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8007aea:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8007aec:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8007af0:	2a00      	cmp	r2, #0
 8007af2:	d1ef      	bne.n	8007ad4 <ee_number+0x84>
 8007af4:	e7d8      	b.n	8007aa8 <ee_number+0x58>
  i = 0;
 8007af6:	f04f 0c00 	mov.w	ip, #0
 8007afa:	e7f9      	b.n	8007af0 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b02:	ddd7      	ble.n	8007ab4 <ee_number+0x64>
 8007b04:	2220      	movs	r2, #32
 8007b06:	f800 2b01 	strb.w	r2, [r0], #1
 8007b0a:	3901      	subs	r1, #1
 8007b0c:	d1f6      	bne.n	8007afc <ee_number+0xac>
 8007b0e:	e7de      	b.n	8007ace <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8007b10:	4565      	cmp	r5, ip
 8007b12:	f105 35ff 	add.w	r5, r5, #4294967295
 8007b16:	dd05      	ble.n	8007b24 <ee_number+0xd4>
 8007b18:	2230      	movs	r2, #48	; 0x30
 8007b1a:	f800 2b01 	strb.w	r2, [r0], #1
 8007b1e:	3901      	subs	r1, #1
 8007b20:	d1f6      	bne.n	8007b10 <ee_number+0xc0>
 8007b22:	e7d4      	b.n	8007ace <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8007b24:	4662      	mov	r2, ip
 8007b26:	2a00      	cmp	r2, #0
 8007b28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b2c:	dd09      	ble.n	8007b42 <ee_number+0xf2>
 8007b2e:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8007b32:	446a      	add	r2, sp
 8007b34:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8007b38:	f800 2b01 	strb.w	r2, [r0], #1
 8007b3c:	3901      	subs	r1, #1
 8007b3e:	d1f1      	bne.n	8007b24 <ee_number+0xd4>
 8007b40:	e7c5      	b.n	8007ace <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b48:	ddc1      	ble.n	8007ace <ee_number+0x7e>
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f800 2b01 	strb.w	r2, [r0], #1
 8007b50:	3901      	subs	r1, #1
 8007b52:	d1f6      	bne.n	8007b42 <ee_number+0xf2>
 8007b54:	e7bb      	b.n	8007ace <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8007b56:	2000      	movs	r0, #0
 8007b58:	e7b9      	b.n	8007ace <ee_number+0x7e>
 8007b5a:	bf00      	nop
 8007b5c:	080082a0 	.word	0x080082a0
 8007b60:	080082c8 	.word	0x080082c8

08007b64 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8007b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b68:	b087      	sub	sp, #28
 8007b6a:	9205      	str	r2, [sp, #20]
 8007b6c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8007b6e:	1e0f      	subs	r7, r1, #0
 8007b70:	f340 80b8 	ble.w	8007ce4 <tiny_vsnprintf_like+0x180>
 8007b74:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007b76:	4604      	mov	r4, r0
 8007b78:	e004      	b.n	8007b84 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8007b7a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007b7e:	9b05      	ldr	r3, [sp, #20]
 8007b80:	3301      	adds	r3, #1
 8007b82:	9305      	str	r3, [sp, #20]
 8007b84:	9905      	ldr	r1, [sp, #20]
 8007b86:	780a      	ldrb	r2, [r1, #0]
 8007b88:	b922      	cbnz	r2, 8007b94 <tiny_vsnprintf_like+0x30>
 8007b8a:	1ba3      	subs	r3, r4, r6
 8007b8c:	1e78      	subs	r0, r7, #1
 8007b8e:	4283      	cmp	r3, r0
 8007b90:	f2c0 80a2 	blt.w	8007cd8 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8007b94:	1ba3      	subs	r3, r4, r6
 8007b96:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b9a:	4543      	cmp	r3, r8
 8007b9c:	f280 809c 	bge.w	8007cd8 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8007ba0:	2a25      	cmp	r2, #37	; 0x25
 8007ba2:	d1ea      	bne.n	8007b7a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8007ba4:	1c4b      	adds	r3, r1, #1
 8007ba6:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8007ba8:	784b      	ldrb	r3, [r1, #1]
 8007baa:	2b30      	cmp	r3, #48	; 0x30
 8007bac:	d020      	beq.n	8007bf0 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8007bae:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8007bb2:	3b30      	subs	r3, #48	; 0x30
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d91d      	bls.n	8007bf6 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8007bba:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8007bbe:	9b05      	ldr	r3, [sp, #20]
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	d867      	bhi.n	8007c9a <tiny_vsnprintf_like+0x136>
 8007bca:	e8df f003 	tbb	[pc, r3]
 8007bce:	664a      	.short	0x664a
 8007bd0:	66666666 	.word	0x66666666
 8007bd4:	66666666 	.word	0x66666666
 8007bd8:	66621e66 	.word	0x66621e66
 8007bdc:	62666666 	.word	0x62666666
 8007be0:	66666666 	.word	0x66666666
 8007be4:	66666666 	.word	0x66666666
 8007be8:	19662866 	.word	0x19662866
 8007bec:	6666      	.short	0x6666
 8007bee:	7c          	.byte	0x7c
 8007bef:	00          	.byte	0x00
      flags |= ZEROPAD;
 8007bf0:	f04f 0901 	mov.w	r9, #1
 8007bf4:	e7dd      	b.n	8007bb2 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8007bf6:	a805      	add	r0, sp, #20
 8007bf8:	f7ff ff16 	bl	8007a28 <ee_skip_atoi>
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	e7de      	b.n	8007bbe <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8007c00:	230a      	movs	r3, #10
 8007c02:	e031      	b.n	8007c68 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8007c04:	2320      	movs	r3, #32
 8007c06:	f804 3b01 	strb.w	r3, [r4], #1
 8007c0a:	3d01      	subs	r5, #1
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	dcf9      	bgt.n	8007c04 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8007c10:	9b04      	ldr	r3, [sp, #16]
 8007c12:	1d1a      	adds	r2, r3, #4
 8007c14:	9204      	str	r2, [sp, #16]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8007c1c:	e7af      	b.n	8007b7e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	9204      	str	r2, [sp, #16]
 8007c24:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8007c28:	f1b8 0f00 	cmp.w	r8, #0
 8007c2c:	d003      	beq.n	8007c36 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7f8 faa2 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8007c34:	e006      	b.n	8007c44 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8007c36:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007ce8 <tiny_vsnprintf_like+0x184>
 8007c3a:	e7f8      	b.n	8007c2e <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f804 2b01 	strb.w	r2, [r4], #1
 8007c42:	461d      	mov	r5, r3
 8007c44:	1e6b      	subs	r3, r5, #1
 8007c46:	4285      	cmp	r5, r0
 8007c48:	dcf8      	bgt.n	8007c3c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	e006      	b.n	8007c5c <tiny_vsnprintf_like+0xf8>
 8007c4e:	4643      	mov	r3, r8
 8007c50:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007c54:	f804 1b01 	strb.w	r1, [r4], #1
 8007c58:	3201      	adds	r2, #1
 8007c5a:	4698      	mov	r8, r3
 8007c5c:	4282      	cmp	r2, r0
 8007c5e:	dbf6      	blt.n	8007c4e <tiny_vsnprintf_like+0xea>
 8007c60:	e78d      	b.n	8007b7e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8007c62:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8007c66:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8007c68:	f019 0f02 	tst.w	r9, #2
 8007c6c:	d02f      	beq.n	8007cce <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8007c6e:	9a04      	ldr	r2, [sp, #16]
 8007c70:	1d11      	adds	r1, r2, #4
 8007c72:	9104      	str	r1, [sp, #16]
 8007c74:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007c76:	1ba1      	subs	r1, r4, r6
 8007c78:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	9001      	str	r0, [sp, #4]
 8007c82:	9500      	str	r5, [sp, #0]
 8007c84:	eba8 0101 	sub.w	r1, r8, r1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f7ff fee1 	bl	8007a50 <ee_number>
 8007c8e:	4604      	mov	r4, r0
 8007c90:	e775      	b.n	8007b7e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8007c92:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8007c96:	230a      	movs	r3, #10
 8007c98:	e7e6      	b.n	8007c68 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8007c9a:	2a25      	cmp	r2, #37	; 0x25
 8007c9c:	d002      	beq.n	8007ca4 <tiny_vsnprintf_like+0x140>
 8007c9e:	2325      	movs	r3, #37	; 0x25
 8007ca0:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8007ca4:	1ba3      	subs	r3, r4, r6
 8007ca6:	4598      	cmp	r8, r3
 8007ca8:	dd0f      	ble.n	8007cca <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8007caa:	9b05      	ldr	r3, [sp, #20]
 8007cac:	781a      	ldrb	r2, [r3, #0]
 8007cae:	b13a      	cbz	r2, 8007cc0 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8007cb0:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8007cb4:	1ba3      	subs	r3, r4, r6
 8007cb6:	4598      	cmp	r8, r3
 8007cb8:	f73f af61 	bgt.w	8007b7e <tiny_vsnprintf_like+0x1a>
    base = 10;
 8007cbc:	230a      	movs	r3, #10
 8007cbe:	e7d3      	b.n	8007c68 <tiny_vsnprintf_like+0x104>
          --fmt;
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	9305      	str	r3, [sp, #20]
 8007cc4:	e7f6      	b.n	8007cb4 <tiny_vsnprintf_like+0x150>
        base = 16;
 8007cc6:	2310      	movs	r3, #16
 8007cc8:	e7ce      	b.n	8007c68 <tiny_vsnprintf_like+0x104>
    base = 10;
 8007cca:	230a      	movs	r3, #10
 8007ccc:	e7cc      	b.n	8007c68 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8007cce:	9a04      	ldr	r2, [sp, #16]
 8007cd0:	1d11      	adds	r1, r2, #4
 8007cd2:	9104      	str	r1, [sp, #16]
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	e7ce      	b.n	8007c76 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8007cd8:	2300      	movs	r3, #0
 8007cda:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8007cdc:	1ba0      	subs	r0, r4, r6
}
 8007cde:	b007      	add	sp, #28
 8007ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e7fa      	b.n	8007cde <tiny_vsnprintf_like+0x17a>
 8007ce8:	080082f0 	.word	0x080082f0

08007cec <memset>:
 8007cec:	4402      	add	r2, r0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d100      	bne.n	8007cf6 <memset+0xa>
 8007cf4:	4770      	bx	lr
 8007cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfa:	e7f9      	b.n	8007cf0 <memset+0x4>

08007cfc <strncmp>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	b16a      	cbz	r2, 8007d1c <strncmp+0x20>
 8007d00:	3901      	subs	r1, #1
 8007d02:	1884      	adds	r4, r0, r2
 8007d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d103      	bne.n	8007d18 <strncmp+0x1c>
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d001      	beq.n	8007d18 <strncmp+0x1c>
 8007d14:	2a00      	cmp	r2, #0
 8007d16:	d1f5      	bne.n	8007d04 <strncmp+0x8>
 8007d18:	1ad0      	subs	r0, r2, r3
 8007d1a:	bd10      	pop	{r4, pc}
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	e7fc      	b.n	8007d1a <strncmp+0x1e>

08007d20 <__libc_init_array>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	4d0d      	ldr	r5, [pc, #52]	; (8007d58 <__libc_init_array+0x38>)
 8007d24:	4c0d      	ldr	r4, [pc, #52]	; (8007d5c <__libc_init_array+0x3c>)
 8007d26:	1b64      	subs	r4, r4, r5
 8007d28:	10a4      	asrs	r4, r4, #2
 8007d2a:	2600      	movs	r6, #0
 8007d2c:	42a6      	cmp	r6, r4
 8007d2e:	d109      	bne.n	8007d44 <__libc_init_array+0x24>
 8007d30:	4d0b      	ldr	r5, [pc, #44]	; (8007d60 <__libc_init_array+0x40>)
 8007d32:	4c0c      	ldr	r4, [pc, #48]	; (8007d64 <__libc_init_array+0x44>)
 8007d34:	f000 f826 	bl	8007d84 <_init>
 8007d38:	1b64      	subs	r4, r4, r5
 8007d3a:	10a4      	asrs	r4, r4, #2
 8007d3c:	2600      	movs	r6, #0
 8007d3e:	42a6      	cmp	r6, r4
 8007d40:	d105      	bne.n	8007d4e <__libc_init_array+0x2e>
 8007d42:	bd70      	pop	{r4, r5, r6, pc}
 8007d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d48:	4798      	blx	r3
 8007d4a:	3601      	adds	r6, #1
 8007d4c:	e7ee      	b.n	8007d2c <__libc_init_array+0xc>
 8007d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d52:	4798      	blx	r3
 8007d54:	3601      	adds	r6, #1
 8007d56:	e7f2      	b.n	8007d3e <__libc_init_array+0x1e>
 8007d58:	08008300 	.word	0x08008300
 8007d5c:	08008300 	.word	0x08008300
 8007d60:	08008300 	.word	0x08008300
 8007d64:	08008304 	.word	0x08008304

08007d68 <memcpy>:
 8007d68:	440a      	add	r2, r1
 8007d6a:	4291      	cmp	r1, r2
 8007d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d70:	d100      	bne.n	8007d74 <memcpy+0xc>
 8007d72:	4770      	bx	lr
 8007d74:	b510      	push	{r4, lr}
 8007d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	d1f9      	bne.n	8007d76 <memcpy+0xe>
 8007d82:	bd10      	pop	{r4, pc}

08007d84 <_init>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	bf00      	nop
 8007d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8a:	bc08      	pop	{r3}
 8007d8c:	469e      	mov	lr, r3
 8007d8e:	4770      	bx	lr

08007d90 <_fini>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	bf00      	nop
 8007d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d96:	bc08      	pop	{r3}
 8007d98:	469e      	mov	lr, r3
 8007d9a:	4770      	bx	lr
 8007d9c:	0000      	movs	r0, r0
	...
